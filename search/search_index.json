{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Lambda Event Resources","text":"<p>This site tries to collect as many resources on AWS Lambda events from schema, examples to code libraries.</p> Objectives of this site <p>Objective is to collect resources on Lambda inputs (requests) and outputs (responses) as well as the following:</p> <ul> <li>Invocation type (synchronous, asynchronous or polling)</li> <li>Limitations of each type of Lambda</li> <li>Input schema</li> <li>Response schema</li> <li>Example events</li> <li>Libraries for typing, data structures, and other utilities</li> <li>Event handlers libraries by language</li> <li>Response handlers by language</li> <li>Documentation and blog posts</li> <li>Code examples</li> </ul>"},{"location":"#lambda-event-sources","title":"Lambda Event Sources","text":"<p>Directory of AWS Lambda events sources and resources</p> <ul> <li>API Gateway - Http API - synchronously invokes</li> <li>API Gateway - HTTP API - Custom Authorizer - synchronously invokes</li> <li>API Gateway - Rest API - synchronously invokes</li> <li>API Gateway - Rest API - Custom Authorizer - synchronously invokes</li> <li>AWS Lambda Function URLs - synchronously invokes</li> <li>Alexa Skills - synchronously invokes</li> <li>Alexa Smart Home - synchronously invokes</li> <li>AppSync - Resolver - synchronously invokes</li> <li>AppSync - Custom Authorizer - synchronously invokes</li> <li>Amazon EventBridge - CloudWatch Event - asynchronously invokes</li> <li>CloudWatch Logs - asynchronously invokes</li> <li>CloudFormation - Custom Resource - asynchronously invokes</li> <li>CloudFront - Lambda@Edge - synchronously invokes</li> <li>CloudFront - CloudFront Functions - synchronously invokes</li> <li>CodeCommit - asynchronously invokes</li> <li>CodePipeline - Job - asynchronously invokes</li> <li>Amazon Cognito - User Pool - synchronously invokes</li> <li>AWS Cognito - Sync - synchronously invokes</li> <li>AWS Config - asynchronously invokes</li> <li>Amazon Connect - synchronously invokes</li> <li>Amazon DynamoDB - poll-based invokes (synchronously)</li> <li>Application Load Balancer - synchronously invokes</li> <li>AWS IoT - asynchronously invokes</li> <li>AWS IoT - Events - asynchronously invokes</li> <li>Apache Kafka - poll-based invokes (synchronously)</li> <li>Amazon Kinesis - Data Firehose - poll-based invokes (synchronously)</li> <li>Amazon Kinesis - Data Streams - poll-based invokes (synchronously)</li> <li>Amazon Lex - synchronously invokes</li> <li>Amazon Lex V2 - synchronously invokes</li> <li>Amazon MQ - Active MQ and Rabbit MQ - poll-based invokes (synchronously)</li> <li>Amazon MSK - poll-based invokes (synchronously)</li> <li>S3 - Notifications - asynchronously invokes</li> <li>S3 - Batch Operations - synchronously invokes</li> <li>S3 - Object Lambda - synchronously invokes</li> <li>Secrets Manager - synchronously invokes</li> <li>Amazon SES - configurable as asynchronously invokes or synchronously invokes</li> <li>Amazon SNS - asynchronously invokes</li> <li>Amazon SQS - asynchronously invokes</li> <li>Amazon WorkMail - configurable as asynchronously invokes or synchronously invokes</li> </ul>"},{"location":"alb/","title":"Application Load Balancer","text":"<p>Elastic Load Balancing invokes your Lambda function synchronously with an event that contains the request body and metadata.</p>"},{"location":"alb/#limits","title":"Limits","text":"<ul> <li>The Lambda function and target group must be in the same account and in the same Region.</li> <li>The maximum size of the request body that you can send to a Lambda function is 1 MB. For related size limits, see HTTP header limits.</li> <li>The maximum size of the response JSON that the Lambda function can send is 1 MB.</li> <li>WebSockets are not supported. Upgrade requests are rejected with an HTTP 400 code.</li> <li>Local Zones are not supported.</li> </ul> Tip: Reasons to use Application Load Balancers over API Gateway <ul> <li>Nearly unlimited tps vs 10,000 requests per second (RPS) (Can be increased)</li> <li>No specific function timeout vs 30 seconds for API Gateway</li> <li>DDOS protection via AWS Shield support vs no support for API Gateway</li> <li>Application Load Balancer pricing favors high transactions per second</li> </ul> Tip: Reasons to use API Gateway over Application Load Balancer <ul> <li>API Gateway has a 10 MB request body limit</li> <li>API Gateway has support for WebSockets</li> <li>API Gateway has built in support for rate limiting support</li> <li>API Gateway has built in support authentication support</li> <li>API Gateway pricing allow for scale to zero</li> <li>Application Load Balancer would require a VPC</li> </ul>"},{"location":"alb/#request","title":"Request","text":""},{"location":"alb/#request-fields","title":"Request Fields","text":"<code>targetGroupArn</code> (String) Target group arn for your Lambda function <code>httpMethod</code> (String) The HTTP method used. Valid values include: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT. <code>path</code> (String) Http request path <code>multiValueQueryStringParameters</code> (Optional, map of string to list of strings) If you enable multi-value headers, the load balancer uses both key values sent by the client and sends you an event that includes query string parameters using multiValueQueryStringParameters <code>queryStringParameters</code> (Optional, map of string to string) Query string parameters sent by the client. <code>headers</code> (Optional, map of string to string) Http header sent by the client. <code>isBase64Encoded</code> (Boolean) A Boolean flag to indicate if the request body is Base64-encoded. <code>body</code> (Optional, string) The request body sent by the client."},{"location":"alb/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>headers.\"x-amzn-trace-id\"</code></p>"},{"location":"alb/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event alb request --body {\"test\":\"body\"} --path foo --method POST\n</code></pre>"},{"location":"alb/#request-example","title":"Request Example","text":"Application Load Balance GET request<pre><code>{\n  \"requestContext\": {\n    \"elb\": {\n      \"targetGroupArn\": \"arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/lambda-279XGJDqGZ5rsrHC2Fjr/49e9d65c45c6791a\"\n    }\n  },\n  \"httpMethod\": \"GET\",\n  \"path\": \"/lambda\",\n  \"queryStringParameters\": {\n    \"query\": \"1234ABCD\"\n  },\n  \"multiValueQueryStringParameters\": {\n    \"myKey\": [\n      \"val1\",\n      \"val2\"\n    ]\n  },\n  \"headers\": {\n    \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n    \"accept-encoding\": \"gzip\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"connection\": \"keep-alive\",\n    \"host\": \"lambda-alb-123578498.us-east-2.elb.amazonaws.com\",\n    \"upgrade-insecure-requests\": \"1\",\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\",\n    \"x-amzn-trace-id\": \"Root=1-5c536348-3d683b8b04734faae651f476\",\n    \"x-forwarded-for\": \"72.12.164.125\",\n    \"x-forwarded-port\": \"80\",\n    \"x-forwarded-proto\": \"http\",\n    \"x-imforwards\": \"20\"\n  },\n  \"body\": \"Test\",\n  \"isBase64Encoded\": false\n}\n</code></pre>"},{"location":"alb/#response","title":"Response","text":""},{"location":"alb/#response-fields","title":"Response Fields","text":"<code>isBase64Encoded</code> (Boolean) A Boolean flag to indicate if the response body is Base64-encoded. <code>statusCode</code> (Integer) The HTTP status code. <code>statusDescription</code> (String) The HTTP status description. <code>headers</code> (Optional, map of string to string) Http header to be sent in the response. <code>body</code> (Optional, string) The response body sent by the server."},{"location":"alb/#response-examples","title":"Response Examples","text":"Example 200 html response<pre><code>{\n    \"statusCode\": 200,\n    \"statusDescription\": \"200 OK\",\n    \"isBase64Encoded\": False,\n    \"headers\": {\n        \"Content-Type\": \"text/html\"\n    },\n    \"body\": \"&lt;h1&gt;Hello from Lambda!&lt;/h1&gt;\"\n}\n</code></pre> <p>Note</p> <p>If you enable multi-value headers, you must specify multiple cookies as follows</p> <pre><code>{\n  \"multiValueHeaders\":{\n      \"Set-cookie\":[\n        \"cookie-name=cookie-value;Domain=myweb.com;Secure;HttpOnly\",\n        \"cookie-name=cookie-value;Expires=May 8, 2019\"\n      ],\n      \"Content-Type\":[\n        \"application/json\"\n      ]\n  }\n}  \n</code></pre>"},{"location":"alb/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Python - ALBEvent - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - ALBEvent - NPM <code>@types/aws-lambda</code></li> <li>Rust - AlbTargetGroupRequest - Cargo <code>aws_lambda_events</code></li> <li>Go - ApplicationLoadBalancerRequest - Crate <code>github.com/aws/aws-lambda-go/events</code></li> <li>Java - ApplicationLoadBalancerRequestEvent - Maven <code>aws-lambda-java-events</code></li> <li>DoNet - ApplicationLoadBalancerEvents - NuGet <code>Amazon.Lambda.ApplicationLoadBalancerEvents</code></li> </ul> <p>Convenient Lambda Handlers</p> <ul> <li>Python - AWS Lambda Powertools - ALBResolver</li> <li>Java - Serverless Java container - Makes it easy to run Java applications written with frameworks such as Spring, Spring Boot, Apache Struts, Jersey, or Spark in AWS Lambda</li> <li>AWS Lambda Adapter - A tool to run any web applications on AWS Lambda. Written in Rust.</li> </ul>"},{"location":"alb/#code-examples","title":"Code Examples","text":"<ul> <li>GitHub - application-load-balancer-serverless-app</li> </ul>"},{"location":"alb/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with an Application Load Balancer</li> <li>ALB - Lambda functions as targets</li> <li>Lambda functions as targets for Application Load Balancers</li> </ul>"},{"location":"alexa-skills-kit/","title":"Alexa Skills","text":"<p>Event-driven, synchronous invocation</p>"},{"location":"alexa-skills-kit/#request","title":"Request","text":""},{"location":"alexa-skills-kit/#generating-sameple-events","title":"Generating sameple events","text":"<pre><code>sam local generate-event alexa-skills-kit end-session\nsam local generate-event alexa-skills-kit intent-answer\nsam local generate-event alexa-skills-kit intent-getnewfact\nsam local generate-event alexa-skills-kit intent-mycoloris\nsam local generate-event alexa-skills-kit intent-recipe\nsam local generate-event alexa-skills-kit start-session\n</code></pre>"},{"location":"alexa-skills-kit/#event-example","title":"Event Example","text":"Amazon Alexa Intent Recipe Event<pre><code>{\n  \"version\": \"1.0\",\n  \"session\": {\n    \"new\": false,\n    \"sessionId\": \"amzn1.echo-api.session.123456789012\",\n    \"application\": {\n      \"applicationId\": \"amzn1.ask.skill.987654321\"\n    },\n    \"attributes\": {},\n    \"user\": {\n      \"userId\": \"amzn1.ask.account.testUser\"\n    }\n  },\n  \"context\": {\n    \"AudioPlayer\": {\n      \"playerActivity\": \"IDLE\"\n    },\n    \"System\": {\n      \"application\": {\n        \"applicationId\": \"amzn1.ask.skill.987654321\"\n      },\n      \"user\": {\n        \"userId\": \"amzn1.ask.account.userId\"\n      },\n      \"device\": {\n        \"supportedInterfaces\": {\n          \"AudioPlayer\": {}\n        }\n      }\n    }\n  },\n  \"request\": {\n    \"type\": \"IntentRequest\",\n    \"requestId\": \"amzn1.echo-api.request.1234\",\n    \"timestamp\": \"2016-10-27T21:06:28Z\",\n    \"locale\": \"en-US\",\n    \"intent\": {\n      \"name\": \"RecipeIntent\",\n      \"slots\": {\n        \"Item\": {\n          \"name\": \"Item\",\n          \"value\": \"snowball\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"alexa-skills-kit/#response","title":"Response","text":""},{"location":"alexa-skills-kit/#resources","title":"Resources","text":"<p>Language SDK</p> <ul> <li>Python SDK</li> <li>NodeJS SDK</li> <li>Java SDK</li> </ul> <p>Sample projects</p> <ul> <li>Python - skill-sample-python-fact</li> </ul>"},{"location":"alexa-skills-kit/#documentation","title":"Documentation","text":"<ul> <li>Host a Custom Skill as an AWS Lambda Function</li> </ul>"},{"location":"alexa-smart-home/","title":"Alexa Smart Home","text":"<p>Event-driven, synchronous invocation</p>"},{"location":"alexa-smart-home/#request","title":"Request","text":""},{"location":"alexa-smart-home/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event alexa-smart-home smart-home-control-turn-off-request\nsam local generate-event alexa-smart-home smart-home-control-turn-on-request\n</code></pre>"},{"location":"alexa-smart-home/#event-example","title":"Event Example","text":"Smart Home Skill V3 request<pre><code>{\n  \"directive\": {\n    \"header\": {\n      \"namespace\": \"Alexa.Discovery\",\n      \"name\": \"Discover\",\n      \"payloadVersion\": \"3\",\n      \"messageId\": \"1bd5d003-31b9-476f-ad03-71d471922820\"\n    },\n    \"payload\": {\n      \"scope\": {\n        \"type\": \"BearerToken\"\n      }\n    }\n  }\n}\n</code></pre> Example Alexa smart home event version 1<pre><code>{\n  \"header\": {\n    \"payloadVersion\": \"1\",\n    \"namespace\": \"Control\",\n    \"name\": \"SwitchOnOffRequest\"\n  },\n  \"payload\": {\n    \"switchControlAction\": \"TURN_ON\",\n    \"appliance\": {\n      \"additionalApplianceDetails\": {\n        \"key2\": \"value2\",\n        \"key1\": \"value1\"\n      },\n      \"applianceId\": \"sampleId\"\n    },\n    \"accessToken\": \"sampleAccessToken\"\n  }\n}\n</code></pre>"},{"location":"alexa-smart-home/#response","title":"Response","text":"Smart Home Skill V3 response<pre><code>{\n  \"event\": {\n    \"header\": {\n      \"namespace\": \"Alexa.Discovery\",\n      \"name\": \"Discover.Response\",\n      \"messageId\": \"b5a1d155-3a97-479e-80fa-913b4afee758\",\n      \"payloadVersion\": \"3\"\n    },\n    \"payload\": {\n      \"endpoints\": [\n        {\n          \"capabilities\": [\n            {\n              \"type\": \"AlexaInterface\",\n              \"interface\": \"Alexa\",\n              \"version\": \"3\"\n            },\n            {\n              \"type\": \"AlexaInterface\",\n              \"interface\": \"Alexa.PowerController\",\n              \"version\": \"3\",\n              \"properties\": {\n                \"supported\": [\n                  {\n                    \"name\": \"powerState\"\n                  }\n                ],\n                \"proactivelyReported\": false,\n                \"retrievable\": false\n              }\n            }\n          ],\n          \"description\": \"Sample Endpoint Description\",\n          \"displayCategories\": [\n            \"OTHER\"\n          ],\n          \"endpointId\": \"sample-switch-01\",\n          \"friendlyName\": \"Sample Switch\",\n          \"manufacturerName\": \"Sample Manufacturer\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> legacy v1.0<pre><code>{\n  \"version\": \"1.0\",\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"SSML\",\n      \"ssml\": \"&lt;speak&gt;Welcome to Premium Facts Sample. To hear a random fact you can say 'Tell me a fact', or to hear about the premium categories for purchase, say 'What can I buy'.  For help, say , 'Help me'... So, What can I help you with?&lt;/speak&gt;\"\n    },\n    \"reprompt\": {\n      \"outputSpeech\": {\n        \"type\": \"SSML\",\n        \"ssml\": \"&lt;speak&gt;I didn't catch that. What can I help you with?&lt;/speak&gt;\"\n      }\n    },\n    \"shouldEndSession\": false\n  },\n  \"userAgent\": \"ask-node/2.3.0 Node/v8.10.0\",\n  \"sessionAttributes\": {}\n}\n</code></pre>"},{"location":"alexa-smart-home/#resources","title":"Resources","text":"<p>Lambda examples by Language</p> <ul> <li>Skill Sample : Smarthome Switch (Node.js)</li> <li>Skill Sample : Smarthome Switch (Python)</li> <li>Skill Sample : Smarthome Switch (Java)</li> <li>Skill Sample : Smarthome Switch (C#)</li> <li>Python - alexa smart home example</li> <li>Serverless - Alexa Smart Home</li> </ul>"},{"location":"alexa-smart-home/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Alexa</li> <li>Host a Custom Skill as an AWS Lambda function</li> <li>Alexa Smart Home - Workshop</li> </ul>"},{"location":"amazon-msk/","title":"Amazon MSK","text":"<p>Amazon Managed Streaming for Apache Kafka (Amazon MSK) is a fully managed service that you can use to build and run applications that use Apache Kafka to process streaming data.</p> <p>Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in  batches and provides these to your function as an event payload.</p>"},{"location":"amazon-msk/#limits","title":"Limits","text":"<ul> <li>The maximum batch size is configurable. (The default is 100 messages.)</li> <li>Lambda can run your function for up to 14 minutes.</li> </ul>"},{"location":"amazon-msk/#request","title":"Request","text":"<p>Note</p> <p>Shares the same structure as Self managed Apache Kafka, except for the eventSource field is set to \"aws:msk\".</p> Managed Kafka<pre><code>{\n   \"eventSource\": \"aws:kafka\",\n   \"eventSourceArn\": \"arn:aws:kafka:sa-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",\n   \"records\": {\n      \"mytopic-0\": [\n         {\n            \"topic\": \"mytopic\",\n            \"partition\": \"0\",\n            \"offset\": 15,\n            \"timestamp\": 1545084650987,\n            \"timestampType\": \"CREATE_TIME\",\n            \"value\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n            \"headers\": [\n               {\n                  \"headerKey\": [\n                     104,\n                     101,\n                     97,\n                     100,\n                     101,\n                     114,\n                     86,\n                     97,\n                     108,\n                     117,\n                     101\n                  ]\n               }\n            ]\n         }\n      ]\n   }\n}\n</code></pre> Another managed Kafka example<pre><code>{\n  \"eventSource\": \"aws:kafka\",\n  \"eventSourceArn\": \"arn:aws:kafka:us-west-2:012345678901:cluster/ExampleMSKCluster/e9f754c6-d29a-4430-a7db-958a19fd2c54-4\",\n  \"bootstrapServers\": \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\",\n  \"records\": {\n    \"AWSKafkaTopic-0\": [\n      {\n        \"topic\": \"AWSKafkaTopic\",\n        \"partition\": 0,\n        \"offset\": 0,\n        \"timestamp\": 1595035749700,\n        \"timestampType\": \"CREATE_TIME\",\n        \"key\": \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\",\n        \"value\": \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\",\n        \"headers\": [\n          {\n            \"headerKey\": \"aGVhZGVyVmFsdWU=\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"amazon-msk/#response","title":"Response","text":""},{"location":"amazon-msk/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Typescript - MSKEvent - NPM <code>@types/aws-lambda</code></li> </ul>"},{"location":"amazon-msk/#code-examples","title":"Code examples","text":"<ul> <li>Amazon MSK AWS Lambda Integration Lab - Code</li> </ul>"},{"location":"amazon-msk/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with Amazon MSK</li> <li>Using Amazon MSK as an event source for AWS Lambda</li> </ul>"},{"location":"apache-kafka/","title":"Apache Kafka","text":"<p>Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in batches and provides these to your function as an event payload. The maximum batch size is configurable. (The default is 100 messages.)</p>"},{"location":"apache-kafka/#request","title":"Request","text":"<p>Note</p> <p>Shares the same structure as Amazon MSK, except for the eventSource field is set to \"aws:SelfManagedKafka\".</p> Self managed kafka example<pre><code>{\n   \"eventSource\": \"aws:SelfManagedKafka\",\n   \"bootstrapServers\": \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\",\n   \"records\": {\n      \"mytopic-0\": [\n         {\n            \"topic\": \"mytopic\",\n            \"partition\": \"0\",\n            \"offset\": 15,\n            \"timestamp\": 1545084650987,\n            \"timestampType\": \"CREATE_TIME\",\n            \"value\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n            \"headers\": [\n               {\n                  \"headerKey\": [\n                     104,\n                     101,\n                     97,\n                     100,\n                     101,\n                     114,\n                     86,\n                     97,\n                     108,\n                     117,\n                     101\n                  ]\n               }\n            ]\n         }\n      ]\n   }\n}\n</code></pre>"},{"location":"apache-kafka/#response","title":"Response","text":""},{"location":"apache-kafka/#resources","title":"Resources","text":"<ul> <li>Go - KafkaEvent</li> <li>Java - KafkaEvent</li> </ul>"},{"location":"apache-kafka/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with self-managed Apache Kafka</li> <li>Using self-hosted Apache Kafka as an event source for AWS Lambda</li> </ul>"},{"location":"appsync-authorizer/","title":"AppSync Authorizer","text":"<p>Event driven, invoked synchronously.</p>"},{"location":"appsync-authorizer/#limits","title":"Limits","text":"<ul> <li>Lambda authorizers have a timeout of 10 seconds.</li> <li>An authorization token must not exceed 2048 characters</li> <li>A Lambda function must not return more than 5MB of contextual data for resolvers.</li> </ul>"},{"location":"appsync-authorizer/#request","title":"Request","text":"<pre><code>{\n  \"authorizationToken\": \"BE9DC5E3-D410-4733-AF76-70178092E681\",\n  \"requestContext\": {\n    \"apiId\": \"giy7kumfmvcqvbedntjwjvagii\",\n    \"accountId\": \"254688921111\",\n    \"requestId\": \"b80ed838-14c6-4500-b4c3-b694c7bef086\",\n    \"queryString\": \"mutation MyNewTask($desc: String!) {\\n  createTask(description: $desc, owner: \\\"ccc\\\", taskStatus: \\\"cc\\\", title: \\\"ccc\\\") {\\n    id\\n  }\\n}\\n\",\n    \"operationName\": \"MyNewTask\",\n    \"variables\": {\n      \"desc\": \"Foo\"\n    }\n  }\n}\n</code></pre>"},{"location":"appsync-authorizer/#response","title":"Response","text":"<code>isAuthorized</code> (Required, Boolean) A boolean value indicating if the value in authorizationToken is authorized to make calls to the GraphQL API. If this value is true, execution of the GraphQL API continues. If this value is false, an <code>UnauthorizedException</code> is raised <code>deniedFields</code> (Optional, Array) A list of which are forcibly changed to null, even if a value was returned from a resolver. Each item is either a fully qualified field ARN in the form of <code>arn:aws:appsync:us-east-1:111122223333:apis/GraphQLApiId/types/TypeName/fields/FieldName</code> or a short form of <code>TypeName.FieldName</code>. The full ARN form should be used when two APIs share a Lambda function authorizer and there might be ambiguity between common types and fields between the two APIs. <code>resolverContext</code> (Optional, Object) A JSON object visible as <code>$ctx.identity.resolverContext</code> in resolver templates. <code>ttlOverride</code> (Optional, Number) The number of seconds that the response should be cached for. If no value is returned, the value from the API (if configured) or the default of  300 seconds (five minutes) is used. If this is 0, the response is not cached. Example response<pre><code>{\n    \"isAuthorized\": true,\n    \"resolverContext\": {\n        \"name\": \"Foo Man\",\n        \"balance\": 100\n    },\n    \"deniedFields\": [\"Mutation.createEvent\"],\n    \"ttlOverride\": 15\n}\n</code></pre>"},{"location":"appsync-authorizer/#resources","title":"Resources","text":"<p>AppSync typed handler and response builder by language</p> <ul> <li>Python - AppSyncAuthorizerEvent</li> </ul>"},{"location":"appsync-authorizer/#code-example","title":"Code Example","text":"app.py<pre><code>from typing import Dict\n\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools.logging.logger import Logger\nfrom aws_lambda_powertools.utilities.data_classes.appsync_authorizer_event import (\n    AppSyncAuthorizerEvent,\n    AppSyncAuthorizerResponse,\n)\nfrom aws_lambda_powertools.utilities.data_classes.event_source import event_source\n\nlogger = Logger()\n\n\ndef get_user_by_token(token: str):\n    \"\"\"Look a user by token\"\"\"\n    ...\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.APPSYNC_AUTHORIZER)\n@event_source(data_class=AppSyncAuthorizerEvent)\ndef lambda_handler(event: AppSyncAuthorizerEvent, context) -&gt; Dict:\n    user = get_user_by_token(event.authorization_token)\n\n    if not user:\n        # No user found, return not authorized\n        return AppSyncAuthorizerResponse().asdict()\n\n    return AppSyncAuthorizerResponse(\n        authorize=True,\n        resolver_context={\"id\": user.id},\n        # Only allow admins to delete events\n        deny_fields=None if user.is_admin else [\"Mutation.deleteEvent\"],\n    ).asdict()\n</code></pre>"},{"location":"appsync-authorizer/#documentation","title":"Documentation","text":"<ul> <li>AppSync Authorizer - AWS_LAMBDA Authorization</li> <li>Amplify - AWS Lambda Authorization</li> <li>Introducing Lambda authorization for AWS AppSync GraphQL APIs</li> </ul>"},{"location":"appsync-resolver/","title":"AppSync Resolver","text":"Direct Lambda Resolvers With Direct Lambda Resolvers, you can circumvent the use of VTL mapping templates when using AWS Lambda data sources. Amplify GraphQL direct <code>@function</code> The Amplify <code>@function</code> directive allows you to quickly &amp; easily configure a AWS Lambda resolvers with your GraphQL API.  <p>Event driven, invoked synchronously.</p> <p>Note</p> <p>AppSync Resolver Events can come in various shapes this data class supports both Amplify GraphQL directive <code>@function</code> and Direct Lambda Resolver</p>"},{"location":"appsync-resolver/#limits","title":"Limits","text":"<ul> <li>Request execution timeout of 30 seconds</li> <li>Payload size limit of 1MB</li> </ul>"},{"location":"appsync-resolver/#request","title":"Request","text":""},{"location":"appsync-resolver/#amplify-graphql-directive","title":"Amplify GraphQL directive","text":"<p>List of fields</p> <code>typeName</code> (String) The name of the parent object type of the field being resolver. <code>fieldName</code> (String) The name of the field being resolved. <code>arguments</code> (Map) A map containing the arguments passed to the field being resolved. <code>identity</code> (Object) A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. <code>source</code> (Map) A map that contains the resolution of the parent field. When resolving a nested field in a query, the source contains parent value at runtime.  For example when resolving <code>Post.comments</code>, the source will be the <code>Post</code> object. <code>request</code> (String) The AppSync request object. Contains header information. <code>next</code> (String) When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases. Amplify GraphQL directive<pre><code>{\n  \"typeName\": \"Merchant\",\n  \"fieldName\": \"locations\",\n  \"arguments\": {\n    \"page\": 2,\n    \"size\": 1,\n    \"name\": \"value\"\n  },\n  \"identity\": {\n    \"claims\": {\n      \"sub\": \"07920713-4526-4642-9c88-2953512de441\",\n      \"iss\": \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\",\n      \"aud\": \"58rc9bf5kkti90ctmvioppukm9\",\n      \"event_id\": \"7f4c9383-abf6-48b7-b821-91643968b755\",\n      \"token_use\": \"id\",\n      \"auth_time\": 1615366261,\n      \"name\": \"Michael Brewer\",\n      \"exp\": 1615369861,\n      \"iat\": 1615366261\n    },\n    \"defaultAuthStrategy\": \"ALLOW\",\n    \"groups\": null,\n    \"issuer\": \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\",\n    \"sourceIp\": [\n      \"11.215.2.22\"\n    ],\n    \"sub\": \"07920713-4526-4642-9c88-2953512de441\",\n    \"username\": \"mike\"\n  },\n  \"source\": {\n    \"name\": \"Value\",\n    \"nested\": {\n      \"name\": \"value\",\n      \"list\": []\n    }\n  },\n  \"request\": {\n    \"headers\": {\n      \"x-forwarded-for\": \"11.215.2.22, 64.44.173.11\",\n      \"cloudfront-viewer-country\": \"US\",\n      \"cloudfront-is-tablet-viewer\": \"false\",\n      \"via\": \"2.0 SOMETHING.cloudfront.net (CloudFront)\",\n      \"cloudfront-forwarded-proto\": \"https\",\n      \"origin\": \"https://console.aws.amazon.com\",\n      \"content-length\": \"156\",\n      \"accept-language\": \"en-US,en;q=0.9\",\n      \"host\": \"SOMETHING.appsync-api.us-east-1.amazonaws.com\",\n      \"x-forwarded-proto\": \"https\",\n      \"sec-gpc\": \"1\",\n      \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) etc.\",\n      \"accept\": \"*/*\",\n      \"cloudfront-is-mobile-viewer\": \"false\",\n      \"cloudfront-is-smarttv-viewer\": \"false\",\n      \"accept-encoding\": \"gzip, deflate, br\",\n      \"referer\": \"https://console.aws.amazon.com/\",\n      \"content-type\": \"application/json\",\n      \"sec-fetch-mode\": \"cors\",\n      \"x-amz-cf-id\": \"Fo5VIuvP6V6anIEt62WzFDCK45mzM4yEdpt5BYxOl9OFqafd-WR0cA==\",\n      \"x-amzn-trace-id\": \"Root=1-60488877-0b0c4e6727ab2a1c545babd0\",\n      \"authorization\": \"AUTH-HEADER\",\n      \"sec-fetch-dest\": \"empty\",\n      \"x-amz-user-agent\": \"AWS-Console-AppSync/\",\n      \"cloudfront-is-desktop-viewer\": \"true\",\n      \"sec-fetch-site\": \"cross-site\",\n      \"x-forwarded-port\": \"443\"\n    }\n  },\n  \"prev\": {\n    \"result\": {}\n  }\n}\n</code></pre>"},{"location":"appsync-resolver/#direct-lambda-resolver","title":"Direct Lambda Resolver","text":"<p>List of fields</p> <code>info.parentTypeName</code> (String) The name of the parent object type of the field being resolver. <code>info.fieldName</code> (String) The name of the field being resolved. <code>arguments</code> (Map) A map containing the arguments passed to the field being resolved. <code>identity</code> (Object) A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. <code>source</code> (Map) A map that contains the resolution of the parent field. When resolving a nested field in a query, the source contains parent value at runtime.  For example when resolving <code>Post.comments</code>, the source will be the <code>Post</code> object. <code>request</code> (String) The AppSync request object. Contains header information. <code>next</code> (String) When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases. AppSync direct resolver<pre><code>{\n  \"arguments\": {\n    \"id\": \"my identifier\"\n  },\n  \"identity\": {\n    \"claims\": {\n      \"sub\": \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\",\n      \"email_verified\": true,\n      \"iss\": \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\",\n      \"phone_number_verified\": false,\n      \"cognito:username\": \"jdoe\",\n      \"aud\": \"7471s60os7h0uu77i1tk27sp9n\",\n      \"event_id\": \"bc334ed8-a938-4474-b644-9547e304e606\",\n      \"token_use\": \"id\",\n      \"auth_time\": 1599154213,\n      \"phone_number\": \"+19999999999\",\n      \"exp\": 1599157813,\n      \"iat\": 1599154213,\n      \"email\": \"jdoe@email.com\"\n    },\n    \"defaultAuthStrategy\": \"ALLOW\",\n    \"groups\": null,\n    \"issuer\": \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\",\n    \"sourceIp\": [\n      \"1.1.1.1\"\n    ],\n    \"sub\": \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\",\n    \"username\": \"jdoe\"\n  },\n  \"source\": null,\n  \"request\": {\n    \"headers\": {\n      \"x-forwarded-for\": \"1.1.1.1, 2.2.2.2\",\n      \"cloudfront-viewer-country\": \"US\",\n      \"cloudfront-is-tablet-viewer\": \"false\",\n      \"via\": \"2.0 xxxxxxxxxxxxxxxx.cloudfront.net (CloudFront)\",\n      \"cloudfront-forwarded-proto\": \"https\",\n      \"origin\": \"https://us-west-1.console.aws.amazon.com\",\n      \"content-length\": \"217\",\n      \"accept-language\": \"en-US,en;q=0.9\",\n      \"host\": \"xxxxxxxxxxxxxxxx.appsync-api.us-west-1.amazonaws.com\",\n      \"x-forwarded-proto\": \"https\",\n      \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36\",\n      \"accept\": \"*/*\",\n      \"cloudfront-is-mobile-viewer\": \"false\",\n      \"cloudfront-is-smarttv-viewer\": \"false\",\n      \"accept-encoding\": \"gzip, deflate, br\",\n      \"referer\": \"https://us-west-1.console.aws.amazon.com/appsync/home?region=us-west-1\",\n      \"content-type\": \"application/json\",\n      \"sec-fetch-mode\": \"cors\",\n      \"x-amz-cf-id\": \"3aykhqlUwQeANU-HGY7E_guV5EkNeMMtwyOgiA==\",\n      \"x-amzn-trace-id\": \"Root=1-5f512f51-fac632066c5e848ae714\",\n      \"authorization\": \"eyJraWQiOiJScWFCSlJqYVJlM0hrSnBTUFpIcVRXazNOW...\",\n      \"sec-fetch-dest\": \"empty\",\n      \"x-amz-user-agent\": \"AWS-Console-AppSync/\",\n      \"cloudfront-is-desktop-viewer\": \"true\",\n      \"sec-fetch-site\": \"cross-site\",\n      \"x-forwarded-port\": \"443\"\n    }\n  },\n  \"prev\": null,\n  \"info\": {\n    \"selectionSetList\": [\n      \"id\",\n      \"field1\",\n      \"field2\"\n    ],\n    \"selectionSetGraphQL\": \"{\\n  id\\n  field1\\n  field2\\n}\",\n    \"parentTypeName\": \"Mutation\",\n    \"fieldName\": \"createSomething\",\n    \"variables\": {}\n  },\n  \"stash\": {}\n}\n</code></pre>"},{"location":"appsync-resolver/#response","title":"Response","text":"<p>Response is based on the expected GraphQL response.</p>"},{"location":"appsync-resolver/#resources","title":"Resources","text":"<p>Typed handlers by language</p> <ul> <li>Python - AppSyncResolverEvent</li> </ul> <p>Lambda handlers by language</p> <ul> <li>Python - AppSyncResolver - pip <code>aws-lambda-powertools</code></li> </ul>"},{"location":"appsync-resolver/#code-examples","title":"Code Examples","text":"AppSync resolver using AWS Lambda Powertools<pre><code>from aws_lambda_powertools import Logger, Tracer\n\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools.event_handler import AppSyncResolver\nfrom aws_lambda_powertools.utilities.data_classes.appsync import scalar_types_utils\n\ntracer = Tracer(service=\"sample_resolver\")\nlogger = Logger(service=\"sample_resolver\")\napp = AppSyncResolver()\n\n# Note that `creation_time` isn't available in the schema\n# This utility also takes into account what info you make available at API level vs what's stored\nTODOS = [\n    {\n        \"id\": scalar_types_utils.make_id(), # type ID or String\n        \"title\": \"First task\",\n        \"description\": \"String\",\n        \"done\": False,\n        \"creation_time\": scalar_types_utils.aws_datetime(),  # type AWSDateTime\n    },\n    {\n        \"id\": scalar_types_utils.make_id(),\n        \"title\": \"Second task\",\n        \"description\": \"String\",\n        \"done\": True,\n        \"creation_time\": scalar_types_utils.aws_datetime(),\n    },\n]\n\n\n@app.resolver(type_name=\"Query\", field_name=\"getTodo\")\ndef get_todo(id: str = \"\"):\n    logger.info(f\"Fetching Todo {id}\")\n    todo = [todo for todo in TODOS if todo[\"id\"] == id]\n\n    return todo\n\n\n@app.resolver(type_name=\"Query\", field_name=\"listTodos\")\ndef list_todos():\n    return TODOS\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.APPSYNC_RESOLVER)\n@tracer.capture_lambda_handler\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n</code></pre>"},{"location":"appsync-resolver/#documentation","title":"Documentation","text":"<ul> <li>AppSync - Resolver mapping template context reference</li> <li>AppSync - Tutorial: Lambda resolvers</li> <li>Amplify - Configure Lambda resolvers</li> <li>Blog - Introducing Direct Lambda Resolvers: AWS AppSync GraphQL APIs without VTL</li> <li>Serverlessland - AppSync to Lambda</li> </ul>"},{"location":"build-project/","title":"Build Project","text":"<p>A simple tool to generate a starter project based on cookiecutter templates.</p> Warning: Still a work in progress <p>This is still in progress and is not yet ready for production use :).</p>"},{"location":"build-project/#powertools-initializer","title":"Powertools Initializer","text":"<p>AWS Lambda Powertools project generator</p> Project Name : Type : SAM Template AWS CDK (TODO) Runtime : Python 3.9 Java (TODO) Typescript (TODO) Trigger : S3 S3 Object Lambda API GW Rest API AppSync Resolver (TODO) API GW Http API (TODO) AppSync Authorizer (TODO) Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project"},{"location":"build-project/#aws-sam-initializer","title":"AWS SAM Initializer","text":"<p>AWS SAM templates used at aws-sam-cli-app-templates github repo.</p> Project Name : Runtime : .NET Core 3.1 .NET 6 Go 1.x Java 8 (AL2) Java 11 Node 12 Node 14 Node 16 Node 18 Python 3.7 Python 3.8 Python 3.9 Ruby 2.7 Provided Template : Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project"},{"location":"build-project/#aws-lambda-quickstart-todo","title":"AWS Lambda Quickstart TODO","text":"<p>aws-lambda-quickstart is a simple webservice to generate projects from various templates.</p> <ul> <li> Initial prototype webservice</li> <li> Create basic UI and deploy via GitHub pages</li> <li> Powertools template for s3 api (<code>quickstart-s3-sam-python</code>)</li> <li> Powertools template for s3 object lambda api (<code>quickstart-s3-object-lambda-sam-python</code>)</li> <li> Powertools template for rest api (<code>quickstart-rest-api-sam-python</code>)</li> <li> Powertools template for http api (<code>quickstart-http-api-sam-python</code>)</li> <li> Mock a better UI mock using figma</li> <li> BONUS: Powertools template for rest api (<code>quickstart-rest-api-sam-typescript</code>)</li> <li> BONUS: Powertools template for http api (<code>quickstart-http-api-sam-typescript</code>)</li> <li> BONUS: Powertools template for s3 api (<code>quickstart-s3-sam-typescript</code>)</li> <li> BONUS: Powertools CDK templates</li> </ul>"},{"location":"cloudformation/","title":"CloudFormation - Custom Resources","text":"<p>AWS CloudFormation invokes your Lambda function asynchronously with an event that includes a callback URL.</p>"},{"location":"cloudformation/#request","title":"Request","text":"<p>Documentation on the lifecycle on a custom resource</p> <ul> <li>Create request docs - Custom resource provider requests with <code>RequestType</code> set to <code>Create</code> are sent when the template developer creates a stack that contains a custom resource.</li> <li>Delete request docs - Custom resource provider requests with <code>RequestType</code> set to <code>Delete</code> are sent when the template developer deletes a stack that contains a custom resource.</li> <li>Update request docs - Custom resource provider requests with <code>RequestType</code> set to <code>Update</code> are sent when there's any change to the properties of the custom resource within the template. Therefore, custom resource code doesn't have to detect changes because it knows that its properties have changed when Update is being called.</li> </ul>"},{"location":"cloudformation/#request-fields","title":"Request fields","text":"<code>RequestType</code> (String) The request type is set by the AWS CloudFormation stack operation (create-stack, update-stack, or delete-stack) that was initiated by the template developer for the stack that contains the custom resource. Must be one of: <code>Create</code>, <code>Update</code>, or <code>Delete</code>. <code>ResponseURL</code> (String) The response URL identifies a presigned S3 bucket that receives responses from the custom resource provider to AWS CloudFormation. <code>StackId</code> (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource.  Combining the <code>StackId</code> with the <code>RequestId</code> forms a value that you can use to uniquely identify a request on a particular custom resource. <code>RequestId</code> (String) A unique ID for the request. Combining the <code>StackId</code> with the <code>RequestId</code> forms a value that you can use to uniquely identify a request on a particular custom resource. <code>ResourceType</code> (String) The template developer-chosen resource type of the custom resource in the AWS CloudFormation template. Custom resource type names can be up to 60 characters long and can include alphanumeric and the following characters: <code>_@-.</code> <code>LogicalResourceId</code> (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This is provided to facilitate communication between the custom resource provider and the template developer. <code>PhysicalResourceId</code> (String) A required custom resource provider-defined physical ID that is unique for that provider. Required: Always sent with Update and Delete requests; never sent with Create. <code>ResourceProperties</code> (Optional, Object) This field contains the contents of the Properties object sent by the template developer. Its contents are defined by the custom resource provider. <code>OldResourceProperties</code> (Object) Used only for <code>Update</code> requests. Contains the resource properties that were declared previous to the update request."},{"location":"cloudformation/#request-examples","title":"Request examples","text":"Create event<pre><code>{\n  \"RequestType\": \"Create\",\n  \"ServiceToken\": \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\",\n  \"ResponseURL\": \"https://cloudformation-custom-resource-response-useast2.s3-us-east-2.amazonaws.com/arn%3Aaws%3Acloudformation%3Aus-east-2%3A123456789012%3Astack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456%7Cprimerinvoke%7C5d478078-13e9-baf0-464a-7ef285ecc786?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;Expires=1555451971&amp;Signature=28UijZePE5I4dvukKQqM%2F9Rf1o4%3D\",\n  \"StackId\": \"arn:aws:cloudformation:us-east-2:123456789012:stack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456\",\n  \"RequestId\": \"5d478078-13e9-baf0-464a-7ef285ecc786\",\n  \"LogicalResourceId\": \"primerinvoke\",\n  \"ResourceType\": \"AWS::CloudFormation::CustomResource\",\n  \"ResourceProperties\": {\n    \"ServiceToken\": \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\",\n    \"FunctionName\": \"lambda-error-processor-randomerror-ZWUC391MQAJK\"\n  }\n}\n</code></pre> Update event<pre><code>{\n  \"RequestType\": \"Update\",\n  \"ResponseURL\": \"http://pre-signed-S3-url-for-response\",\n  \"StackId\": \"arn:aws:cloudformation:eu-central-1:123456789012:stack/MyStack/guid\",\n  \"RequestId\": \"unique id for this create request\",\n  \"ResourceType\": \"Custom::TestResource\",\n  \"LogicalResourceId\": \"MyTestResource\",\n  \"PhysicalResourceId\": \"MyTestResourceId\",\n  \"ServiceToken\": \"abcd\",\n  \"ResourceProperties\": {\n    \"StackName\": \"MyStack\",\n    \"List\": [\n      \"1\",\n      \"2\",\n      \"3\"\n    ]\n  },\n  \"OldResourceProperties\": {\n    \"StackName\": \"MyStack\",\n    \"List\": [\n      \"1\"\n    ]\n  }\n}\n</code></pre> Delete event<pre><code>{\n  \"RequestType\": \"Delete\",\n  \"RequestId\": \"unique id for this delete request\",\n  \"ResponseURL\": \"pre-signed-url-for-delete-response\",\n  \"ResourceType\": \"Custom::MyCustomResourceType\",\n  \"LogicalResourceId\": \"name of resource in template\",\n  \"StackId\": \"arn:aws:cloudformation:us-east-2:namespace:stack/stack-name/guid\",\n  \"PhysicalResourceId\": \"custom resource provider-defined physical id\",\n  \"ResourceProperties\": {\n    \"key1\": \"string\",\n    \"key2\": [\n      \"list\"\n    ],\n    \"key3\": {\n      \"key4\": \"map\"\n    }\n  }\n}\n</code></pre>"},{"location":"cloudformation/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event cloudformation create-request\n</code></pre>"},{"location":"cloudformation/#response","title":"Response","text":"<p>Responses are submitted via the pre-signed URL in the <code>ResponseURL</code> field of the request via the cfn-response module.</p> <code>Status</code> (String) The status value sent by the custom resource provider in response to an AWS CloudFormation-generated request. Must be either <code>SUCCESS</code> or <code>FAILED</code>. <code>Reason</code> (String) Describes the reason for a failure response. Required: Required if Status is <code>FAILED</code>. It's optional otherwise. <code>PhysicalResourceId</code> (String) This value should be an identifier unique to the custom resource vendor, and can be up to 1 KB in size. The value must be a non-empty string and must be identical for all responses for the same resource. <code>StackId</code> (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. This response value should be  copied verbatim from the request. <code>RequestId</code> (String) A unique ID for the request. This response value should be copied verbatim from the request. <code>LogicalResourceId</code> (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This response value should be copied verbatim from the request. <code>NoEcho</code> (Optional, Boolean) Optional. Indicates whether to mask the output of the custom resource when retrieved by using the <code>Fn::GetAtt</code> function. If set to true, all returned values are masked with asterisks (<code>*****</code>), except for those stored in the Metadata section of the template. AWS CloudFormation does not transform, modify, or redact any information you include in the Metadata section. The default value is <code>false</code>. <code>Data</code> (Optional, Object) Optional. The custom resource provider-defined name-value pairs to send with the response. You can access the values provided here by name in the template with <code>Fn::GetAtt</code>. The following is an example of a custom resource response<pre><code>{\n   \"Status\" : \"SUCCESS\",\n   \"PhysicalResourceId\" : \"Tester1\",\n   \"StackId\" : \"arn:aws:cloudformation:us-west-2:123456789012:stack/stack-name/guid\",\n   \"RequestId\" : \"unique id for this create request\",\n   \"LogicalResourceId\" : \"MySeleniumTester\",\n   \"Data\" : {\n      \"resultsPage\" : \"http://www.myexampledomain/test-results/guid\",\n      \"lastUpdate\" : \"2012-11-14T03:30Z\",\n   }\n}\n</code></pre>"},{"location":"cloudformation/#resources","title":"Resources","text":"<p>Custom Resource handlers</p> <ul> <li>Custom Resource Helper - Python - pip <code>crhelper</code></li> <li>Custom Resources Handler - Java - Maven <code>software.amazon.lambda:powertools-cloudformation</code></li> <li>cfn-response module</li> </ul> <p>Custom resource typing and data classes</p> <ul> <li>Java - CloudFormationCustomResourceEvent</li> <li>Go - - <code>github.com/aws/aws-lambda-go/cfn</code></li> </ul>"},{"location":"cloudformation/#code-examples","title":"Code Examples","text":"app.py<pre><code>from __future__ import print_function\nfrom crhelper import CfnResource\nimport logging\n\nlogger = logging.getLogger(__name__)\n# Initialise the helper, all inputs are optional, this example shows the defaults\nhelper = CfnResource(json_logging=False, log_level='DEBUG', boto_level='CRITICAL', sleep_on_delete=120, ssl_verify=None)\n\ntry:\n    ## Init code goes here\n    pass\nexcept Exception as e:\n    helper.init_failure(e)\n\n\n@helper.create\ndef create(event, context):\n    logger.info(\"Got Create\")\n    # Optionally return an ID that will be used for the resource PhysicalResourceId, \n    # if None is returned an ID will be generated. If a poll_create function is defined \n    # return value is placed into the poll event as event['CrHelperData']['PhysicalResourceId']\n    #\n    # To add response data update the helper.Data dict\n    # If poll is enabled data is placed into poll event as event['CrHelperData']\n    helper.Data.update({\"test\": \"testdata\"})\n\n    # To return an error to cloudformation you raise an exception:\n    if not helper.Data.get(\"test\"):\n        raise ValueError(\"this error will show in the cloudformation events log and console.\")\n\n    return \"MyResourceId\"\n\n\n@helper.update\ndef update(event, context):\n    logger.info(\"Got Update\")\n    # If the update resulted in a new resource being created, return an id for the new resource. \n    # CloudFormation will send a delete event with the old id when stack update completes\n\n\n@helper.delete\ndef delete(event, context):\n    logger.info(\"Got Delete\")\n    # Delete never returns anything. Should not fail if the underlying resources are already deleted.\n    # Desired state.\n\n\n@helper.poll_create\ndef poll_create(event, context):\n    logger.info(\"Got create poll\")\n    # Return a resource id or True to indicate that creation is complete. if True is returned an id \n    # will be generated\n    return True\n\n\ndef handler(event, context):\n    helper(event, context)\n</code></pre>"},{"location":"cloudformation/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with AWS CloudFormation</li> <li>AWS CloudFormation custom resource creation with Python, AWS Lambda, and crhelper</li> <li>Custom resource provider request fields</li> <li>Custom resource response objects</li> </ul>"},{"location":"cloudfront-function/","title":"CloudFront Function","text":"<p>With CloudFront Functions, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations. The CloudFront Functions runtime environment offers submillisecond startup times, scales immediately to handle millions of requests per second, and is highly secure. CloudFront Functions is a native feature of CloudFront, which means you can build, test, and deploy your code entirely within CloudFront.</p> <p>Note</p> <p>CloudFront Functions are at all like AWS Lambda functions, as they are JavaScript only and have no Lambda context.</p> <p> </p>"},{"location":"cloudfront-function/#limits","title":"Limits","text":"<ul> <li>JavaScript (ECMAScript 5.1 compliant)</li> <li>Event sources - Viewer request pr viewer response</li> <li>10,000,000 requests per second or more</li> <li>Submillisecond duration</li> <li>2 MB maximum memory</li> <li>10 KB maximum size of a function</li> <li>No network access</li> <li>No file system access</li> <li>No access to request body</li> <li>Can access to geolocation and device data</li> <li>Can build and test entirely within CloudFront</li> <li>Function logging and metrics</li> </ul>"},{"location":"cloudfront-function/#request","title":"Request","text":"<code>version</code> - (String, required) The <code>version</code> field contains a string that specifies the version of the CloudFront Functions event object. The current version is <code>1.0</code>. <code>context</code> - (Object, required) The <code>context</code> object contains contextual information about the event. It includes the following fields: <ul> <li><code>distributionDomainName</code> - The CloudFront domain name (for example, <code>d111111abcdef8.cloudfront.net</code>) of the distribution that\u2019s associated with the event.</li> <li><code>distributionId</code> - The ID of the distribution (for example, <code>EDFDVBD6EXAMPLE</code>) that\u2019s associated with the event.</li> <li><code>eventType</code> - The event type, either <code>viewer-request</code> or <code>viewer-response</code>.</li> <li><code>requestId</code> - A string that uniquely identifies a CloudFront request (and its associated response).</li> </ul> <p><code>viewer</code> - (Object, required) The request object contains a representation of a viewer-to-CloudFront HTTP request. In the <code>event</code> object that\u2019s passed to your function, the <code>request</code> object represents the actual request that CloudFront received from the viewer. The <code>request</code> object contains the following fields:</p> <ul> <li><code>method</code> - The HTTP method of the request.</li> <li><code>uri</code> - The URI of the request.</li> <li><code>querystring</code> - An object that represents the query string in the request.</li> <li><code>headers</code> - An object that represents the HTTP headers in the request.</li> <li><code>cookies</code> - An object that represents the cookies in the request (<code>Cookie</code> headers).</li> </ul> Event Structure<pre><code>{\n    \"version\": \"1.0\",\n    \"context\": {\n        &lt;context object&gt;\n    },\n    \"viewer\": {\n        &lt;viewer object&gt;\n    },\n    \"request\": {\n        &lt;request object&gt;\n    },\n    \"response\": {\n        &lt;response object&gt;\n    }\n}\n</code></pre>"},{"location":"cloudfront-function/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>context.requestId</code></p>"},{"location":"cloudfront-function/#generating-sample-events","title":"Generating sample events","text":"<p>TODO</p>"},{"location":"cloudfront-function/#response","title":"Response","text":"<p>The response object contains a representation of a CloudFront-to-viewer HTTP response. In the <code>event</code> object that\u2019s passed to your function, the <code>response</code> object represents CloudFront\u2019s actual response to a viewer request.</p> <p>If your function code returns a <code>response</code> object, it must use this same structure.</p> <p>The <code>response</code> object contains the following fields:</p> <code>statusCode</code> (Integer, required) The HTTP status code of the response. This value is an integer, not a string. <code>statusDescription</code> (String) The HTTP status description of the response. If your function code generates a response, this field is optional. <code>headers</code> (Object) An object that represents the HTTP headers in the response. Cookies are represented separately in the cookies object. <code>cookies</code> (Object) An object that represents the cookies in the response (<code>Set-Cookie</code> headers)."},{"location":"cloudfront-function/#request-response-example","title":"Request Response Example","text":"<p>Note</p> <p>The <code>event</code> object is the input to your function. Your function returns only the <code>request</code> or <code>response</code> object, not the complete event object.</p> The following example shows a complete event object.<pre><code>{\n  \"version\": \"1.0\",\n  \"context\": {\n    \"distributionDomainName\": \"d111111abcdef8.cloudfront.net\",\n    \"distributionId\": \"EDFDVBD6EXAMPLE\",\n    \"eventType\": \"viewer-response\",\n    \"requestId\": \"EXAMPLEntjQpEXAMPLE_SG5Z-EXAMPLEPmPfEXAMPLEu3EqEXAMPLE==\"\n  },\n  \"viewer\": {\n    \"ip\": \"198.51.100.11\"\n  },\n  \"request\": {\n    \"method\": \"GET\",\n    \"uri\": \"/media/index.mpd\",\n    \"querystring\": {\n      \"ID\": {\n        \"value\": \"42\"\n      },\n      \"Exp\": {\n        \"value\": \"1619740800\"\n      },\n      \"TTL\": {\n        \"value\": \"1440\"\n      },\n      \"NoValue\": {\n        \"value\": \"\"\n      },\n      \"querymv\": {\n        \"value\": \"val1\",\n        \"multiValue\": [\n          {\n            \"value\": \"val1\"\n          },\n          {\n            \"value\": \"val2,val3\"\n          }\n        ]\n      }\n    },\n    \"headers\": {\n      \"host\": {\n        \"value\": \"video.example.com\"\n      },\n      \"user-agent\": {\n        \"value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0\"\n      },\n      \"accept\": {\n        \"value\": \"application/json\",\n        \"multiValue\": [\n          {\n            \"value\": \"application/json\"\n          },\n          {\n            \"value\": \"application/xml\"\n          },\n          {\n            \"value\": \"text/html\"\n          }\n        ]\n      },\n      \"accept-language\": {\n        \"value\": \"en-GB,en;q=0.5\"\n      },\n      \"accept-encoding\": {\n        \"value\": \"gzip, deflate, br\"\n      },\n      \"origin\": {\n        \"value\": \"https://website.example.com\"\n      },\n      \"referer\": {\n        \"value\": \"https://website.example.com/videos/12345678?action=play\"\n      },\n      \"cloudfront-viewer-country\": {\n        \"value\": \"GB\"\n      }\n    },\n    \"cookies\": {\n      \"Cookie1\": {\n        \"value\": \"value1\"\n      },\n      \"Cookie2\": {\n        \"value\": \"value2\"\n      },\n      \"cookie_consent\": {\n        \"value\": \"true\"\n      },\n      \"cookiemv\": {\n        \"value\": \"value3\",\n        \"multiValue\": [\n          {\n            \"value\": \"value3\"\n          },\n          {\n            \"value\": \"value4\"\n          }\n        ]\n      }\n    }\n  },\n  \"response\": {\n    \"statusCode\": 200,\n    \"statusDescription\": \"OK\",\n    \"headers\": {\n      \"date\": {\n        \"value\": \"Mon, 04 Apr 2021 18:57:56 GMT\"\n      },\n      \"server\": {\n        \"value\": \"gunicorn/19.9.0\"\n      },\n      \"access-control-allow-origin\": {\n        \"value\": \"*\"\n      },\n      \"access-control-allow-credentials\": {\n        \"value\": \"true\"\n      },\n      \"content-type\": {\n        \"value\": \"application/json\"\n      },\n      \"content-length\": {\n        \"value\": \"701\"\n      }\n    },\n    \"cookies\": {\n      \"ID\": {\n        \"value\": \"id1234\",\n        \"attributes\": \"Expires=Wed, 05 Apr 2021 07:28:00 GMT\"\n      },\n      \"Cookie1\": {\n        \"value\": \"val1\",\n        \"attributes\": \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\",\n        \"multiValue\": [\n          {\n            \"value\": \"val1\",\n            \"attributes\": \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\"\n          },\n          {\n            \"value\": \"val2\",\n            \"attributes\": \"Path=/cat; Domain=example.com; Expires=Wed, 10 Jan 2021 07:28:00 GMT\"\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"cloudfront-function/#resources","title":"Resources","text":"<p>More code examples</p> <ul> <li>Example code for CloudFront Functions</li> <li>Github - Amazon CloudFront Functions</li> </ul> TIP: Rather use Amazon CloudFront response headers policies <p>You no longer need to configure your origins or use custom Lambda@Edge or CloudFront functions to insert these headers. </p> <p>See Amazon CloudFront now supports configurable CORS, security, and custom HTTP response headers</p>"},{"location":"cloudfront-function/#code-examples","title":"Code Examples","text":"<p>Add security headers to the response</p> Add security headers to the response<pre><code>function handler(event) {\n    var response = event.response;\n    var headers = response.headers;\n\n    // Set HTTP security headers\n    // Since JavaScript doesn't allow for hyphens in variable names, we use the dict[\"key\"] notation \n    headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; \n    headers['content-security-policy'] = { value: \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\"}; \n    headers['x-content-type-options'] = { value: 'nosniff'}; \n    headers['x-frame-options'] = {value: 'DENY'}; \n    headers['x-xss-protection'] = {value: '1; mode=block'}; \n\n    // Return the response to viewers \n    return response;\n}\n</code></pre>"},{"location":"cloudfront-function/#documentation","title":"Documentation","text":"<ul> <li>Blog - Introducing CloudFront Functions \u2013 Run Your Code at the Edge with Low Latency at Any Scale</li> <li>Docs - CloudFront Functions event structure</li> <li>Blog - Migrating from Lambda@Edge to CloudFront Functions</li> </ul>"},{"location":"cloudfront-lambda-edge/","title":"CloudFront Lambda@Edge","text":"<p>CloudFront invokes Lambda synchrously. Can be Node.js or Python.</p> <p>You can use Lambda functions to change CloudFront requests and responses at the following points:</p> <ul> <li>After CloudFront receives a request from a viewer (<code>Viewer Request</code>)</li> <li>Before CloudFront forwards the request to the origin (<code>Origin Request</code>)</li> <li>After CloudFront receives the response from the origin (<code>Origin Response</code>)</li> <li>Before CloudFront forwards the response to the viewer (<code>Viewer Response</code>)</li> </ul> <p> </p>"},{"location":"cloudfront-lambda-edge/#limits","title":"Limits","text":"<ul> <li>Up to 5 seconds timeout (\"Viewer request\" and \"Viewer response\").</li> <li>1 MB code size (\"Viewer request\" and \"Viewer response\").</li> <li>Up to 30 seconds timeout (\"Origin request\" and \"Origin response\").</li> <li>50 MB code size (\"Origin request\" and \"Origin response\")</li> <li>Node.js and Python runtimes only</li> <li>Up to 10,000 requests per second per Region</li> <li>128 \u2013 3,008 MB memory</li> </ul> TIP: When possible use Cloudfront functions <p>For \"Viewer Request\" and \"Viewer Response\" CloudFront triggers, using Cloudfront function gives both better performance and lower cost.</p> <p>See Cloudfront Function limits for the full list of limits</p>"},{"location":"cloudfront-lambda-edge/#request","title":"Request","text":""},{"location":"cloudfront-lambda-edge/#generating-sample-event","title":"Generating sample event","text":"<p>Via AWS SAM CLI to can generate sample events.</p> <pre><code># Get list of event templates for cloudfront\nsam local generate-event cloudfront\n# Amazon CloudFront Modify QueryString Event\nsam local generate-event cloudfront modify-querystring --uri /foo/bar\n</code></pre>"},{"location":"cloudfront-lambda-edge/#viewer-request-example","title":"Viewer request Example","text":"The following example shows a viewer request event object<pre><code>{\n    \"Records\": [\n        {\n            \"cf\": {\n                \"config\": {\n                    \"distributionDomainName\": \"d111111abcdef8.cloudfront.net\",\n                    \"distributionId\": \"EDFDVBD6EXAMPLE\",\n                    \"eventType\": \"viewer-request\",\n                    \"requestId\": \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\"\n                },\n                \"request\": {\n                    \"clientIp\": \"203.0.113.178\",\n                    \"headers\": {\n                        \"host\": [\n                            {\n                                \"key\": \"Host\",\n                                \"value\": \"d111111abcdef8.cloudfront.net\"\n                            }\n                        ],\n                        \"user-agent\": [\n                            {\n                                \"key\": \"User-Agent\",\n                                \"value\": \"curl/7.66.0\"\n                            }\n                        ],\n                        \"accept\": [\n                            {\n                                \"key\": \"accept\",\n                                \"value\": \"*/*\"\n                            }\n                        ]\n                    },\n                    \"method\": \"GET\",\n                    \"querystring\": \"\",\n                    \"uri\": \"/\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"cloudfront-lambda-edge/#example-origin-request","title":"Example origin request","text":"The following example shows an origin request event object<pre><code>{\n    \"Records\": [\n        {\n            \"cf\": {\n                \"config\": {\n                    \"distributionDomainName\": \"d111111abcdef8.cloudfront.net\",\n                    \"distributionId\": \"EDFDVBD6EXAMPLE\",\n                    \"eventType\": \"origin-request\",\n                    \"requestId\": \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\"\n                },\n                \"request\": {\n                    \"clientIp\": \"203.0.113.178\",\n                    \"headers\": {\n                        \"x-forwarded-for\": [\n                            {\n                                \"key\": \"X-Forwarded-For\",\n                                \"value\": \"203.0.113.178\"\n                            }\n                        ],\n                        \"user-agent\": [\n                            {\n                                \"key\": \"User-Agent\",\n                                \"value\": \"Amazon CloudFront\"\n                            }\n                        ],\n                        \"via\": [\n                            {\n                                \"key\": \"Via\",\n                                \"value\": \"2.0 2afae0d44e2540f472c0635ab62c232b.cloudfront.net (CloudFront)\"\n                            }\n                        ],\n                        \"host\": [\n                            {\n                                \"key\": \"Host\",\n                                \"value\": \"example.org\"\n                            }\n                        ],\n                        \"cache-control\": [\n                            {\n                                \"key\": \"Cache-Control\",\n                                \"value\": \"no-cache, cf-no-cache\"\n                            }\n                        ]\n                    },\n                    \"method\": \"GET\",\n                    \"origin\": {\n                        \"custom\": {\n                            \"customHeaders\": {},\n                            \"domainName\": \"example.org\",\n                            \"keepaliveTimeout\": 5,\n                            \"path\": \"\",\n                            \"port\": 443,\n                            \"protocol\": \"https\",\n                            \"readTimeout\": 30,\n                            \"sslProtocols\": [\n                                \"TLSv1\",\n                                \"TLSv1.1\",\n                                \"TLSv1.2\"\n                            ]\n                        }\n                    },\n                    \"querystring\": \"\",\n                    \"uri\": \"/\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"cloudfront-lambda-edge/#response","title":"Response","text":""},{"location":"cloudfront-lambda-edge/#example-viewer-response","title":"Example viewer response","text":"The following example shows a viewer response event object<pre><code>{\n  \"Records\": [\n    {\n      \"cf\": {\n        \"config\": {\n          \"distributionDomainName\": \"d111111abcdef8.cloudfront.net\",\n          \"distributionId\": \"EDFDVBD6EXAMPLE\",\n          \"eventType\": \"viewer-response\",\n          \"requestId\": \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\"\n        },\n        \"request\": {\n          \"clientIp\": \"203.0.113.178\",\n          \"headers\": {\n            \"host\": [\n              {\n                \"key\": \"Host\",\n                \"value\": \"d111111abcdef8.cloudfront.net\"\n              }\n            ],\n            \"user-agent\": [\n              {\n                \"key\": \"User-Agent\",\n                \"value\": \"curl/7.66.0\"\n              }\n            ],\n            \"accept\": [\n              {\n                \"key\": \"accept\",\n                \"value\": \"*/*\"\n              }\n            ]\n          },\n          \"method\": \"GET\",\n          \"querystring\": \"\",\n          \"uri\": \"/\"\n        },\n        \"response\": {\n          \"headers\": {\n            \"access-control-allow-credentials\": [\n              {\n                \"key\": \"Access-Control-Allow-Credentials\",\n                \"value\": \"true\"\n              }\n            ],\n            \"access-control-allow-origin\": [\n              {\n                \"key\": \"Access-Control-Allow-Origin\",\n                \"value\": \"*\"\n              }\n            ],\n            \"date\": [\n              {\n                \"key\": \"Date\",\n                \"value\": \"Mon, 13 Jan 2020 20:14:56 GMT\"\n              }\n            ],\n            \"referrer-policy\": [\n              {\n                \"key\": \"Referrer-Policy\",\n                \"value\": \"no-referrer-when-downgrade\"\n              }\n            ],\n            \"server\": [\n              {\n                \"key\": \"Server\",\n                \"value\": \"ExampleCustomOriginServer\"\n              }\n            ],\n            \"x-content-type-options\": [\n              {\n                \"key\": \"X-Content-Type-Options\",\n                \"value\": \"nosniff\"\n              }\n            ],\n            \"x-frame-options\": [\n              {\n                \"key\": \"X-Frame-Options\",\n                \"value\": \"DENY\"\n              }\n            ],\n            \"x-xss-protection\": [\n              {\n                \"key\": \"X-XSS-Protection\",\n                \"value\": \"1; mode=block\"\n              }\n            ],\n            \"age\": [\n              {\n                \"key\": \"Age\",\n                \"value\": \"2402\"\n              }\n            ],\n            \"content-type\": [\n              {\n                \"key\": \"Content-Type\",\n                \"value\": \"text/html; charset=utf-8\"\n              }\n            ],\n            \"content-length\": [\n              {\n                \"key\": \"Content-Length\",\n                \"value\": \"9593\"\n              }\n            ]\n          },\n          \"status\": \"200\",\n          \"statusDescription\": \"OK\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"cloudfront-lambda-edge/#example-origin-response","title":"Example origin response","text":"The following example shows an origin response event object<pre><code>{\n  \"Records\": [\n    {\n      \"cf\": {\n        \"config\": {\n          \"distributionDomainName\": \"d111111abcdef8.cloudfront.net\",\n          \"distributionId\": \"EDFDVBD6EXAMPLE\",\n          \"eventType\": \"origin-response\",\n          \"requestId\": \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\"\n        },\n        \"request\": {\n          \"clientIp\": \"203.0.113.178\",\n          \"headers\": {\n            \"x-forwarded-for\": [\n              {\n                \"key\": \"X-Forwarded-For\",\n                \"value\": \"203.0.113.178\"\n              }\n            ],\n            \"user-agent\": [\n              {\n                \"key\": \"User-Agent\",\n                \"value\": \"Amazon CloudFront\"\n              }\n            ],\n            \"via\": [\n              {\n                \"key\": \"Via\",\n                \"value\": \"2.0 8f22423015641505b8c857a37450d6c0.cloudfront.net (CloudFront)\"\n              }\n            ],\n            \"host\": [\n              {\n                \"key\": \"Host\",\n                \"value\": \"example.org\"\n              }\n            ],\n            \"cache-control\": [\n              {\n                \"key\": \"Cache-Control\",\n                \"value\": \"no-cache, cf-no-cache\"\n              }\n            ]\n          },\n          \"method\": \"GET\",\n          \"origin\": {\n            \"custom\": {\n              \"customHeaders\": {},\n              \"domainName\": \"example.org\",\n              \"keepaliveTimeout\": 5,\n              \"path\": \"\",\n              \"port\": 443,\n              \"protocol\": \"https\",\n              \"readTimeout\": 30,\n              \"sslProtocols\": [\n                \"TLSv1\",\n                \"TLSv1.1\",\n                \"TLSv1.2\"\n              ]\n            }\n          },\n          \"querystring\": \"\",\n          \"uri\": \"/\"\n        },\n        \"response\": {\n          \"headers\": {\n            \"access-control-allow-credentials\": [\n              {\n                \"key\": \"Access-Control-Allow-Credentials\",\n                \"value\": \"true\"\n              }\n            ],\n            \"access-control-allow-origin\": [\n              {\n                \"key\": \"Access-Control-Allow-Origin\",\n                \"value\": \"*\"\n              }\n            ],\n            \"date\": [\n              {\n                \"key\": \"Date\",\n                \"value\": \"Mon, 13 Jan 2020 20:12:38 GMT\"\n              }\n            ],\n            \"referrer-policy\": [\n              {\n                \"key\": \"Referrer-Policy\",\n                \"value\": \"no-referrer-when-downgrade\"\n              }\n            ],\n            \"server\": [\n              {\n                \"key\": \"Server\",\n                \"value\": \"ExampleCustomOriginServer\"\n              }\n            ],\n            \"x-content-type-options\": [\n              {\n                \"key\": \"X-Content-Type-Options\",\n                \"value\": \"nosniff\"\n              }\n            ],\n            \"x-frame-options\": [\n              {\n                \"key\": \"X-Frame-Options\",\n                \"value\": \"DENY\"\n              }\n            ],\n            \"x-xss-protection\": [\n              {\n                \"key\": \"X-XSS-Protection\",\n                \"value\": \"1; mode=block\"\n              }\n            ],\n            \"content-type\": [\n              {\n                \"key\": \"Content-Type\",\n                \"value\": \"text/html; charset=utf-8\"\n              }\n            ],\n            \"content-length\": [\n              {\n                \"key\": \"Content-Length\",\n                \"value\": \"9593\"\n              }\n            ]\n          },\n          \"status\": \"200\",\n          \"statusDescription\": \"OK\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"cloudfront-lambda-edge/#resources","title":"Resources","text":"<ul> <li>Typescript - CloudFrontRequestEvent - NPM <code>@types/aws-lambda</code></li> </ul> <p>Examples</p> <ul> <li>Lambda@Edge example functions</li> </ul>"},{"location":"cloudfront-lambda-edge/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with CloudFront Lambda@Edge</li> <li>Lambda@Edge event structure</li> </ul>"},{"location":"cloudwatch-logs/","title":"CloudWatch Log","text":"<p>CloudWatch Logs invokes your function asynchronously with an event that contains log data.</p>"},{"location":"cloudwatch-logs/#request","title":"Request","text":""},{"location":"cloudwatch-logs/#cloudwatch-log-structure","title":"Cloudwatch log structure","text":"<code>data</code> (String) The value of the <code>data</code> field is a Base64 encoded ZIP archive. CloudWatch Logs message event example<pre><code>{\n    \"awslogs\": {\n        \"data\": \"H4sIAAAAAAAAAHWPwQqCQBCGX0Xm7EFtK+smZBEUgXoLCdMhFtKV3akI8d0bLYmibvPPN3wz00CJxmQnTO41whwWQRIctmEcB6sQbFC3CjW3XW8kxpOpP+OC22d1Wml1qZkQGtoMsScxaczKN3plG8zlaHIta5KqWsozoTYw3/djzwhpLwivWFGHGpAFe7DL68JlBUk+l7KSN7tCOEJ4M3/qOI49vMHj+zCKdlFqLaU2ZHV2a4Ct/an0/ivdX8oYc1UVX860fQDQiMdxRQEAAA==\"\n    }\n}\n</code></pre> <p>CloudWatch Logs message data (decoded) example</p> CloudWatch Logs message data (decoded) example<pre><code>{\n    \"messageType\": \"DATA_MESSAGE\",\n    \"owner\": \"123456789012\",\n    \"logGroup\": \"/aws/lambda/echo-nodejs\",\n    \"logStream\": \"2019/03/13/[$LATEST]94fa867e5374431291a7fc14e2f56ae7\",\n    \"subscriptionFilters\": [\n        \"LambdaStream_cloudwatchlogs-node\"\n    ],\n    \"logEvents\": [\n        {\n            \"id\": \"34622316099697884706540976068822859012661220141643892546\",\n            \"timestamp\": 1552518348220,\n            \"message\": \"REPORT RequestId: 6234bffe-149a-b642-81ff-2e8e376d8aff\\tDuration: 46.84 ms\\tBilled Duration: 47 ms \\tMemory Size: 192 MB\\tMax Memory Used: 72 MB\\t\\n\"\n        }\n    ]\n}\n</code></pre>"},{"location":"cloudwatch-logs/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event cloudwatch logs\n</code></pre>"},{"location":"cloudwatch-logs/#response","title":"Response","text":"<p>N/A</p>"},{"location":"cloudwatch-logs/#resources","title":"Resources","text":"<ul> <li>Python - CloudWatchLogsEvent - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - CloudWatchLogsEvent - NPM <code>@types/aws-lambda</code></li> <li>DotNet - CloudWatchLogsEvent - Nuget <code>Amazon.Lambda.CloudWatchLogsEvents</code></li> <li>Java - CloudWatchLogsEvent - Maven <code>aws-lambda-java-events</code></li> <li>Rust - CloudwatchLogsEvent - Cargo <code>aws-lambda-events</code></li> <li>Ruby - LogJob - gem <code>jets</code></li> </ul>"},{"location":"cloudwatch-logs/#code-example","title":"Code Example","text":"<p>Python code example using the data class to decode the log data payload</p> app.py<pre><code>from aws_lambda_powertools.utilities.data_classes import event_source, CloudWatchLogsEvent\nfrom aws_lambda_powertools.utilities.data_classes.cloud_watch_logs_event import CloudWatchLogsDecodedData\n\n@event_source(data_class=CloudWatchLogsEvent)\ndef lambda_handler(event: CloudWatchLogsEvent, context):\n    decompressed_log: CloudWatchLogsDecodedData = event.parse_logs_data\n    log_events = decompressed_log.log_events\n    for log_event in log_events:\n        do_something_with(log_event.timestamp, log_event.message)\n</code></pre> <ul> <li>NodeJS code example</li> </ul>"},{"location":"cloudwatch-logs/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with CloudWatch Logs</li> <li>Error processor sample application for AWS Lambda</li> </ul>"},{"location":"code-commit/","title":"Code Commit","text":"<p>Event-driven, asynchronous invocation. CodeCommit repository events in the repository invoke a Lambda function</p>"},{"location":"code-commit/#request","title":"Request","text":""},{"location":"code-commit/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON patch <code>Records[*].eventId</code></p>"},{"location":"code-commit/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event codecommit repository\n</code></pre>"},{"location":"code-commit/#request-example","title":"Request example","text":"AWS CodeCommit message event example<pre><code>{\n  \"Records\": [\n    {\n      \"awsRegion\": \"us-east-2\",\n      \"codecommit\": {\n        \"references\": [\n          {\n            \"commit\": \"5e493c6f3067653f3d04eca608b4901eb227078\",\n            \"ref\": \"refs/heads/master\"\n          }\n        ]\n      },\n      \"eventId\": \"31ade2c7-f889-47c5-a937-1cf99e2790e9\",\n      \"eventName\": \"ReferenceChanges\",\n      \"eventPartNumber\": 1,\n      \"eventSource\": \"aws:codecommit\",\n      \"eventSourceARN\": \"arn:aws:codecommit:us-east-2:123456789012:lambda-pipeline-repo\",\n      \"eventTime\": \"2019-03-12T20:58:25.400+0000\",\n      \"eventTotalParts\": 1,\n      \"eventTriggerConfigId\": \"0d17d6a4-efeb-46f3-b3ab-a63741badeb8\",\n      \"eventTriggerName\": \"index.handler\",\n      \"eventVersion\": \"1.0\",\n      \"userIdentityARN\": \"arn:aws:iam::123456789012:user/intern\"\n    }\n  ]\n}\n</code></pre>"},{"location":"code-commit/#response","title":"Response","text":"<p>N/A</p>"},{"location":"code-commit/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Java - CodeCommitEvent - Maven <code>aws-lambda-java-events</code></li> <li>Go - CodeCommitEvent</li> <li>Rust - CodeCommitEvent</li> </ul>"},{"location":"code-commit/#code-example","title":"Code Example","text":"example prints repo url message to cloudwatch logs<pre><code>import json\nimport boto3\n\ncodecommit = boto3.client('codecommit')\n\ndef lambda_handler(event, context):\n    #Log the updated references from the event\n    references = { reference['ref'] for reference in event['Records'][0]['codecommit']['references'] }\n    print(\"References: \"  + str(references))\n\n    #Get the repository from the event and show its git clone URL\n    repository = event['Records'][0]['eventSourceARN'].split(':')[5]\n    try:\n        response = codecommit.get_repository(repositoryName=repository)\n        print(\"Clone URL: \" +response['repositoryMetadata']['cloneUrlHttp'])\n        return response['repositoryMetadata']['cloneUrlHttp']\n    except Exception as e:\n        print(e)\n        print('Error getting repository {}. Make sure it exists and that your repository is in the same region as this function.'.format(repository))\n        raise e\n</code></pre> <p>Code examples in Python and NodeJS:</p> <ul> <li>AWS Lambda Functions Code Samples for AWS CodeCommit</li> </ul> Tip: Monitoring commits <p>See CodeCommit Repository State Change for better alternatives to monitoring CodeCommit.</p>"},{"location":"code-commit/#documentation","title":"Documentation","text":"<ul> <li>Create an AWS CodeCommit trigger for an AWS Lambda function</li> <li>Using AWS Lambda with AWS CodeCommit</li> </ul>"},{"location":"code-pipeline-job/","title":"CodePipeline Job","text":"<p>CodePipeline invokes your function asynchronously with an event that contains details about the job.</p>"},{"location":"code-pipeline-job/#request","title":"Request","text":"<code>\"CodePipeline.job\".id</code> (String, required) Job id, can be used as a correlation id <code>\"CodePipeline.job\".accountId</code> (String, required) Originating AWS Account id of the job <code>actionConfiguration</code> (Object, required) AWS Lambda function name and user provided parameters and json stringified <code>inputArtifacts</code> (Object) Input artifact details on S3 <code>outputArtifacts</code> (Object) Output artifacts on S3 <code>artifactCredentials</code> (Object) Credentials needed to access the input or output artifacts"},{"location":"code-pipeline-job/#example-event","title":"Example event","text":"Example CodePipeline event<pre><code>{\n  \"CodePipeline.job\": {\n    \"id\": \"c0d76431-b0e7-xmpl-97e3-e8ee786eb6f6\",\n    \"accountId\": \"123456789012\",\n    \"data\": {\n      \"actionConfiguration\": {\n        \"configuration\": {\n          \"FunctionName\": \"my-function\",\n          \"UserParameters\": \"{\\\"KEY\\\": \\\"VALUE\\\"}\"\n        }\n      },\n      \"inputArtifacts\": [\n        {\n          \"name\": \"my-pipeline-SourceArtifact\",\n          \"revision\": \"e0c7xmpl2308ca3071aa7bab414de234ab52eea\",\n          \"location\": {\n            \"type\": \"S3\",\n            \"s3Location\": {\n              \"bucketName\": \"us-west-2-123456789012-my-pipeline\",\n              \"objectKey\": \"my-pipeline/test-api-2/TdOSFRV\"\n            }\n          }\n        }\n      ],\n      \"outputArtifacts\": [\n        {\n          \"name\": \"invokeOutput\",\n          \"revision\": null,\n          \"location\": {\n            \"type\": \"S3\",\n            \"s3Location\": {\n              \"bucketName\": \"us-west-2-123456789012-my-pipeline\",\n              \"objectKey\": \"my-pipeline/invokeOutp/D0YHsJn\"\n            }\n          }\n        }\n      ],\n      \"artifactCredentials\": {\n        \"accessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n        \"secretAccessKey\": \"6CGtmAa3lzWtV7a...\",\n        \"sessionToken\": \"IQoJb3JpZ2luX2VjEA...\",\n        \"expirationTime\": 1575493418000\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"code-pipeline-job/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>\"CodePipeline.job\".id</code></p>"},{"location":"code-pipeline-job/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event codepipeline job\n</code></pre>"},{"location":"code-pipeline-job/#response","title":"Response","text":"<p>N/A</p>"},{"location":"code-pipeline-job/#resources","title":"Resources","text":"<ul> <li>Go - codepipeline_job.go</li> <li>Typescript - CodePipelineEvent - NPM <code>@types/aws-lambda</code></li> <li>Rust - CodePipelineJobEvent</li> </ul>"},{"location":"code-pipeline-job/#code-examples","title":"Code Examples","text":"<ul> <li>Sample Python function that uses an AWS CloudFormation template</li> <li>AWS Lambda Functions Code Samples for AWS CodePipeline - NodeJS and Python</li> </ul> Update a stack based on a supplied AWS CloudFormation template<pre><code># Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# This file is licensed under the Apache License, Version 2.0 (the \"License\").\n# You may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n# http://aws.amazon.com/apache2.0/\n#\n# This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n# CONDITIONS OF ANY KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations under the License.\n\n\nfrom __future__ import print_function\nfrom boto3.session import Session\n\nimport json\nimport urllib\nimport boto3\nimport zipfile\nimport tempfile\nimport botocore\nimport traceback\n\nprint(\"Loading function\")\n\ncf = boto3.client(\"cloudformation\")\ncode_pipeline = boto3.client(\"codepipeline\")\n\n\ndef find_artifact(artifacts, name):\n    \"\"\"Finds the artifact 'name' among the 'artifacts'\n\n    Args:\n        artifacts: The list of artifacts available to the function\n        name: The artifact we wish to use\n    Returns:\n        The artifact dictionary found\n    Raises:\n        Exception: If no matching artifact is found\n\n    \"\"\"\n    for artifact in artifacts:\n        if artifact[\"name\"] == name:\n            return artifact\n\n    raise Exception('Input artifact named \"{0}\" not found in event'.format(name))\n\n\ndef get_template(s3, artifact, file_in_zip):\n    \"\"\"Gets the template artifact\n\n    Downloads the artifact from the S3 artifact store to a temporary file\n    then extracts the zip and returns the file containing the CloudFormation\n    template.\n\n    Args:\n        artifact: The artifact to download\n        file_in_zip: The path to the file within the zip containing the template\n\n    Returns:\n        The CloudFormation template as a string\n\n    Raises:\n        Exception: Any exception thrown while downloading the artifact or unzipping it\n\n    \"\"\"\n    tmp_file = tempfile.NamedTemporaryFile()\n    bucket = artifact[\"location\"][\"s3Location\"][\"bucketName\"]\n    key = artifact[\"location\"][\"s3Location\"][\"objectKey\"]\n\n    with tempfile.NamedTemporaryFile() as tmp_file:\n        s3.download_file(bucket, key, tmp_file.name)\n        with zipfile.ZipFile(tmp_file.name, \"r\") as zip:\n            return zip.read(file_in_zip)\n\n\ndef update_stack(stack, template):\n    \"\"\"Start a CloudFormation stack update\n\n    Args:\n        stack: The stack to update\n        template: The template to apply\n\n    Returns:\n        True if an update was started, false if there were no changes\n        to the template since the last update.\n\n    Raises:\n        Exception: Any exception besides \"No updates are to be performed.\"\n    \"\"\"\n    try:\n        cf.update_stack(StackName=stack, TemplateBody=template)\n        return True\n\n    except botocore.exceptions.ClientError as e:\n        if e.response[\"Error\"][\"Message\"] == \"No updates are to be performed.\":\n            return False\n        else:\n            raise Exception(\n                'Error updating CloudFormation stack \"{0}\"'.format(stack), e\n            )\n\n\ndef stack_exists(stack):\n    \"\"\"Check if a stack exists or not\n\n    Args:\n        stack: The stack to check\n\n    Returns:\n        True or False depending on whether the stack exists\n\n    Raises:\n        Any exceptions raised .describe_stacks() besides that\n        the stack doesn't exist.\n\n    \"\"\"\n    try:\n        cf.describe_stacks(StackName=stack)\n        return True\n    except botocore.exceptions.ClientError as e:\n        if \"does not exist\" in e.response[\"Error\"][\"Message\"]:\n            return False\n        else:\n            raise e\n\n\ndef create_stack(stack, template):\n    \"\"\"Starts a new CloudFormation stack creation\n\n    Args:\n        stack: The stack to be created\n        template: The template for the stack to be created with\n\n    Throws:\n        Exception: Any exception thrown by .create_stack()\n    \"\"\"\n    cf.create_stack(StackName=stack, TemplateBody=template)\n\n\ndef get_stack_status(stack):\n    \"\"\"Get the status of an existing CloudFormation stack\n\n    Args:\n        stack: The name of the stack to check\n\n    Returns:\n        The CloudFormation status string of the stack such as CREATE_COMPLETE\n\n    Raises:\n        Exception: Any exception thrown by .describe_stacks()\n\n    \"\"\"\n    stack_description = cf.describe_stacks(StackName=stack)\n    return stack_description[\"Stacks\"][0][\"StackStatus\"]\n\n\ndef put_job_success(job, message):\n    \"\"\"Notify CodePipeline of a successful job\n\n    Args:\n        job: The CodePipeline job ID\n        message: A message to be logged relating to the job status\n\n    Raises:\n        Exception: Any exception thrown by .put_job_success_result()\n    \"\"\"\n    print(\"Putting job success\")\n    print(message)\n    code_pipeline.put_job_success_result(jobId=job)\n\n\ndef put_job_failure(job, message):\n    \"\"\"Notify CodePipeline of a failed job\n\n    Args:\n        job: The CodePipeline job ID\n        message: A message to be logged relating to the job status\n\n    Raises:\n        Exception: Any exception thrown by .put_job_failure_result()\n    \"\"\"\n    print(\"Putting job failure\")\n    print(message)\n    code_pipeline.put_job_failure_result(\n        jobId=job, failureDetails={\"message\": message, \"type\": \"JobFailed\"}\n    )\n\n\ndef continue_job_later(job, message):\n    \"\"\"Notify CodePipeline of a continuing job\n\n    This will cause CodePipeline to invoke the function again with the\n    supplied continuation token.\n\n    Args:\n        job: The JobID\n        message: A message to be logged relating to the job status\n        continuation_token: The continuation token\n\n    Raises:\n        Exception: Any exception thrown by .put_job_success_result()\n    \"\"\"\n\n    # Use the continuation token to keep track of any job execution state\n    # This data will be available when a new job is scheduled to continue the current execution\n    continuation_token = json.dumps({\"previous_job_id\": job})\n\n    print(\"Putting job continuation\")\n    print(message)\n    code_pipeline.put_job_success_result(\n        jobId=job, continuationToken=continuation_token\n    )\n\n\ndef start_update_or_create(job_id, stack, template):\n    \"\"\"Starts the stack update or create process\n\n    If the stack exists then update, otherwise create.\n\n    Args:\n        job_id: The ID of the CodePipeline job\n        stack: The stack to create or update\n        template: The template to create/update the stack with\n\n    \"\"\"\n    if stack_exists(stack):\n        status = get_stack_status(stack)\n        if status not in [\"CREATE_COMPLETE\", \"ROLLBACK_COMPLETE\", \"UPDATE_COMPLETE\"]:\n            # If the CloudFormation stack is not in a state where\n            # it can be updated again then fail the job right away.\n            put_job_failure(job_id, \"Stack cannot be updated when status is: \" + status)\n            return\n\n        were_updates = update_stack(stack, template)\n\n        if were_updates:\n            # If there were updates then continue the job so it can monitor\n            # the progress of the update.\n            continue_job_later(job_id, \"Stack update started\")\n\n        else:\n            # If there were no updates then succeed the job immediately\n            put_job_success(job_id, \"There were no stack updates\")\n    else:\n        # If the stack doesn't already exist then create it instead\n        # of updating it.\n        create_stack(stack, template)\n        # Continue the job so the pipeline will wait for the CloudFormation\n        # stack to be created.\n        continue_job_later(job_id, \"Stack create started\")\n\n\ndef check_stack_update_status(job_id, stack):\n    \"\"\"Monitor an already-running CloudFormation update/create\n\n    Succeeds, fails or continues the job depending on the stack status.\n\n    Args:\n        job_id: The CodePipeline job ID\n        stack: The stack to monitor\n    \"\"\"\n    status = get_stack_status(stack)\n    if status in [\"UPDATE_COMPLETE\", \"CREATE_COMPLETE\"]:\n        # If the update/create finished successfully then\n        # succeed the job and don't continue.\n        put_job_success(job_id, \"Stack update complete\")\n\n    elif status in [\n        \"UPDATE_IN_PROGRESS\",\n        \"UPDATE_ROLLBACK_IN_PROGRESS\",\n        \"UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS\",\n        \"CREATE_IN_PROGRESS\",\n        \"ROLLBACK_IN_PROGRESS\",\n    ]:\n        # If the job isn't finished yet then continue it\n        continue_job_later(job_id, \"Stack update still in progress\")\n\n    else:\n        # If the Stack is a state which isn't \"in progress\" or \"complete\"\n        # then the stack update/create has failed so end the job with\n        # a failed result.\n        put_job_failure(job_id, \"Update failed: \" + status)\n\n\ndef get_user_params(job_data):\n    \"\"\"Decodes the JSON user parameters and validates the required properties.\n\n    Args:\n        job_data: The job data structure containing the UserParameters string which should be a valid JSON structure\n\n    Returns:\n        The JSON parameters decoded as a dictionary.\n\n    Raises:\n        Exception: The JSON can't be decoded or a property is missing.\n    \"\"\"\n    try:\n        # Get the user parameters which contain the stack, artifact and file settings\n        user_parameters = job_data[\"actionConfiguration\"][\"configuration\"][\n            \"UserParameters\"\n        ]\n        decoded_parameters = json.loads(user_parameters)\n\n    except Exception as e:\n        # We're expecting the user parameters to be encoded as JSON\n        # so we can pass multiple values. If the JSON can't be decoded\n        # then fail the job with a helpful message.\n        raise Exception(\"UserParameters could not be decoded as JSON\")\n\n    if \"stack\" not in decoded_parameters:\n        # Validate that the stack is provided, otherwise fail the job\n        # with a helpful message.\n        raise Exception(\"Your UserParameters JSON must include the stack name\")\n\n    if \"artifact\" not in decoded_parameters:\n        # Validate that the artifact name is provided, otherwise fail the job\n        # with a helpful message.\n        raise Exception(\"Your UserParameters JSON must include the artifact name\")\n\n    if \"file\" not in decoded_parameters:\n        # Validate that the template file is provided, otherwise fail the job\n        # with a helpful message.\n        raise Exception(\"Your UserParameters JSON must include the template file name\")\n\n    return decoded_parameters\n\n\ndef setup_s3_client(job_data):\n    \"\"\"Creates an S3 client\n\n    Uses the credentials passed in the event by CodePipeline. These\n    credentials can be used to access the artifact bucket.\n\n    Args:\n        job_data: The job data structure\n\n    Returns:\n        An S3 client with the appropriate credentials\n\n    \"\"\"\n    key_id = job_data[\"artifactCredentials\"][\"accessKeyId\"]\n    key_secret = job_data[\"artifactCredentials\"][\"secretAccessKey\"]\n    session_token = job_data[\"artifactCredentials\"][\"sessionToken\"]\n\n    session = Session(\n        aws_access_key_id=key_id,\n        aws_secret_access_key=key_secret,\n        aws_session_token=session_token,\n    )\n    return session.client(\"s3\", config=botocore.client.Config(signature_version=\"s3v4\"))\n\n\ndef lambda_handler(event, context):\n    \"\"\"The Lambda function handler\n\n    If a continuing job then checks the CloudFormation stack status\n    and updates the job accordingly.\n\n    If a new job then kick of an update or creation of the target\n    CloudFormation stack.\n\n    Args:\n        event: The event passed by Lambda\n        context: The context passed by Lambda\n\n    \"\"\"\n    try:\n        # Extract the Job ID\n        job_id = event[\"CodePipeline.job\"][\"id\"]\n\n        # Extract the Job Data\n        job_data = event[\"CodePipeline.job\"][\"data\"]\n\n        # Extract the params\n        params = get_user_params(job_data)\n\n        # Get the list of artifacts passed to the function\n        artifacts = job_data[\"inputArtifacts\"]\n\n        stack = params[\"stack\"]\n        artifact = params[\"artifact\"]\n        template_file = params[\"file\"]\n\n        if \"continuationToken\" in job_data:\n            # If we're continuing then the create/update has already been triggered\n            # we just need to check if it has finished.\n            check_stack_update_status(job_id, stack)\n        else:\n            # Get the artifact details\n            artifact_data = find_artifact(artifacts, artifact)\n            # Get S3 client to access artifact with\n            s3 = setup_s3_client(job_data)\n            # Get the JSON template file out of the artifact\n            template = get_template(s3, artifact_data, template_file)\n            # Kick off a stack update or create\n            start_update_or_create(job_id, stack, template)\n\n    except Exception as e:\n        # If any other exceptions which we didn't expect are raised\n        # then fail the job and log the exception message.\n        print(\"Function failed due to exception.\")\n        print(e)\n        traceback.print_exc()\n        put_job_failure(job_id, \"Function exception: \" + str(e))\n\n    print(\"Function complete.\")\n    return \"Complete.\"\n</code></pre>"},{"location":"code-pipeline-job/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with AWS CodePipeline</li> <li>Invoke an AWS Lambda function in a pipeline in CodePipeline</li> </ul>"},{"location":"cognito-events/","title":"Amazon Cognito Events","text":"<p>Amazon Cognito Events allows you to execute an AWS Lambda function in response to important events in Amazon Cognito.</p> <p>Event-driven, synchronous invocation</p>"},{"location":"cognito-events/#request","title":"Request","text":"<pre><code>{\n  \"version\": 2,\n  \"eventType\": \"SyncTrigger\",\n  \"region\": \"us-east-1\",\n  \"identityPoolId\": \"identityPoolId\",\n  \"identityId\": \"identityId\",\n  \"datasetName\": \"datasetName\",\n  \"datasetRecords\": {\n    \"SampleKey1\": {\n      \"oldValue\": \"oldValue1\",\n      \"newValue\": \"newValue1\",\n      \"op\": \"replace\"\n    },\n    \"SampleKey2\": {\n      \"oldValue\": \"oldValue2\",\n      \"newValue\": \"newValue2\",\n      \"op\": \"replace\"\n    }\n  }\n}\n</code></pre>"},{"location":"cognito-events/#response","title":"Response","text":"<p>N/A</p>"},{"location":"cognito-events/#resources","title":"Resources","text":"<ul> <li>DotNet - CognitoEvent - NuGet <code>Amazon.Lambda.CognitoEvents</code></li> <li>Java - CognitoEvent - Maven <code>aws-lambda-java-events</code></li> </ul>"},{"location":"cognito-events/#code-examples","title":"Code Examples","text":"<pre><code>exports.handler = function(event, context) {\n    //Check for the event type\n    if (event.eventType === 'SyncTrigger') {\n        //Modify value for a key\n        if('SampleKey1' in event.datasetRecords){\n            event.datasetRecords.SampleKey1.newValue = 'ModifyValue1';\n            event.datasetRecords.SampleKey1.op = 'replace';\n        }\n\n        //Remove a key\n        if('SampleKey2' in event.datasetRecords){\n            event.datasetRecords.SampleKey2.op = 'remove';\n        }\n\n        //Add a key\n        if(!('SampleKey3' in event.datasetRecords)){\n            event.datasetRecords.SampleKey3={'newValue':'ModifyValue3', 'op' : 'replace'};\n        }\n    }\n\ncontext.done(null, event);\n};\n</code></pre>"},{"location":"cognito-events/#documentation","title":"Documentation","text":"<ul> <li>Amazon Cognito Events</li> </ul>"},{"location":"cognito-user-pool/","title":"Cognito User Pool Triggers","text":"<p>You can create a Lambda function and then activate that function during user pool operations such as user sign-up, confirmation, and sign-in (authentication) with a Lambda trigger. You can add authentication challenges, migrate users, and customize verification messages.</p> User Pool Flow Operation Description Custom Authentication Flow Define Auth Challenge Determines the next challenge in a custom auth flow Create Auth Challenge Creates a challenge in a custom auth flow Verify Auth Challenge Response Determines if a response is correct in a custom auth flow Authentication Events Pre authentication Lambda trigger Custom validation to accept or deny the sign-in request Post authentication Lambda trigger Logs events for custom analytics Pre token generation Lambda trigger Augments or suppresses token claims Sign-Up Pre sign-up Lambda trigger Performs custom validation that accepts or denies the sign-up request Post confirmation Lambda trigger Adds custom welcome messages or event logging for custom analytics Migrate user Lambda trigger Migrates a user from an existing user directory to user pools Messages Custom message Lambda trigger Performs advanced customization and localization of messages Token Creation Pre token generation Lambda trigger Adds or removes attributes in Id tokens Email and SMS third-party providers Custom sender Lambda triggers Uses a third-party provider to send SMS and email messages"},{"location":"cognito-user-pool/#common-reqest-fields","title":"Common Reqest Fields","text":"<p>Common attributes shared by all User Pool Lambda Trigger Events</p> <code>version</code> (String, required) The version number of your Lambda function. example <code>1</code> <code>region</code> (String, required) The AWS region where the event was triggered. example <code>us-east-1</code> <code>userPoolId</code> (String, required) The user pool ID for the user pool where the event occurred. example <code>us-east-1_1234567890</code> <code>triggerSource</code> (String, required) The name of the event that triggered the Lambda function. See User pool Lambda trigger sources example <code>PreSignUp_SignUp</code> <code>userName</code> (String, required) The username of the current user. example <code>testuser</code> <code>callerContext</code> (Object, required) The caller context, with <code>awsSdkVersion</code> and <code>clientId</code>. example <code>{\"clientId\":\"app_client_id\",\"custom\":{},\"awsSdkVersion\":\"aws-sdk-js-2.6.4\"}</code>"},{"location":"cognito-user-pool/#pre-sign-up","title":"Pre Sign-up","text":"<p>The pre sign-up Lambda function is triggered just before Amazon Cognito signs up a new user. It allows you to perform custom validation to accept or deny the registration request as part of the sign-up process.</p> <ul> <li>Pre sign-up Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#pre-sign-up-request","title":"Pre Sign-up Request","text":"<p><code>triggerSource</code> can be one of the following:</p> <ul> <li><code>PreSignUp_SignUp</code> Pre sign-up.</li> <li><code>PreSignUp_AdminCreateUser</code> Pre sign-up when an admin creates a new user.</li> <li><code>PreSignUp_ExternalProvider</code> Pre sign-up with external provider</li> </ul> <code>userAttributes</code> (Object, required) One or more name-value pairs representing user attributes. The attribute names are the keys. <code>validationData</code> (Object, required) One or more name-value pairs containing the validation data in the request to register a user. <code>clientMetadata</code> (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre sign-up trigger. Pre Sign-up Request<pre><code>{\n  \"version\": \"string\",\n  \"triggerSource\": \"PreSignUp_SignUp\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"string\",\n  \"userName\": \"userName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"email\": \"user@example.com\",\n      \"phone_number\": \"+12065550100\"\n    }\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#pre-sign-up-response","title":"Pre Sign-up Response","text":"<p>Response fields include:</p> <code>autoConfirmUser</code> (Boolean, optional) Set to true to auto-confirm the user, or false otherwise. <code>autoVerifyEmail</code> (Boolean, optional) Set to true to set as verified the email of a user who is signing up, or false otherwise. <code>autoVerifyPhone</code> (Boolean, optional) Set to true to set as verified the phone number of a user who is signing up, or false otherwise. Pre Sign-up Response Structure<pre><code>{\n    \"request\": {\n        \"userAttributes\": {\n            \"string\": \"string\",\n            . . .\n        },\n        \"validationData\": {\n            \"string\": \"string\",\n            . . .\n         },\n        \"clientMetadata\": {\n            \"string\": \"string\",\n            . . .\n         }\n    },\n\n    \"response\": {\n        \"autoConfirmUser\": \"boolean\",\n        \"autoVerifyPhone\": \"boolean\",\n        \"autoVerifyEmail\": \"boolean\"\n    }\n}\n</code></pre>"},{"location":"cognito-user-pool/#post-confirmation","title":"Post Confirmation","text":"<p>Amazon Cognito invokes this trigger after a new user is confirmed, allowing you to send custom messages or to add custom logic. For example, you could use this trigger to gather new user data.</p> <ul> <li>Post confirmation Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#post-confirmation-request","title":"Post Confirmation Request","text":"Post Confirmation Request<pre><code>{\n  \"version\": \"string\",\n  \"triggerSource\": \"PostConfirmation_ConfirmSignUp\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"string\",\n  \"userName\": \"userName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"email\": \"user@example.com\",\n      \"email_verified\": true\n    }\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#post-confirmation-response","title":"Post Confirmation Response","text":"<p>No additional return information is expected in the response.</p>"},{"location":"cognito-user-pool/#pre-authentication","title":"Pre Authentication","text":"<p>Amazon Cognito invokes this trigger when a user attempts to sign in, allowing custom validation to accept or deny the authentication request.</p> <ul> <li>Pre authentication Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#pre-authentication-request","title":"Pre Authentication Request","text":"Pre Authentication Request<pre><code>{\n  \"version\": \"1\",\n  \"triggerSource\": \"PreAuthentication_Authentication\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_example\",\n  \"userName\": \"UserName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"sub\": \"4A709A36-7D63-4785-829D-4198EF10EBDA\",\n      \"email_verified\": \"true\",\n      \"name\": \"First Last\",\n      \"email\": \"pre-auth@mail.com\"\n    }\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#pre-authentication-response","title":"Pre Authentication Response","text":"<p>No additional return information is expected in the response.</p>"},{"location":"cognito-user-pool/#custom-authentication","title":"Custom Authentication","text":"<p>These Lambda triggers issue and verify their own challenges as part of a user pool custom authentication flow.</p> Define auth challenge Amazon Cognito invokes this trigger to initiate the custom authentication flow. Create auth challenge Amazon Cognito invokes this trigger after Define Auth Challenge to create a custom challenge. Verify auth challenge response Amazon Cognito invokes this trigger to verify if the response from the end user for a custom challenge is valid or not. Trigger triggerSource value Triggering event Define auth challenge DefineAuthChallenge_Authentication Define Auth Challenge. Create auth challenge CreateAuthChallenge_Authentication Create Auth Challenge. Verify auth challenge VerifyAuthChallengeResponse_Authentication Verify Auth Challenge Response."},{"location":"cognito-user-pool/#auth-challenge-requests","title":"Auth Challenge Requests","text":"Define Auth Challenge Request<pre><code>{\n  \"version\": \"1\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_example\",\n  \"userName\": \"UserName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"triggerSource\": \"DefineAuthChallenge_Authentication\",\n  \"request\": {\n    \"userAttributes\": {\n      \"sub\": \"4A709A36-7D63-4785-829D-4198EF10EBDA\",\n      \"email_verified\": \"true\",\n      \"name\": \"First Last\",\n      \"email\": \"define-auth@mail.com\"\n    },\n    \"session\": [\n      {\n        \"challengeName\": \"PASSWORD_VERIFIER\",\n        \"challengeResult\": true\n      },\n      {\n        \"challengeName\": \"CUSTOM_CHALLENGE\",\n        \"challengeResult\": true,\n        \"challengeMetadata\": \"CAPTCHA_CHALLENGE\"\n      }\n    ],\n    \"userNotFound\": true\n  },\n  \"response\": {}\n}\n</code></pre> Create Auth Challenge Request<pre><code>{\n  \"version\": \"1\",\n  \"triggerSource\": \"CreateAuthChallenge_Authentication\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_example\",\n  \"userName\": \"UserName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"sub\": \"4A709A36-7D63-4785-829D-4198EF10EBDA\",\n      \"email_verified\": \"true\",\n      \"name\": \"First Last\",\n      \"email\": \"create-auth@mail.com\"\n    },\n    \"challengeName\": \"PASSWORD_VERIFIER\",\n    \"session\": [\n      {\n        \"challengeName\": \"CUSTOM_CHALLENGE\",\n        \"challengeResult\": true,\n        \"challengeMetadata\": \"CAPTCHA_CHALLENGE\"\n      }\n    ],\n    \"userNotFound\": false\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#auth-challenge-responses","title":"Auth Challenge Responses","text":"Verify auth challenge response<pre><code>{\n  \"version\": \"1\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_example\",\n  \"userName\": \"UserName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"triggerSource\": \"VerifyAuthChallengeResponse_Authentication\",\n  \"request\": {\n    \"userAttributes\": {\n      \"sub\": \"4A709A36-7D63-4785-829D-4198EF10EBDA\",\n      \"email_verified\": \"true\",\n      \"name\": \"First Last\",\n      \"email\": \"verify-auth@mail.com\"\n    },\n    \"privateChallengeParameters\": {\n      \"answer\": \"challengeAnswer\"\n    },\n    \"clientMetadata\": {\n      \"foo\": \"value\"\n    },\n    \"challengeAnswer\": \"challengeAnswer\",\n    \"userNotFound\": true\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#pre-token-generation","title":"Pre Token Generation","text":"<p>Amazon Cognito invokes this trigger before token generation which allows you to customize identity token claims.</p> <ul> <li>Pre token generation Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#pre-token-generation-request","title":"Pre Token Generation Request","text":"triggerSource Triggering event TokenGeneration_HostedAuth Called during authentication from the Amazon Cognito hosted UI sign-in page. TokenGeneration_Authentication Called after user authentication flows have completed. TokenGeneration_NewPasswordChallenge Called after the user is created by an admin. This flow is invoked when the user has to change a temporary password. TokenGeneration_AuthenticateDevice Called at the end of the authentication of a user device. TokenGeneration_RefreshTokens Called when a user tries to refresh the identity and access tokens. <p>Pre token generation request parameters</p> <code>groupConfiguration</code> (Object) The input object containing the current group configuration. It includes <code>groupsToOverride</code>, <code>iamRolesToOverride</code>, and <code>preferredRole</code>. <code>groupsToOverride</code> (Array, optional) A list of the group names that are associated with the user that the identity token is issued for. <code>iamRolesToOverride</code> (Array, optional) A list of the current IAM roles associated with these groups. <code>preferredRole</code> (String, optional) A string indicating the preferred IAM role. <code>clientMetadata</code> (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre token generation trigger. Example pre token generation request<pre><code>{\n  \"triggerSource\": \"TokenGeneration_Authentication\",\n  \"version\": \"1\",\n  \"region\": \"us-west-2\",\n  \"userPoolId\": \"us-west-2_example\",\n  \"userName\": \"testqq\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"aws-sdk-unknown-unknown\",\n    \"clientId\": \"71ghuul37mresr7h373b704tua\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"sub\": \"0b0a57c5-f013-426a-81a1-f8ffbfba21f0\",\n      \"email_verified\": \"true\",\n      \"cognito:user_status\": \"CONFIRMED\",\n      \"email\": \"test@mail.com\"\n    },\n    \"groupConfiguration\": {\n      \"groupsToOverride\": [],\n      \"iamRolesToOverride\": [],\n      \"preferredRole\": null\n    }\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#pre-token-generation-response","title":"Pre Token Generation Response","text":"<p>Pre token generation response parameters</p> <code>claimsToAddOrOverride</code> (Object, optional) A map of one or more key-value pairs of claims to add or override. For group related claims, use groupOverrideDetails instead. <code>claimsToSuppress</code> (Array, optional) A list that contains claims to be suppressed from the identity token. <code>groupOverrideDetails</code> (Object, optional) The output object containing the current group configuration. It includes <code>groupsToOverride</code>, <code>iamRolesToOverride</code>, and <code>preferredRole</code>. Pre-token generation response structure<pre><code>{\n    \"request\": {\n        \"userAttributes\": {\"string\": \"string\"},\n        \"groupConfiguration\": [\n            {\n                \"groupsToOverride\": [\n                    \"string\",\n                    \"string\"\n                ],\n                \"iamRolesToOverride\": [\n                    \"string\",\n                    \"string\"\n                ],\n                \"preferredRole\": \"string\"\n            }\n        ],\n        \"clientMetadata\": {\"string\": \"string\"}\n    },\n    \"response\": {\n        \"claimsOverrideDetails\": {\n            \"claimsToAddOrOverride\": {\"string\": \"string\"},\n            \"claimsToSuppress\": [\n                \"string\",\n                \"string\"\n            ],\n            \"groupOverrideDetails\": {\n                \"groupsToOverride\": [\n                    \"string\",\n                    \"string\"\n                ],\n                \"iamRolesToOverride\": [\n                    \"string\",\n                    \"string\"\n                ],\n                \"preferredRole\": \"string\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cognito-user-pool/#post-authentication","title":"Post Authentication","text":"<ul> <li>Post authentication Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#post-authentication-request","title":"Post Authentication Request","text":"Post Authentication Reqest<pre><code>{\n  \"version\": \"1\",\n  \"triggerSource\": \"PostAuthentication_Authentication\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_example\",\n  \"userName\": \"UserName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"newDeviceUsed\": true,\n    \"userAttributes\": {\n      \"email\": \"post-auth@mail.com\"\n    }\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#post-authentication-response","title":"Post Authentication Response","text":"<p>No additional return information is expected in the response.</p>"},{"location":"cognito-user-pool/#custom-message","title":"Custom Message","text":"<p>Amazon Cognito invokes this trigger before sending an email or phone verification message or a multi-factor authentication (MFA) code, allowing you to customize the message dynamically.</p> <ul> <li>Custom message Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#custom-message-request","title":"Custom Message Request","text":"triggerSource Triggering event CustomMessage_SignUp To send the confirmation code post sign-up. CustomMessage_AdminCreateUser To send the temporary password to a new user. CustomMessage_ResendCode To resend the confirmation code to an existing user. CustomMessage_ForgotPassword To send the confirmation code for Forgot Password request. CustomMessage_UpdateUserAttribute When a user's email or phone number is changed, this trigger sends a verification code automatically to the user. Cannot be used for other attributes. CustomMessage_VerifyUserAttribute This trigger sends a verification code to the user when they manually request it for a new email or phone number. CustomMessage_Authentication To send MFA code during authentication. Custom Message Request<pre><code>{\n  \"version\": \"1\",\n  \"triggerSource\": \"CustomMessage_AdminCreateUser\",\n  \"region\": \"region\",\n  \"userPoolId\": \"userPoolId\",\n  \"userName\": \"userName\",\n  \"callerContext\": {\n    \"awsSdk\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"userAttributes\": {\n      \"phone_number_verified\": false,\n      \"email_verified\": true\n    },\n    \"codeParameter\": \"####\",\n    \"usernameParameter\": \"username\"\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#custom-message-response","title":"Custom Message Response","text":"<p>Custom message response parameters</p> <code>smsMessage</code> (String, optional) The custom SMS message to be sent to your users. Must include the <code>codeParameter</code> value received in the request. <code>emailMessage</code> (String, optional) The custom email message to be sent to your users. Must include the <code>codeParameter</code> value received in the request. <code>emailSubject</code> (String, optional) The subject line for the custom message. Custom Message Response Structure<pre><code>{\n    \"request\": {\n        \"userAttributes\": {\n            \"string\": \"string\",\n            . . .\n        }\n        \"codeParameter\": \"####\",\n        \"usernameParameter\": \"string\",\n        \"clientMetadata\": {\n            \"string\": \"string\",\n            . . .\n        }\n    },\n    \"response\": {\n        \"smsMessage\": \"string\",\n        \"emailMessage\": \"string\",\n        \"emailSubject\": \"string\"\n    }\n}\n</code></pre>"},{"location":"cognito-user-pool/#user-migration","title":"User Migration","text":"<p>Amazon Cognito invokes this trigger when a user does not exist in the user pool at the time of sign-in with a password, or in the forgot-password flow. After the Lambda function returns successfully, Amazon Cognito creates the user in the user pool.</p> <ul> <li>Migrate user Lambda trigger documentation</li> </ul>"},{"location":"cognito-user-pool/#user-migration-request","title":"User Migration Request","text":"triggerSource Triggering event UserMigration_Authentication User migration at sign-in. UserMigration_ForgotPassword User migration during forgot-password flow. User Migration Request<pre><code>{\n  \"version\": \"string\",\n  \"triggerSource\": \"UserMigration_Authentication\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"string\",\n  \"userName\": \"userName\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"awsSdkVersion\",\n    \"clientId\": \"clientId\"\n  },\n  \"request\": {\n    \"password\": \"password\"\n  },\n  \"response\": {}\n}\n</code></pre>"},{"location":"cognito-user-pool/#user-migration-response","title":"User Migration Response","text":"User migration response structure<pre><code>{\n    \"userName\": \"string\",\n    \"request\": {\n        \"password\": \"string\",\n        \"validationData\": {\n            \"string\": \"string\",\n            . . .\n        },\n        \"clientMetadata\": {\n          \"string\": \"string\",\n          . . .\n        }\n    },\n    \"response\": {\n        \"userAttributes\": {\n            \"string\": \"string\",\n            . . .\n        },\n        \"finalUserStatus\": \"string\",\n        \"messageAction\": \"string\",\n        \"desiredDeliveryMediums\": [ \"string\", . . .],\n        \"forceAliasCreation\": boolean\n    }\n}\n</code></pre>"},{"location":"cognito-user-pool/#custom-email-sender","title":"Custom Email Sender","text":"TriggerSource Triggering event CustomEmailSender_SignUp A user signs up and Amazon Cognito sends a welcome message. CustomEmailSender_ResendCode A user requests a replacement code to reset their password. CustomEmailSender_ForgotPassword A user requests a code to reset their password. CustomEmailSender_UpdateUserAttribute A user updates an email address or phone number attribute and Amazon Cognito sends a code to verify the attribute. CustomEmailSender_VerifyUserAttribute A user creates a new email address or phone number attribute and Amazon Cognito sends a code to verify the attribute. CustomEmailSender_AdminCreateUser You create a new user in your user pool and Amazon Cognito sends them a temporary password. CustomEmailSender_AccountTakeOverNotification Amazon Cognito detects an attempt to take over a user account and sends the user a notification. Custom Email Sender Request<pre><code>{\n  \"version\": \"1\",\n  \"triggerSource\": \"CustomEmailSender_ForgotPassword\",\n  \"region\": \"us-east-1\",\n  \"userPoolId\": \"us-east-1_LnS...\",\n  \"userName\": \"54cf7eb7-0b96-4304-...\",\n  \"callerContext\": {\n    \"awsSdkVersion\": \"aws-sdk-nodejs-2.856.0\",\n    \"clientId\": \"6u7c9vr3pkstoog...\"\n  },\n  \"request\": {\n    \"type\": \"customEmailSenderRequestV1\",\n    \"code\": \"AYADeILxywKhhaq8Ys4mh0aHutYAgQACABVhd3MtY3J5c...\",\n    \"clientMetadata\": null,\n    \"userAttributes\": {\n      \"sub\": \"54cf7eb7-0b96-4304-8d6b-...\",\n      \"email_verified\": \"true\",\n      \"cognito:user_status\": \"CONFIRMED\",\n      \"cognito:email_alias\": \"hello@maxivanov.io\",\n      \"phone_number_verified\": \"false\",\n      \"phone_number\": \"...\",\n      \"given_name\": \"Max\",\n      \"family_name\": \"Ivanov\",\n      \"email\": \"hello@maxivanov.io\"\n    }\n  }\n}\n</code></pre> <ul> <li>Send AWS Cognito emails with 3rd party Email Service Providers</li> </ul>"},{"location":"cognito-user-pool/#custom-sms-sender","title":"Custom SMS Sender","text":"TriggerSource Triggering event CustomSMSSender_SignUp A user signs up and Amazon Cognito sends a welcome message. CustomSMSSender_ResendCode A user requests a replacement code to reset their password. CustomSMSSender_ForgotPassword A user requests a code to reset their password. CustomSMSSender_UpdateUserAttribute A user updates an email address or phone number attribute and Amazon Cognito sends a code to verify the attribute. CustomSMSSender_VerifyUserAttribute A user creates a new email address or phone number attribute and Amazon Cognito sends a code to verify the attribute. CustomSMSSender_Authentication A user with SMS MFA configured signs in. CustomSMSSender_AdminCreateUser You create a new user in your user pool and Amazon Cognito sends them a temporary password."},{"location":"cognito-user-pool/#resources","title":"Resources","text":"<ul> <li>Python - Request and response utils - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - Typing for request and response - NPM <code>@types/aws-lambda</code></li> <li>Java - Request and response classes for CognitoUserPool* - Maven <code>aws-lambda-java-events</code></li> <li>Go - Request and response class - <code>github.com/aws/aws-lambda-go/events</code></li> </ul>"},{"location":"cognito-user-pool/#code-examples","title":"Code Examples","text":"Define Auth Challenge Example using AWS Lambda Powertools<pre><code>from aws_lambda_powertools.utilities.data_classes import event_source\nfrom aws_lambda_powertools.utilities.data_classes.cognito_user_pool_event import DefineAuthChallengeTriggerEvent\n\n@event_source(data_class=DefineAuthChallengeTriggerEvent)\ndef handler(event: DefineAuthChallengeTriggerEvent, context) -&gt; dict:\n    if (\n        len(event.request.session) == 1\n        and event.request.session[0].challenge_name == \"SRP_A\"\n    ):\n        event.response.issue_tokens = False\n        event.response.fail_authentication = False\n        event.response.challenge_name = \"PASSWORD_VERIFIER\"\n    elif (\n        len(event.request.session) == 2\n        and event.request.session[1].challenge_name == \"PASSWORD_VERIFIER\"\n        and event.request.session[1].challenge_result\n    ):\n        event.response.issue_tokens = False\n        event.response.fail_authentication = False\n        event.response.challenge_name = \"CUSTOM_CHALLENGE\"\n    elif (\n        len(event.request.session) == 3\n        and event.request.session[2].challenge_name == \"CUSTOM_CHALLENGE\"\n        and event.request.session[2].challenge_result\n    ):\n        event.response.issue_tokens = True\n        event.response.fail_authentication = False\n    else:\n        event.response.issue_tokens = False\n        event.response.fail_authentication = True\n\n    return event.raw_event\n</code></pre>"},{"location":"cognito-user-pool/#documentation","title":"Documentation","text":"<p>Reference documentation and blog posts.</p> <ul> <li>Customizing user pool workflows with Lambda triggers</li> <li>Anonymous User Identities with Cognito Lambda Triggers</li> </ul>"},{"location":"config/","title":"Amazon Config","text":"<p>You can use AWS Lambda functions to evaluate whether your AWS resource configurations comply with your custom Config rules. As resources are created, deleted, or changed, AWS Config records these changes and sends the information to your Lambda functions. Your Lambda functions then evaluate the changes and report results to AWS Config.</p> <p>Event-driven asynchronous invocation</p>"},{"location":"config/#request","title":"Request","text":"<pre><code>{\n  \"invokingEvent\": \"{\\\"configurationItem\\\":{\\\"configurationItemCaptureTime\\\":\\\"2016-02-17T01:36:34.043Z\\\",\\\"awsAccountId\\\":\\\"000000000000\\\",\\\"configurationItemStatus\\\":\\\"OK\\\",\\\"resourceId\\\":\\\"i-00000000\\\",\\\"ARN\\\":\\\"arn:aws:ec2:us-east-1:000000000000:instance/i-00000000\\\",\\\"awsRegion\\\":\\\"us-east-1\\\",\\\"availabilityZone\\\":\\\"us-east-1a\\\",\\\"resourceType\\\":\\\"AWS::EC2::Instance\\\",\\\"tags\\\":{\\\"Foo\\\":\\\"Bar\\\"},\\\"relationships\\\":[{\\\"resourceId\\\":\\\"eipalloc-00000000\\\",\\\"resourceType\\\":\\\"AWS::EC2::EIP\\\",\\\"name\\\":\\\"Is attached to ElasticIp\\\"}],\\\"configuration\\\":{\\\"foo\\\":\\\"bar\\\"}},\\\"messageType\\\":\\\"ConfigurationItemChangeNotification\\\"}\",\n  \"ruleParameters\": \"{\\\"myParameterKey\\\":\\\"myParameterValue\\\"}\",\n  \"resultToken\": \"myResultToken\",\n  \"eventLeftScope\": false,\n  \"executionRoleArn\": \"arn:aws:iam::012345678912:role/config-role\",\n  \"configRuleArn\": \"arn:aws:config:us-east-1:012345678912:config-rule/config-rule-0123456\",\n  \"configRuleName\": \"change-triggered-config-rule\",\n  \"configRuleId\": \"config-rule-0123456\",\n  \"accountId\": \"012345678912\",\n  \"version\": \"1.0\"\n}\n</code></pre>"},{"location":"config/#response","title":"Response","text":"<p>N/A</p>"},{"location":"config/#resources","title":"Resources","text":"<p>Resources and templates for AWS Config rules</p> <ul> <li>AWS Config Rules Repository - AWS Community repository of custom Config rules.</li> <li>AWS Config Managed Rules</li> <li>Blog - Introducing the AWS Config Rule Development Kit (RDK)</li> </ul>"},{"location":"config/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with AWS Config</li> <li>Developing a Custom Rule for AWS Config</li> </ul>"},{"location":"connect/","title":"Amazon Connect","text":"<p>Amazon Connect invokes your Lambda function synchronously with an event that contains the request body and metadata.</p> <p>Event-driven, synchronous invocation</p>"},{"location":"connect/#request","title":"Request","text":""},{"location":"connect/#example-event","title":"Example event","text":"<p>Amazon Connect invokes your Lambda function synchronously with an event that contains the request body and metadata.</p> Example Amazon Connect request event<pre><code>{\n  \"Details\": {\n    \"ContactData\": {\n      \"Attributes\": {},\n      \"Channel\": \"VOICE\",\n      \"ContactId\": \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\",\n      \"CustomerEndpoint\": {\n        \"Address\": \"+1234567890\",\n        \"Type\": \"TELEPHONE_NUMBER\"\n      },\n      \"InitialContactId\": \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\",\n      \"InitiationMethod\": \"INBOUND | OUTBOUND | TRANSFER | CALLBACK\",\n      \"InstanceARN\": \"arn:aws:connect:aws-region:1234567890:instance/c8c0e68d-2200-4265-82c0-XXXXXXXXXX\",\n      \"PreviousContactId\": \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\",\n      \"Queue\": {\n        \"ARN\": \"arn:aws:connect:eu-west-2:111111111111:instance/cccccccc-bbbb-dddd-eeee-ffffffffffff/queue/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\",\n        \"Name\": \"PasswordReset\"\n      },\n      \"SystemEndpoint\": {\n        \"Address\": \"+1234567890\",\n        \"Type\": \"TELEPHONE_NUMBER\"\n      }\n    },\n    \"Parameters\": {\n      \"sentAttributeKey\": \"sentAttributeValue\"\n    }\n  },\n  \"Name\": \"ContactFlowEvent\"\n}\n</code></pre>"},{"location":"connect/#response","title":"Response","text":"<p>No required response format</p> <pre><code>{\n    \"Name\": \"CustomerName\",\n    \"Address\": \"1234 Main Road\",\n    \"CallerType\": \"Patient\"\n}\n</code></pre>"},{"location":"connect/#resources","title":"Resources","text":"<ul> <li>Typescript - ConnectContactFlowEvent - NPM <code>@types/aws-lambda</code></li> <li>Java - ConnectEvent - Maven <code>aws-lambda-java-events</code></li> <li>Python - ConnectContactFlowEvent - pip <code>aws-lambda-powertools</code></li> <li>DotNet - ContactFlowEvent - Nuget <code>Amazon.Lambda.ConnectEvents</code></li> </ul>"},{"location":"connect/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with Amazon Connect</li> <li>Config - Invoke AWS Lambda functions</li> </ul>"},{"location":"dynamodb/","title":"DynamoDB","text":"<p>Amazon DynamoDB stream, Lambda reads records from the stream and invokes your function synchronously with an event that contains stream records.  Lambda reads records in batches and invokes your function to process records from the batch.</p>"},{"location":"dynamodb/#request","title":"Request","text":""},{"location":"dynamodb/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event dynamodb update\n</code></pre>"},{"location":"dynamodb/#input-event-structure","title":"Input Event structure","text":"<pre><code>{\n  \"Records\": [\n    {\n      \"eventID\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"eventName\": \"INSERT\",\n      \"eventVersion\": \"1.1\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"awsRegion\": \"eu-central-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"NewImage\": {\n          \"Message\": {\n            \"S\": \"New item!\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"ApproximateCreationDateTime\": 1428537600,\n        \"SequenceNumber\": \"4421584500000000017450439091\",\n        \"SizeBytes\": 26,\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n      },\n      \"eventSourceARN\": \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\",\n      \"userIdentity\": {\n        \"principalId\": \"dynamodb.amazonaws.com\",\n        \"type\": \"Service\"\n      }\n    },\n    {\n      \"eventID\": \"c81e728d9d4c2f636f067f89cc14862c\",\n      \"eventName\": \"MODIFY\",\n      \"eventVersion\": \"1.1\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"awsRegion\": \"eu-central-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"NewImage\": {\n          \"Message\": {\n            \"S\": \"This item has changed\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"OldImage\": {\n          \"Message\": {\n            \"S\": \"New item!\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"ApproximateCreationDateTime\": 1428537600,\n        \"SequenceNumber\": \"4421584500000000017450439092\",\n        \"SizeBytes\": 59,\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n      },\n      \"eventSourceARN\": \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\"\n    },\n    {\n      \"eventID\": \"eccbc87e4b5ce2fe28308fd9f2a7baf3\",\n      \"eventName\": \"REMOVE\",\n      \"eventVersion\": \"1.1\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"awsRegion\": \"eu-central-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"OldImage\": {\n          \"Message\": {\n            \"S\": \"This item has changed\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"ApproximateCreationDateTime\": 1428537600,\n        \"SequenceNumber\": \"4421584500000000017450439093\",\n        \"SizeBytes\": 38,\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n      },\n      \"eventSourceARN\": \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\"\n    }\n  ]\n}\n</code></pre>"},{"location":"dynamodb/#response","title":"Response","text":"Response schema<pre><code>{ \n  \"batchItemFailures\": [ \n        {\n            \"itemIdentifier\": \"&lt;id&gt;\"\n        }\n    ]\n}\n</code></pre>"},{"location":"dynamodb/#resources","title":"Resources","text":"<p>Typing and data classes</p> <ul> <li>Python - DynamoDBStreamEvent - Pip <code>aws-lambda-powertools</code></li> <li>Go - DynamoDBEvent - Go <code>github.com/aws/aws-lambda-go/events</code></li> <li>Typescript - DynamoDBStreamEvent - NPM <code>@types/aws-lambda</code></li> <li>Java - DynamodbEvent - Java <code>aws-lambda-java-events</code></li> <li>Rust - aws_lambda_events::dynamodb::Event - Rust <code>aws_lambda_events</code></li> <li>Ruby - DynamodbEvent - Gem <code>jets</code></li> </ul> <p>Batch handler</p> <ul> <li>Python - BatchProcessor - pip <code>aws-lambda-powertools</code></li> <li>Python - on_dynamodb_record - pip <code>chalice</code></li> </ul>"},{"location":"dynamodb/#code-examples","title":"Code Examples","text":"Example using AWS Lambda Powertool (Python)<pre><code>import json\n\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.utilities.batch import BatchProcessor, EventType, batch_processor\nfrom aws_lambda_powertools.utilities.data_classes.dynamo_db_stream_event import DynamoDBRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\nprocessor = BatchProcessor(event_type=EventType.DynamoDBStreams)\ntracer = Tracer()\nlogger = Logger()\n\n\n@tracer.capture_method\ndef record_handler(record: DynamoDBRecord):\n    logger.info(record.dynamodb.new_image)\n    payload: dict = json.loads(record.dynamodb.new_image.get(\"Message\").get_value)\n    # alternatively:\n    # changes: Dict[str, dynamo_db_stream_event.AttributeValue] = record.dynamodb.new_image\n    # payload = change.get(\"Message\").raw_event -&gt; {\"S\": \"&lt;payload&gt;\"}\n    ...\n\n@logger.inject_lambda_context\n@tracer.capture_lambda_handler\n@batch_processor(record_handler=record_handler, processor=processor)\ndef lambda_handler(event, context: LambdaContext):\n    return processor.response()\n</code></pre>"},{"location":"dynamodb/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon DynamoDB</li> </ul>"},{"location":"event-bridge/","title":"Amazon EventBridge","text":"<p>Amazon EventBridge (formerly called CloudWatch Events) invokes your function asynchronously with an event document that wraps the event from its source.</p>"},{"location":"event-bridge/#request","title":"Request","text":""},{"location":"event-bridge/#example-cloudwatch-event","title":"Example CloudWatch Event","text":"<ul> <li>CloudWatch Events Event Examples From Supported Services</li> </ul>"},{"location":"event-bridge/#eventbridge-event-example","title":"EventBridge event example","text":"EventBridge (CloudWatch Events) event example<pre><code>{\n   \"version\":\"0\",\n   \"id\":\"fe8d3c65-xmpl-c5c3-2c87-81584709a377\",\n   \"detail-type\":\"RDS DB Instance Event\",\n   \"source\":\"aws.rds\",\n   \"account\":\"123456789012\",\n   \"time\":\"2020-04-28T07:20:20Z\",\n   \"region\":\"us-east-2\",\n   \"resources\":[\n      \"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\"\n   ],\n   \"detail\":{\n      \"EventCategories\":[\n         \"backup\"\n      ],\n      \"SourceType\":\"DB_INSTANCE\",\n      \"SourceArn\":\"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\",\n      \"Date\":\"2020-04-28T07:20:20.112Z\",\n      \"Message\":\"Finished DB Instance backup\",\n      \"SourceIdentifier\":\"rdz6xmpliljlb1\"\n   }\n}\n</code></pre>"},{"location":"event-bridge/#eventbridge-scheduled-event","title":"EventBridge scheduled event","text":"EventBridge (CloudWatch Events) message event<pre><code>{\n   \"version\":\"0\",\n   \"account\":\"123456789012\",\n   \"region\":\"us-east-2\",\n   \"detail\":{},\n   \"detail-type\":\"Scheduled Event\",\n   \"source\":\"aws.events\",\n   \"time\":\"2019-03-01T01:23:45Z\",\n   \"id\":\"cdc73f9d-aea9-11e3-9d5a-835b769c0d9c\",\n   \"resources\":[\n      \"arn:aws:events:us-east-2:123456789012:rule/my-schedule\"\n   ]\n}\n</code></pre>"},{"location":"event-bridge/#eventbridge-s3-event","title":"EventBridge S3 event","text":"EventBridge S3 event<pre><code>{\n   \"version\":\"0\",\n   \"id\":\"2d4eba74-fd51-3966-4bfa-b013c9da8ff1\",\n   \"detail-type\":\"Object Created\",\n   \"source\":\"aws.s3\",\n   \"account\":\"123456789012\",\n   \"time\":\"2021-11-13T00:00:59Z\",\n   \"region\":\"us-east-1\",\n   \"resources\":[\n      \"arn:aws:s3:::jbarr-public\"\n   ],\n   \"detail\":{\n      \"version\":\"0\",\n      \"bucket\":{\n         \"name\":\"jbarr-public\"\n      },\n      \"object\":{\n         \"key\":\"eb_create_rule_mid_1.png\",\n         \"size\":99797,\n         \"etag\":\"7a72374e1238761aca7778318b363232\",\n         \"version-id\":\"a7diKodKIlW3mHIvhGvVphz5N_ZcL3RG\",\n         \"sequencer\":\"00618F003B7286F496\"\n      },\n      \"request-id\":\"4Z2S00BKW2P1AQK8\",\n      \"requester\":\"348414629041\",\n      \"source-ip-address\":\"72.21.198.68\",\n      \"reason\":\"PutObject\"\n   }\n}\n</code></pre>"},{"location":"event-bridge/#ec2-instance-state-change-event","title":"EC2 Instance State-change Event","text":"<p>EventBridge (CloudWatch Events) invokes your Lambda function asynchronously with the event document from Amazon EC2.</p> <ul> <li>Using AWS Lambda with Amazon EC2</li> </ul> Amazon EC2 State Change Events<pre><code>{\n    \"version\": \"0\",\n    \"id\": \"b6ba298a-7732-2226-xmpl-976312c1a050\",\n    \"detail-type\": \"EC2 Instance State-change Notification\",\n    \"source\": \"aws.ec2\",\n    \"account\": \"123456798012\",\n    \"time\": \"2019-10-02T17:59:30Z\",\n    \"region\": \"us-east-2\",\n    \"resources\": [\n        \"arn:aws:ec2:us-east-2:123456798012:instance/i-0c314xmplcd5b8173\"\n    ],\n    \"detail\": {\n        \"instance-id\": \"i-0c314xmplcd5b8173\",\n        \"state\": \"running\"\n    }\n}\n</code></pre>"},{"location":"event-bridge/#codecommit-repository-state-change","title":"CodeCommit Repository State Change","text":"<ul> <li>Docs - Monitoring CodeCommit events in Amazon EventBridge and Amazon CloudWatch Events</li> <li>Blog - Discovering sensitive data in AWS CodeCommit with AWS Lambda</li> </ul> Merging changes<pre><code>{\n   \"version\": \"0\",\n   \"id\": \"01234567-EXAMPLE\",\n   \"detail-type\": \"CodeCommit Repository State Change\",\n   \"source\": \"aws.codecommit\",\n   \"account\": \"123456789012\",\n   \"time\": \"2019-06-12T10:23:43Z\",\n   \"region\": \"us-east-2\",\n   \"resources\": [\n     \"arn:aws:codecommit:us-east-2:123456789012:MyDemoRepo\"\n   ],\n   \"detail\": {\n     \"event\": \"referenceUpdated\",\n     \"repositoryName\": \"MyDemoRepo\",\n     \"repositoryId\": \"12345678-1234-5678-abcd-12345678abcd\",\n     \"referenceType\": \"branch\",\n     \"referenceName\": \"myBranch\",\n     \"referenceFullName\": \"refs/heads/myBranch\",\n     \"commitId\": \"7f0103fMERGE\",\n     \"oldCommitId\": \"3e5983DESTINATION\",\n     \"baseCommitId\": \"3e5a9bf1BASE\",\n     \"sourceCommitId\": \"26a8f2SOURCE\",\n     \"destinationCommitId\": \"3e5983DESTINATION\",\n     \"mergeOption\": \"THREE_WAY_MERGE\",\n     \"conflictDetailsLevel\": \"LINE_LEVEL\",\n     \"conflictResolutionStrategy\": \"AUTOMERGE\"\n   }\n}\n</code></pre>"},{"location":"event-bridge/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>id</code></p>"},{"location":"event-bridge/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event cloudwatch scheduled-event\n</code></pre>"},{"location":"event-bridge/#response","title":"Response","text":"<p>N/A</p>"},{"location":"event-bridge/#resources","title":"Resources","text":"<p>Typing and data classes</p> <ul> <li>Typescript - EventBridgeEvent - NPM <code>@types/aws-lambda</code></li> <li>Python - EventBridgeEvent - Pip <code>aws-lambda-powertools</code></li> <li>Go - CloudWatchEvent</li> <li>DotNet - CloudWatchEvent - NuGet <code>Amazon.Lambda.CloudWatchEvents</code></li> <li>Php - EventBridgeEvent - Composer <code>bref/bref</code></li> <li>Rust - cloud_events - <code>aws_lambda_events</code></li> </ul> <p>Handlers with infrastructure provisioning</p> <ul> <li>Ruby - CloudWatch Rules Event - gem <code>jets</code></li> <li>Python - Chalice on_cw_event - pip <code>chalice</code></li> </ul>"},{"location":"event-bridge/#code-examples","title":"Code Examples","text":"<p>DotNet has a large number of handlers for CloudWatch Events.</p> DotNet ECSTaskStateChangeEvent example<pre><code>public class Function\n{\n    public string Handler(ECSTaskStateChangeEvent ecsTaskStateChangeEvent)\n    {\n        Console.WriteLine($\"ECS Task ARN - {ecsTaskStateChangeEvent.Detail.TaskArn}\");\n    }\n}\n</code></pre> <p>Jet - CloudWatch Rules Events allows you to define the infracture code next to the implementation</p> <p>Ruby example might be getting notified when an unwanted security group port gets opened.<pre><code>class SecurityJob &lt; ApplicationJob\n  rule_event(\n    description: \"Checks for security group changes\",\n    detail_type: [\"AWS API Call via CloudTrail\"],\n    detail: {\n      event_source: [\"ec2.amazonaws.com\"],\n      event_name: [\n        \"AuthorizeSecurityGroupIngress\",\n        \"AuthorizeSecurityGroupEgress\",\n        \"RevokeSecurityGroupIngress\",\n        \"RevokeSecurityGroupEgress\",\n        \"CreateSecurityGroup\",\n        \"DeleteSecurityGroup\"\n      ]\n    }\n  )\n  def detect_security_group_changes\n    puts \"event: #{JSON.dump(event)}\" # event is available\n    # your logic\n  end\nend\n</code></pre> Chalice can also to the infrastructure provisioning along set the Lambda handler</p> Example using Chalice to subscribe to code commit events<pre><code>app = chalice.Chalice(app_name='foo')\n\n@app.on_cw_event({\"source\": [\"aws.codecommit\"]})\ndef on_code_commit_changes(event):\n    print(event.to_dict())\n</code></pre> Chalice scheduling ab hourly Cloudwatch event<pre><code>app = chalice.Chalice(app_name='foo')\n\n@app.schedule('rate(1 hour)')\ndef every_hour(event):\n    print(event.to_dict())\n</code></pre>"},{"location":"event-bridge/#documentation","title":"Documentation","text":"<ul> <li>Amazon EventBridge (CloudWatch Events)</li> <li>Use Amazon S3 Event Notifications with Amazon EventBridge</li> <li>CloudWatch Events Event Examples From Supported Services</li> </ul>"},{"location":"function-url/","title":"Function URL","text":"<p>Uses the same Request and Response structures as the API Gateway Http API, but has some different limits.</p> <p>See AWS Lambda Function URLs vs. Amazon API Gateway  for a comparison to API Gateway.</p>"},{"location":"function-url/#limits","title":"Limits","text":"<p>Lambda specific hard limitations</p> <ul> <li>Payload limit of 6mb for the Lambda</li> <li>Maximum timeouts up to 900 seconds (15 minutes)</li> </ul>"},{"location":"function-url/#request","title":"Request","text":"<pre><code>{\n  \"version\": \"2.0\",\n  \"rawPath\": \"/my/path\",\n  \"rawQueryString\": \"parameter1=value1&amp;parameter1=value2&amp;parameter2=value\",\n  \"cookies\": [\n    \"cookie1\",\n    \"cookie2\"\n  ],\n  \"headers\": {\n    \"header1\": \"value1\",\n    \"header2\": \"value1,value2\"\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1,value2\",\n    \"parameter2\": \"value\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"&lt;urlid&gt;\",\n    \"authorizer\": {\n      \"iam\": {\n        \"accessKey\": \"AKIA...\",\n        \"accountId\": \"111122223333\",\n        \"callerId\": \"AIDA...\",\n        \"userArn\": \"arn:aws:iam::111122223333:user/example-user\",\n        \"userId\": \"AIDA...\"\n      }\n    },\n    \"domainName\": \"&lt;url-id&gt;.lambda-url.us-west-2.on.aws\",\n    \"domainPrefix\": \"&lt;url-id&gt;\",\n    \"http\": {\n      \"method\": \"POST\",\n      \"path\": \"/my/path\",\n      \"protocol\": \"HTTP/1.1\",\n      \"sourceIp\": \"123.123.123.123\",\n      \"userAgent\": \"agent\"\n    },\n    \"requestId\": \"id\",\n    \"time\": \"12/Mar/2020:19:03:58 +0000\",\n    \"timeEpoch\": 1583348638390\n  },\n  \"body\": \"Hello from client!\",\n  \"isBase64Encoded\": false\n}\n</code></pre>"},{"location":"function-url/#response","title":"Response","text":"<pre><code>{\n   \"statusCode\": 201,\n    \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"My-Custom-Header\": \"Custom Value\"\n    },\n    \"body\": \"{ \\\"message\\\": \\\"Hello, world!\\\" }\",\n    \"cookies\": [\n        \"Cookie_1=Value1; Expires=21 Oct 2021 07:48 GMT\",\n        \"Cookie_2=Value2; Max-Age=78000\"\n    ],\n    \"isBase64Encoded\": false\n}\n</code></pre>"},{"location":"function-url/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Go - LambdaFunctionURLRequest typing - Go <code>github.com/aws/aws-lambda-go/events</code></li> </ul>"},{"location":"function-url/#documention","title":"Documention","text":"<ul> <li>Blog: AWS Lambda Function URLs: Built-in HTTPS Endpoints for Single-Function Microservices</li> <li>Blog: AWS Lambda: function URL is live! - By Yan Cui</li> </ul>"},{"location":"http-api-custom-authorizer/","title":"API Gateway Http Authorizer","text":"<p>You use a Lambda authorizer to use a Lambda function to control access to your HTTP API. Then, when a client calls your API, API Gateway invokes your Lambda function. API Gateway uses the response from your Lambda function to determine whether the client can access your API.</p> <p>Event driven, synchronous.</p>"},{"location":"http-api-custom-authorizer/#limits","title":"Limits","text":"<ul> <li>Authorizers per API limit of 10, but can be increased.</li> <li>Audiences per authorizer of 50, and can not be increased.</li> </ul>"},{"location":"http-api-custom-authorizer/#request","title":"Request","text":""},{"location":"http-api-custom-authorizer/#api-gateway-authorizer-request-event-format-10","title":"API Gateway Authorizer Request Event Format 1.0","text":"<p>Same as API Gateway Rest Authorizer - Request</p> <pre><code>{\n  \"version\": \"1.0\",\n  \"type\": \"REQUEST\",\n  \"methodArn\": \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\",\n  \"identitySource\": \"user1,123\",\n  \"authorizationToken\": \"user1,123\",\n  \"resource\": \"/request\",\n  \"path\": \"/request\",\n  \"httpMethod\": \"GET\",\n  \"headers\": {\n    \"X-AMZ-Date\": \"20170718T062915Z\",\n    \"Accept\": \"*/*\",\n    \"HeaderAuth1\": \"headerValue1\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"User-Agent\": \"...\"\n  },\n  \"queryStringParameters\": {\n    \"QueryString1\": \"queryValue1\"\n  },\n  \"pathParameters\": {},\n  \"stageVariables\": {\n    \"StageVar1\": \"stageValue1\"\n  },\n  \"requestContext\": {\n    \"path\": \"/request\",\n    \"accountId\": \"123456789012\",\n    \"resourceId\": \"05c7jb\",\n    \"stage\": \"test\",\n    \"requestId\": \"...\",\n    \"identity\": {\n      \"apiKey\": \"...\",\n      \"sourceIp\": \"...\",\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"resourcePath\": \"/request\",\n    \"httpMethod\": \"GET\",\n    \"apiId\": \"abcdef123\"\n  }\n}\n</code></pre>"},{"location":"http-api-custom-authorizer/#api-gateway-authorizer-request-event-format-20","title":"API Gateway Authorizer Request Event Format 2.0","text":"<pre><code>{\n  \"version\": \"2.0\",\n  \"type\": \"REQUEST\",\n  \"routeArn\": \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\",\n  \"identitySource\": [\n    \"user1\",\n    \"123\"\n  ],\n  \"routeKey\": \"$default\",\n  \"rawPath\": \"/my/path\",\n  \"rawQueryString\": \"parameter1=value1&amp;parameter1=value2&amp;parameter2=value\",\n  \"cookies\": [\n    \"cookie1\",\n    \"cookie2\"\n  ],\n  \"headers\": {\n    \"Header1\": \"value1\",\n    \"Header2\": \"value2\"\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1,value2\",\n    \"parameter2\": \"value\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"api-id\",\n    \"authentication\": {\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n    \"domainPrefix\": \"id\",\n    \"http\": {\n      \"method\": \"POST\",\n      \"path\": \"/my/path\",\n      \"protocol\": \"HTTP/1.1\",\n      \"sourceIp\": \"IP\",\n      \"userAgent\": \"agent\"\n    },\n    \"requestId\": \"id\",\n    \"routeKey\": \"$default\",\n    \"stage\": \"$default\",\n    \"time\": \"12/Mar/2020:19:03:58 +0000\",\n    \"timeEpoch\": 1583348638390\n  },\n  \"pathParameters\": {\n    \"parameter1\": \"value1\"\n  },\n  \"stageVariables\": {\n    \"stageVariable1\": \"value1\",\n    \"stageVariable2\": \"value2\"\n  }\n}\n</code></pre>"},{"location":"http-api-custom-authorizer/#response","title":"Response","text":""},{"location":"http-api-custom-authorizer/#iam-policy","title":"IAM Policy","text":"<pre><code>{\n  \"principalId\": \"abcdef\", // The principal user identification associated with the token sent by the client.\n  \"policyDocument\": {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": \"execute-api:Invoke\",\n        \"Effect\": \"Allow|Deny\",\n        \"Resource\": \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\"\n      }\n    ]\n  },\n  \"context\": {\n    \"exampleKey\": \"exampleValue\"\n  }\n}\n</code></pre>"},{"location":"http-api-custom-authorizer/#simple-response","title":"Simple response","text":"<pre><code>{\n  \"isAuthorized\": true/false,\n  \"context\": {\n    \"exampleKey\": \"exampleValue\"\n  }\n}\n</code></pre>"},{"location":"http-api-custom-authorizer/#resources","title":"Resources","text":"<ul> <li>Python - APIGatewayAuthorizerEventV2</li> </ul>"},{"location":"http-api-custom-authorizer/#code-examples","title":"Code examples","text":"<pre><code>from aws_lambda_powertools.utilities.data_classes import event_source\nfrom aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import (\n    APIGatewayAuthorizerEventV2,\n    APIGatewayAuthorizerResponseV2,\n)\nfrom secrets import compare_digest\n\n\ndef get_user_by_token(token):\n    if compare_digest(token, \"Foo\"):\n        return {\"name\": \"Foo\"}\n    return None\n\n\n@event_source(data_class=APIGatewayAuthorizerEventV2)\ndef handler(event: APIGatewayAuthorizerEventV2, context):\n    user = get_user_by_token(event.get_header_value(\"x-token\"))\n\n    if user is None:\n        # No user was found, so we return not authorized\n        return APIGatewayAuthorizerResponseV2().asdict()\n\n    # Found the user and setting the details in the context\n    return APIGatewayAuthorizerResponseV2(authorize=True, context=user).asdict()\n</code></pre>"},{"location":"http-api-custom-authorizer/#documentation","title":"Documentation","text":"<ul> <li>Working with AWS Lambda authorizers for HTTP APIs</li> <li>Introducing IAM and Lambda authorizers for Amazon API Gateway HTTP APIs</li> </ul>"},{"location":"http-api/","title":"API Gateway V2 - Http API","text":"<p>Amazon API Gateway invokes your function synchronously with an event that contains a JSON representation of the HTTP request.</p> <p>Event driven, synchronously invokes</p>"},{"location":"http-api/#limits","title":"Limits","text":"<p>Lambda specific hard limitations</p> <ul> <li>Payload limit of 6mb for the Lambda</li> <li>Maximum timeout of 30 seconds</li> </ul> NOTE: General limits and differents from Rest API <p>Large things missing IMO is <code>AWS X-Ray</code>, <code>Usage Plans</code> and <code>API Keys</code></p> <ul> <li>Choosing between HTTP APIs and REST APIs</li> <li>HTTP API quotas</li> </ul>"},{"location":"http-api/#request","title":"Request","text":""},{"location":"http-api/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>requestContext.requestId</code></p>"},{"location":"http-api/#generating-sample-events","title":"Generating sample events","text":"<p>Via AWS SAM CLI you can generate sample events</p> <pre><code>sam local generate-event apigateway http-api-proxy\n</code></pre>"},{"location":"http-api/#request-stucture-format-20","title":"Request Stucture format 2.0","text":"<p>Note</p> <p>Format 2.0 doesn't have <code>multiValueHeaders</code> or <code>multiValueQueryStringParameters</code> fields. Duplicate headers are combined with commas and included in the headers field. Duplicate query strings are combined with commas and included in the queryStringParameters field.</p> <p>Format 2.0 includes a new cookies field. All cookie headers in the request are combined with commas and added to the cookies field. In the response to the client, each cookie becomes a set-cookie header.</p> Http api format 2.0<pre><code>{\n  \"version\": \"2.0\",\n  \"routeKey\": \"$default\",\n  \"rawPath\": \"/my/path\",\n  \"rawQueryString\": \"parameter1=value1&amp;parameter1=value2&amp;parameter2=value\",\n  \"cookies\": [\n    \"cookie1\",\n    \"cookie2\"\n  ],\n  \"headers\": {\n    \"Header1\": \"value1\",\n    \"Header2\": \"value1,value2\"\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1,value2\",\n    \"parameter2\": \"value\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"api-id\",\n    \"authentication\": {\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"authorizer\": {\n      \"jwt\": {\n        \"claims\": {\n          \"claim1\": \"value1\",\n          \"claim2\": \"value2\"\n        },\n        \"scopes\": [\n          \"scope1\",\n          \"scope2\"\n        ]\n      }\n    },\n    \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n    \"domainPrefix\": \"id\",\n    \"http\": {\n      \"method\": \"POST\",\n      \"path\": \"/my/path\",\n      \"protocol\": \"HTTP/1.1\",\n      \"sourceIp\": \"192.168.0.1/32\",\n      \"userAgent\": \"agent\"\n    },\n    \"requestId\": \"id\",\n    \"routeKey\": \"$default\",\n    \"stage\": \"$default\",\n    \"time\": \"12/Mar/2020:19:03:58 +0000\",\n    \"timeEpoch\": 1583348638390\n  },\n  \"body\": \"{\\\"message\\\": \\\"hello world\\\", \\\"username\\\": \\\"tom\\\"}\",\n  \"pathParameters\": {\n    \"parameter1\": \"value1\"\n  },\n  \"isBase64Encoded\": false,\n  \"stageVariables\": {\n    \"stageVariable1\": \"value1\",\n    \"stageVariable2\": \"value2\"\n  }\n}\n</code></pre>"},{"location":"http-api/#request-stucture-format-10","title":"Request Stucture format 1.0","text":"Note <p>This is the same format as API Gateway V1 - Rest API</p> Http api format 1.0<pre><code>{\n  \"version\": \"1.0\",\n  \"resource\": \"/my/path\",\n  \"path\": \"/my/path\",\n  \"httpMethod\": \"GET\",\n  \"headers\": {\n    \"header1\": \"value1\",\n    \"header2\": \"value2\"\n  },\n  \"multiValueHeaders\": {\n    \"header1\": [\n      \"value1\"\n    ],\n    \"header2\": [\n      \"value1\",\n      \"value2\"\n    ]\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1\",\n    \"parameter2\": \"value\"\n  },\n  \"multiValueQueryStringParameters\": {\n    \"parameter1\": [\n      \"value1\",\n      \"value2\"\n    ],\n    \"parameter2\": [\n      \"value\"\n    ]\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"id\",\n    \"authorizer\": {\n      \"claims\": null,\n      \"scopes\": null\n    },\n    \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n    \"domainPrefix\": \"id\",\n    \"extendedRequestId\": \"request-id\",\n    \"httpMethod\": \"GET\",\n    \"identity\": {\n      \"accessKey\": null,\n      \"accountId\": null,\n      \"caller\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"cognitoAuthenticationType\": null,\n      \"cognitoIdentityId\": null,\n      \"cognitoIdentityPoolId\": null,\n      \"principalOrgId\": null,\n      \"sourceIp\": \"IP\",\n      \"user\": null,\n      \"userAgent\": \"user-agent\",\n      \"userArn\": null,\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"path\": \"/my/path\",\n    \"protocol\": \"HTTP/1.1\",\n    \"requestId\": \"id=\",\n    \"requestTime\": \"04/Mar/2020:19:15:17 +0000\",\n    \"requestTimeEpoch\": 1583349317135,\n    \"resourceId\": null,\n    \"resourcePath\": \"/my/path\",\n    \"stage\": \"$default\"\n  },\n  \"pathParameters\": null,\n  \"stageVariables\": null,\n  \"body\": \"Hello from Lambda!\",\n  \"isBase64Encoded\": false\n}\n</code></pre>"},{"location":"http-api/#response","title":"Response","text":"<p>Common response fields</p> <code>isBase64Encoded</code> (Boolean, defaults as false) Whether the response body is a base64 encoded string <code>statusCode</code> (Int, required) The http response code <code>headers</code> (Object) Map of http headers <code>body</code> (String) Response body Base64 encoded response example<pre><code>{\n    \"isBase64Encoded\": true,\n    \"statusCode\": 200,\n    \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"Content-Encoding\": \"gzip\"\n    },\n    \"body\": \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\"\n}\n</code></pre>"},{"location":"http-api/#response-for-format-20","title":"Response for format 2.0","text":"<p>Format 2.0 specific fields, a replacement for <code>multiValueHeaders</code> from format 1.0</p> <code>cookies</code> (Array of strings) Dedeicated field for cookies  Lambda function response for format 2.0<pre><code>{\n    \"cookies\" : [\"cookie1\", \"cookie2\"],\n    \"isBase64Encoded\": true|false,\n    \"statusCode\": httpStatusCode,\n    \"headers\": { \"headername\": \"headervalue\", ... },\n    \"body\": \"Hello from Lambda!\"\n}\n</code></pre>"},{"location":"http-api/#response-for-format-10","title":"Response for format 1.0","text":"<p>Format 1.0 specific fields</p> <code>multiValueHeaders</code> (Object) Can be optionally included, useful for sending cookies with multiple <code>Set-Cookie</code> header Lambda function response for format 1.0<pre><code>{\n    \"isBase64Encoded\": true|false,\n    \"statusCode\": httpStatusCode,\n    \"headers\": { \"headername\": \"headervalue\", ... },\n    \"multiValueHeaders\": { \"headername\": [\"headervalue\", \"headervalue2\", ...], ... },\n    \"body\": \"...\"\n}\n</code></pre>"},{"location":"http-api/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Python - data class and parser - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - api-gateway-proxy.d.ts - NPM <code>@types/aws-lambda</code></li> <li>Go - ApiGatewayEvent typing - Go <code>github.com/aws/aws-lambda-go/events</code></li> <li>DoNet - APIGatewayEvents data classes - NuGet <code>Amazon.Lambda.APIGatewayEvents</code></li> <li>Rust - apigw/mod.rs traits - Cargo <code>aws_lambda_events</code></li> <li>Java - APIGatewayV2HTTPEvent data classes - Maven <code>aws-lambda-java-events</code></li> <li>PHP - typing - Composer <code>bref/bref</code></li> </ul> <p>Event Handlers by Language</p> <ul> <li>AWS Lambda Powertools Python - APIGatewayHttpResolver</li> <li>PHP Bref for webapps</li> <li>Java - Serverless Java container - Makes it easy to run Java applications written with frameworks such as Spring, Spring Boot, Apache Struts, Jersey, or Spark in AWS Lambda</li> <li>AWS Lambda Adapter - A tool to run any web applications on AWS Lambda. Written in Rust.</li> </ul>"},{"location":"http-api/#code-examples","title":"Code examples","text":"<p>Example handler for API Gateway V2 (Http API), payload format v2</p> example on how we can handle the /hello path.<pre><code>from aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools.event_handler import APIGatewayHttpResolver\n\ntracer = Tracer()\nlogger = Logger()\napp = APIGatewayHttpResolver()\n\n@app.get(\"/hello\")\n@tracer.capture_method\ndef get_hello_universe():\n    return {\"message\": \"hello universe\"}\n\n# You can continue to use other utilities just as before\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_HTTP)\n@tracer.capture_lambda_handler\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n</code></pre>"},{"location":"http-api/#documention","title":"Documention","text":"<ul> <li>Working with AWS Lambda proxy integrations for HTTP APIs</li> <li>Using AWS Lambda with Amazon API Gateway</li> </ul>"},{"location":"iot-events/","title":"IOT Events","text":""},{"location":"iot-events/#request","title":"Request","text":"<pre><code>{\n  \"event: \":{\n    \"eventName\": \"myChargedEvent\",\n    \"eventTime\": 1567797571647,\n    \"payload\":{\n      \"detector\":{\n         \"detectorModelName\": \"AWS_IoTEvents_Hello_World1567793458261\",\n         \"detectorModelVersion\": \"4\",\n         \"keyValue\": \"100009\"\n      },\n      \"eventTriggerDetails\":{\n         \"triggerType\": \"Message\",\n         \"inputName\": \"AWS_IoTEvents_HelloWorld_VoltageInput\",\n         \"messageId\": \"64c75a34-068b-4a1d-ae58-c16215dc4efd\"\n      },\n      \"actionExecutionId\": \"49f0f32f-1209-38a7-8a76-d6ca49dd0bc4\",\n      \"state\":{\n         \"variables\": {},\n         \"stateName\": \"Charged\",\n         \"timers\": {}\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"iot-events/#response","title":"Response","text":"<pre><code>{\n    \"Statement\": \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iotevents.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\"\n}\n</code></pre>"},{"location":"iot-events/#resources","title":"Resources","text":""},{"location":"iot-events/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with AWS IoT Events</li> </ul>"},{"location":"iot/","title":"IOT","text":""},{"location":"iot/#request","title":"Request","text":"<pre><code>{\n    \"row\" : \"10\",\n    \"pos\" : \"23\",\n    \"moisture\" : \"75\"\n}\n</code></pre>"},{"location":"iot/#response","title":"Response","text":"<pre><code>{\n    \"Statement\": \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iot.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\"\n}\n</code></pre>"},{"location":"iot/#resources","title":"Resources","text":""},{"location":"iot/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with AWS IoT</li> </ul>"},{"location":"kinesis-firehose/","title":"Kinesis Data Firehose","text":"<p>Event-driven, synchronous invocation. Kinesis Data Firehose can invoke your Lambda function to transform incoming source data and deliver the transformed data to destinations.</p> <p>Kinesis Data Firehose is a streaming ETL solution. It is the easiest way to load streaming data into data stores and analytics tools. It can capture, transform, and load streaming data into Amazon S3, Amazon Redshift, Amazon OpenSearch Service, and Splunk, enabling near real-time analytics with existing business intelligence tools and dashboards you\u2019re already using today. It is a fully managed service that automatically scales to match the throughput of your data and requires no ongoing administration. It can also batch, compress, and encrypt the data before loading it, minimizing the amount of storage used at the destination and increasing security.</p>"},{"location":"kinesis-firehose/#limits","title":"Limits","text":"<ul> <li>Kinesis Data Firehose supports a Lambda invocation time of up to 5 minutes.</li> </ul>"},{"location":"kinesis-firehose/#request","title":"Request","text":""},{"location":"kinesis-firehose/#request-example","title":"Request Example","text":"Example Amazon Kinesis Data Firehose message event<pre><code>{\n  \"invocationId\": \"invoked123\",\n  \"deliveryStreamArn\": \"aws:lambda:events\",\n  \"region\": \"us-west-2\",\n  \"records\": [\n    {\n      \"data\": \"SGVsbG8gV29ybGQ=\",\n      \"recordId\": \"record1\",\n      \"approximateArrivalTimestamp\": 1510772160000,\n      \"kinesisRecordMetadata\": {\n        \"shardId\": \"shardId-000000000000\",\n        \"partitionKey\": \"4d1ad2b9-24f8-4b9d-a088-76e9947c317a\",\n        \"approximateArrivalTimestamp\": \"2012-04-23T18:25:43.511Z\",\n        \"sequenceNumber\": \"49546986683135544286507457936321625675700192471156785154\",\n        \"subsequenceNumber\": \"\"\n      }\n    },\n    {\n      \"data\": \"SGVsbG8gV29ybGQ=\",\n      \"recordId\": \"record2\",\n      \"approximateArrivalTimestamp\": 151077216000,\n      \"kinesisRecordMetadata\": {\n        \"shardId\": \"shardId-000000000001\",\n        \"partitionKey\": \"4d1ad2b9-24f8-4b9d-a088-76e9947c318a\",\n        \"approximateArrivalTimestamp\": \"2012-04-23T19:25:43.511Z\",\n        \"sequenceNumber\": \"49546986683135544286507457936321625675700192471156785155\",\n        \"subsequenceNumber\": \"\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"kinesis-firehose/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>invocationId</code></p>"},{"location":"kinesis-firehose/#generating-sample-events","title":"Generating sample events","text":"<pre><code># To get the list of supported events to generate\nsam local generate-event kinesis\n# Various other events generated via SAM CLI\nsam local generate-event kinesis kinesis-firehose\nsam local generate-event kinesis streams-as-source\nsam local generate-event kinesis syslog\nsam local generate-event kinesis apachelog\n</code></pre>"},{"location":"kinesis-firehose/#response","title":"Response","text":""},{"location":"kinesis-firehose/#response-fields","title":"Response Fields","text":"<code>recordId</code> (String) The record ID is passed from Kinesis Data Analytics to Lambda during the invocation. The transformed record must contain the same record ID. Any mismatch between the ID of the original record and the ID of the transformed record is treated as a data preprocessing failure. <code>result</code> (String) The status of the data transformation of the record. The possible values are: <ul> <li><code>Ok</code>: The record was transformed successfully. Kinesis Data Analytics ingests the record for SQL processing.</li> <li><code>Dropped</code>: The record was dropped intentionally by your processing logic. Kinesis Data Analytics drops the record from SQL processing. The data payload field is optional for a Dropped record.</li> <li><code>ProcessingFailed</code>: The record could not be transformed. Kinesis Data Analytics considers it unsuccessfully processed by your Lambda function and writes an error to the error stream. For more information about the error stream, see Error Handling. The data payload field is optional for a ProcessingFailed record.</li> </ul> <code>data</code> (String) The transformed data payload, after base64-encoding. Each data payload can contain multiple JSON documents if the application ingestion data format is JSON. Or each can contain multiple CSV rows (with a row delimiter specified in each row) if the application ingestion data format is CSV. The Kinesis Data Analytics service successfully parses and processes data with either multiple JSON documents or CSV rows within the same data payload. <code>metadata</code> (Object, Optional) Optional used for dynamic partitioning containing <code>partitionKeys</code> map."},{"location":"kinesis-firehose/#response-example","title":"Response Example","text":"<pre><code>{\n  \"records\": [\n    {\n      \"recordId\": \"49572672223665514422805246926656954630972486059535892482\",\n      \"result\": \"Ok\",\n      \"data\": \"SEVMTE8gV09STEQ=\",\n      \"metadata\": {\n        \"partitionKeys\": {\n          \"customerId\": \"customerId\",\n          \"year\": \"2017\",\n          \"month\": \"01\",\n          \"date\": \"01\",\n          \"hour\": \"01\",\n          \"minute\": \"01\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"kinesis-firehose/#resources","title":"Resources","text":"<ul> <li>TypeScript - FirehoseTransformationEvent - NPM <code>@types/aws-lambda</code></li> <li>DotNet - KinesisFirehoseEvent - NuGet <code>Amazon.Lambda.KinesisFirehoseEvents</code></li> <li>Java - KinesisFirehoseEvent</li> <li>Go - KinesisFirehoseEvent</li> </ul> <p>AWS Samples</p> <ul> <li>aws-serverless-stream-ingest-transform-load</li> </ul>"},{"location":"kinesis-firehose/#code-examples","title":"Code Examples","text":"<pre><code>public class Function\n{\n\n    public KinesisFirehoseResponse FunctionHandler(KinesisFirehoseEvent evnt, ILambdaContext context)\n    {\n        context.Logger.LogLine($\"InvocationId: {evnt.InvocationId}\");\n        context.Logger.LogLine($\"DeliveryStreamArn: {evnt.DeliveryStreamArn}\");\n        context.Logger.LogLine($\"Region: {evnt.Region}\");\n\n        var response = new KinesisFirehoseResponse\n        {\n            Records = new List&lt;KinesisFirehoseResponse.FirehoseRecord&gt;()\n        };\n\n        foreach (var record in evnt.Records)\n        {\n            context.Logger.LogLine($\"\\tRecordId: {record.RecordId}\");\n            context.Logger.LogLine($\"\\t\\tApproximateArrivalEpoch: {record.ApproximateArrivalEpoch}\");\n            context.Logger.LogLine($\"\\t\\tApproximateArrivalTimestamp: {record.ApproximateArrivalTimestamp}\");\n            context.Logger.LogLine($\"\\t\\tData: {record.DecodeData()}\");\n\n            // Transform data: For example ToUpper the data\n            var transformedRecord = new KinesisFirehoseResponse.FirehoseRecord\n            {\n                RecordId = record.RecordId,\n                Result = KinesisFirehoseResponse.TRANSFORMED_STATE_OK                    \n            };\n            transformedRecord.EncodeData(record.DecodeData().ToUpperInvariant());\n\n            response.Records.Add(transformedRecord);\n        }\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"kinesis-firehose/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon Kinesis Data Firehose</li> <li>Preprocessing Data Using a Lambda Function</li> <li>Blog - Amazon Kinesis Firehose Data Transformation with AWS Lambda</li> <li>Amazon Kinesis Data Firehose Data Transformation</li> <li>Dynamic Partitioning in Kinesis Data Firehose</li> <li>Blog - Kinesis Data Firehose now supports dynamic partitioning to Amazon S3</li> </ul>"},{"location":"kinesis-streams/","title":"Kinesis Data Streams","text":"<p>Lambda reads records from the data stream and invokes your function synchronously with an event that contains stream records.</p> <p>Amazon Kinesis Data Streams is a fully managed streaming data service. You can continuously add various types of data such as clickstreams, application logs, and social media to a Kinesis stream from hundreds of thousands of sources.</p> TIP: Kinesis streams vs firehose <p>Read AWS Kinesis Data Streams vs Kinesis Data Firehose for when to use Kinesis streams vs Kinesis Data Firehose.</p>"},{"location":"kinesis-streams/#request","title":"Request","text":""},{"location":"kinesis-streams/#request-fields","title":"Request fields","text":"<p><code>Records</code> - An array of records.</p> <code>awsRegion</code> (String) AWS region where the event originated eg: us-east-1 <code>eventID</code> (String) A globally unique identifier for the event that was recorded in this stream record. <code>eventName</code> (String) Event type eg: aws:kinesis:record <code>eventSource</code> (String) The AWS service from which the Kinesis event originated. For Kinesis, this is aws:kinesis <code>eventSourceARN</code> (String) The Amazon Resource Name (ARN) of the event source <code>eventVersion</code> (String) The eventVersion key value contains a major and minor version in the form .. <code>invokeIdentityArn</code> (String) The ARN for the identity used to invoke the Lambda function <code>kinesis</code> (Object) Kinesis payload <ul> <li><code>approximateArrivalTimestamp</code> (Number) - The approximate time that the record was inserted into the stream</li> <li><code>data</code> (String) - The data contained in the record</li> <li><code>kinesisSchemaVersion</code> (String) - The version of the Kinesis data record format</li> <li><code>partitionKey</code> (String) - The partition key of the record</li> <li><code>sequenceNumber</code> (String) - The sequence number of the record</li> </ul>"},{"location":"kinesis-streams/#request-example","title":"Request Example","text":"<pre><code>{\n  \"Records\": [\n    {\n      \"kinesis\": {\n        \"kinesisSchemaVersion\": \"1.0\",\n        \"partitionKey\": \"1\",\n        \"sequenceNumber\": \"49590338271490256608559692538361571095921575989136588898\",\n        \"data\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n        \"approximateArrivalTimestamp\": 1545084650.987\n      },\n      \"eventSource\": \"aws:kinesis\",\n      \"eventVersion\": \"1.0\",\n      \"eventID\": \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\",\n      \"eventName\": \"aws:kinesis:record\",\n      \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-role\",\n      \"awsRegion\": \"us-east-2\",\n      \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\"\n    },\n    {\n      \"kinesis\": {\n        \"kinesisSchemaVersion\": \"1.0\",\n        \"partitionKey\": \"1\",\n        \"sequenceNumber\": \"49590338271490256608559692540925702759324208523137515618\",\n        \"data\": \"VGhpcyBpcyBvbmx5IGEgdGVzdC4=\",\n        \"approximateArrivalTimestamp\": 1545084711.166\n      },\n      \"eventSource\": \"aws:kinesis\",\n      \"eventVersion\": \"1.0\",\n      \"eventID\": \"shardId-000000000006:49590338271490256608559692540925702759324208523137515618\",\n      \"eventName\": \"aws:kinesis:record\",\n      \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-role\",\n      \"awsRegion\": \"us-east-2\",\n      \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\"\n    }\n  ]\n}\n</code></pre>"},{"location":"kinesis-streams/#response","title":"Response","text":"Reporting batch item failures<pre><code>{\n   \"batchItemFailures\":[\n      {\n         \"itemIdentifier\":\"&lt;id&gt;\"\n      }\n   ]\n}\n</code></pre>"},{"location":"kinesis-streams/#resources","title":"Resources","text":"<p>Typing by language</p> <ul> <li>PHP - KinesisEvent - Composer <code>bref/bref</code></li> <li>Python - KinesisEvent - Pip <code>aws-lambda-powertools</code></li> <li>Rust - KinesisEvent - Cargo <code>aws-lambda-events</code></li> <li>Java - KinesisEvent - Maven <code>aws-lambda-java-events</code></li> <li>Typescript - KinesisEvent - NPM <code>@types/aws-lambda</code></li> <li>Go - KinesisEvent - <code>github.com/aws/aws-lambda-go/events</code></li> </ul> <p>Handlers by language</p> <ul> <li>Python - BatchProcessor - Pip <code>aws-lambda-powertools</code></li> <li>Ruby - kinesis_event - GEM <code>jets</code></li> <li>Python - on_kinesis_record - Pip <code>chalice</code></li> </ul>"},{"location":"kinesis-streams/#code-examples","title":"Code Examples","text":"Batch Processing via AWS Lambda Powertools<pre><code>import json\n\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.utilities.batch import BatchProcessor, EventType, batch_processor\nfrom aws_lambda_powertools.utilities.data_classes.kinesis_stream_event import KinesisStreamRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\nprocessor = BatchProcessor(event_type=EventType.KinesisDataStreams)\ntracer = Tracer()\nlogger = Logger()\n\n\n@tracer.capture_method\ndef record_handler(record: KinesisStreamRecord):\n    logger.info(record.kinesis.data_as_text)\n    payload: dict = record.kinesis.data_as_json()\n    ...\n\n@logger.inject_lambda_context\n@tracer.capture_lambda_handler\n@batch_processor(record_handler=record_handler, processor=processor)\ndef lambda_handler(event, context: LambdaContext):\n    return processor.response()\n</code></pre>"},{"location":"kinesis-streams/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon Kinesis</li> </ul>"},{"location":"lambda-context/","title":"Lambda Context","text":"<p>When Lambda runs your function, it passes a context object to the handler. This object provides methods and properties that provide information about the invocation, function, and execution environment.</p> Note <p>During asynchronous invokes, the Lambda context field <code>clientContext</code> will not be populated.</p>"},{"location":"lambda-context/#docs","title":"Docs","text":"<ul> <li>DotNet - Lambda Context Docs</li> <li>Python - Lambda Context Docs</li> <li>Go - Lambda Context Docs</li> <li>Java - Lambda Context Docs</li> <li>NodeJS - Lambda Context Docs</li> </ul>"},{"location":"lambda-context/#resources","title":"Resources","text":"<ul> <li>DotNet - ILambdaContext - NuGet <code>Amazon.Lambda.Core</code></li> <li>Java - Context - Maven <code>aws-lambda-java-core</code></li> <li>Python - LambdaContext - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - Context - NPM <code>@types/aws-lambda</code></li> <li>Go - LambdaContext - Go <code>github.com/aws/aws-lambda-go/lambdacontext</code></li> <li>Rust - Context - Cargo <code>aws-lambda-rust-runtime</code></li> <li>Php - Bref\\Context - Composer <code>bref/bref</code></li> </ul>"},{"location":"lambda-invoke-types/","title":"Lambda Invocation Types","text":""},{"location":"lambda-invoke-types/#synchronous-invokes","title":"Synchronous Invokes","text":"<p>Synchronous invocations are the most straight forward way to invoke your Lambda functions. In this model, your functions execute immediately when you perform the Lambda Invoke API call. For testing, when invoking directly use invoke type of <code>RequestResponse</code>.</p>"},{"location":"lambda-invoke-types/#asynchronous-invokes","title":"Asynchronous Invokes","text":"<p>Asynchronous invokes place your invoke request in Lambda service queue and we process the requests as they arrive. For testing, when invoking directly use invoke type of <code>Event</code>.</p> Note <p>During asynchronous invokes, the Lambda context field <code>clientContext</code> will not be populated.</p>"},{"location":"lambda-invoke-types/#poll-based-invokes","title":"Poll-Based Invokes","text":"<p>AWS will manage the poller on your behalf and perform Synchronous invokes of your function with this type of integration. The retry behavior for this model is based on data expiration in the data source.</p> <ul> <li>Understanding the Different Ways to Invoke Lambda Functions</li> </ul>"},{"location":"lambda-lifecycle/","title":"Lambda Lifecycle","text":""},{"location":"lambda-lifecycle/#init","title":"Init","text":"<p>In the <code>Init</code> phase, Lambda performs three tasks:</p> <ul> <li>Start all extensions (<code>Extension init</code>)</li> <li>Bootstrap the runtime (<code>Runtime init</code>)</li> <li>Run the function's static code (<code>Function init</code>)</li> </ul> <p>The <code>Init</code> phase ends when the runtime and all extensions signal that they are ready by sending a <code>Next</code> API request. The <code>Init</code> phase is limited to 10 seconds. If all three tasks do not complete within 10 seconds, Lambda retries the <code>Init</code> phase at the time of the first function invocation.</p>"},{"location":"lambda-lifecycle/#invoke","title":"Invoke","text":"<p>When a Lambda function is invoked in response to a <code>Next</code> API request, Lambda sends an <code>Invoke</code> event to the runtime and to each extension.</p> <p>The function's timeout setting limits the duration of the entire <code>Invoke</code> phase.</p>"},{"location":"lambda-lifecycle/#shutdown","title":"Shutdown","text":"<p>When Lambda is about to shut down the runtime, it sends a <code>Shutdown</code> event to the runtime and to each external extension. Extensions can use this time for final cleanup tasks. The <code>Shutdown</code> event is a response to a <code>Next</code> API request.</p> <p>Duration: The entire Shutdown phase is capped at 2 seconds. If the runtime or any extension does not respond, Lambda terminates it via a signal (<code>SIGKILL</code>).</p>"},{"location":"lambda-lifecycle/#documentation","title":"Documentation","text":"<ul> <li>AWS Lambda execution environment</li> <li>Lambda Cold Starts and Bootstrap Code</li> <li>When is the Lambda Init Phase Free, and when is it Billed?</li> </ul>"},{"location":"lambda-resources/","title":"General Resources","text":"<p>Some general resources around AWS Lambda event requests and responses.</p>"},{"location":"lambda-resources/#libraries-by-language","title":"Libraries by language","text":"<p>List of general resources that could be used with all AWS Lambda by language.</p> <ul> <li>Python - AWS Lambda Powertools</li> <li>Java - AWS Lambda Powertools</li> <li>Bref - Php - php runtime and libraries</li> <li>Go - AWS Lambda for Go - Event typing, Libraries, samples, and tools to help Go developers develop AWS Lambda functions.</li> <li>Typescript - AWS Lambda Powertools</li> <li>Typescript - @types/aws-lambda - NPM <code>@types/aws-lambda</code></li> <li>Rust - aws-lambda-rust-runtime - runtime and framework and will soon include <code>aws_lambda_events</code></li> <li>Rust - aws_lambda_events - structs for most Lambda events</li> <li>Ruby - Jets - Ruby Serverless Framework </li> </ul>"},{"location":"lambda-resources/#lambda-shareable-test-events","title":"Lambda shareable test events","text":"<p>With AWS Lambda Shareable test events you can now share test events with other AWS Lambda developers.</p> <p>Installing the cli <code>publish-shared-event</code> tool.</p> <p>Recommended to install via pipx, see the pipx installation guide for more.:</p> <pre><code>pipx install aws-lambda-publish-shared-event\n</code></pre> <p>Examples of running the cli tool.</p> Generate test eventInteractive exampleList of cognito user pull eventsUsing CLI arguments <p>Generates a new local test event:</p> <pre><code>generate-test-event ses/ses.json &gt; event.json\n</code></pre> <p>Running as an interactive cli tool:</p> <pre><code>$ publish-shared-event\nLambda Name: &lt;Full Lambda Name&gt;\nSelect Event:\n* alb/alb.json\n    alexa/alex-smart-home-skill-v1.json\n    alexa/alex-smart-home-skill-v3.json\n    amazon-config/amazon-config.json\n    ...\n</code></pre> <p>Listing all the cognito user pull events:</p> <pre><code>$ publish-shared-event --filtered-list cognito-user\nFiltered list of supported event sources:\ncognito-user-pool/create-auth-challenge.json\ncognito-user-pool/custom-email-sender.json\ncognito-user-pool/custom-message.json\ncognito-user-pool/define-auth-challenge.json\ncognito-user-pool/post-authentication.json\ncognito-user-pool/post-confirmation.json\ncognito-user-pool/pre-authentication.json\ncognito-user-pool/pre-signup.json\ncognito-user-pool/pre-token-generation.json\ncognito-user-pool/user-migration.json\ncognito-user-pool/verify-auth-challenge-response.json\n</code></pre> <p>Publishing a <code>ses/ses.json</code> test event as a shareable event for the Lambda function named <code>full-lambda-name</code></p> <pre><code>publish-shared-event -e ses/ses.json -f full-lambda-name -r us-east-1\n</code></pre>"},{"location":"lambda-security/","title":"Lambda Layers of Defense","text":"<p>DRAFT: Methods, Ideas, Practices to improve your Lambda's security / reliability</p> <p>You are responsible for maintaining control over your content that is hosted on this infrastructure.</p>"},{"location":"lambda-security/#event-sources","title":"Event Sources","text":"<p>You can protect your lambda handles at the event source level, and avoid lambda invokation where possible.</p>"},{"location":"lambda-security/#synch-flow-api-gw-appsync","title":"Synch flow (API GW, AppSync)","text":"<ul> <li> <p>Event source can authorize requests</p> <ul> <li>rest/http - Standard AWS IAM roles and policies</li> <li>rest - cognito</li> <li>http - jwt</li> <li>graphql - oidc</li> <li>rest/http/graphql - custom</li> <li>rest - IAM tags to control access)</li> <li>rest/http - mutual TLS authentication</li> <li>rest/graphql - x-api-key</li> </ul> </li> <li> <p>Event source can only be available within a VPC</p> </li> <li> <p>Event source can limit by sourceIp or VPC </p> <ul> <li>Controlling access to an API with API Gateway resource policies</li> </ul> </li> </ul> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"execute-api:Invoke\",\n            \"Resource\": \"arn:aws:execute-api:region:account-id:*\"\n        },\n        {\n            \"Effect\": \"Deny\",\n            \"Principal\": \"*\",\n            \"Action\": \"execute-api:Invoke\",\n            \"Resource\": \"arn:aws:execute-api:region:account-id:*\",\n            \"Condition\": {\n                \"NotIpAddress\": {\n                    \"aws:SourceIp\": \"123.4.5.6/24\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li> <p>Event source can be linked to a waf (AWS Shield, AWS WAF) or cdn (CloudFront)</p> </li> <li> <p>Event source can add usage limits and throttling per api client per endpoint</p> </li> <li> <p>Event source can include request validation</p> </li> </ul> <pre><code>flowchart LR\n    Client &lt;--&gt; id1(Event Source) &lt;--&gt; id2(Lambda Service) &lt;--&gt; id3(Lambda Function) &lt;--&gt; id4(Down Stream)</code></pre>"},{"location":"lambda-security/#asynch-flow-s3-eventbridge","title":"Asynch flow (S3, EventBridge)","text":"<ul> <li>Event source can do batching</li> <li>Event source can have filtering</li> </ul> <pre><code>flowchart LR\n    Client --&gt; id1(Event Source) --&gt; id5(Requests) &lt;--&gt; id2(Lambda Service) &lt;--&gt; id3(Lambda Function) &lt;--&gt; id4(Down Stream)</code></pre>"},{"location":"lambda-security/#asynch-flow-dynamodb","title":"Asynch flow (Dynamodb)","text":"<ul> <li>Updates can be filtered</li> <li>Updates can be sent to EventBridge to further filtering</li> </ul> <pre><code>flowchart LR\n    Client --&gt; id1(Event Source) --&gt; id5(Changes) &lt;--&gt; id2(Lambda Service) &lt;--&gt; id3(Lambda Function) &lt;--&gt; id4(Down Stream)</code></pre>"},{"location":"lambda-security/#ideas-to-be-documented","title":"Ideas to be documented","text":"<ul> <li> <p>Data protection in AWS Lambda</p> <ul> <li><code>Encryption in transit</code> - Lambda API endpoints only support secure connections over HTTPS.</li> <li><code>Encryption at rest</code> - On a per-function basis, you can configure Lambda to use a customer managed key to encrypt your environment variables. Conterary to the AWS docs, i would not recommended using environments variables for secrets, but rather secret manager (or parameter store). Lambda always encrypts files that you upload to Lambda, including deployment packages and layer archives. Amazon CloudWatch Logs and AWS X-Ray also encrypt data by default.</li> </ul> </li> <li> <p>\"Identity and access management for Lambda\" - least priviledge</p> <ul> <li>Identity and access management for Lambda</li> <li>IAM condition key, lambda:SourceFunctionArn - \"This capability allows you to implement advanced security controls for the AWS API calls taken by your Lambda function code. For example, you can write conditional policies using the new lambda:SourceFunctionArn together with existing condition keys such as aws:SourceIP or aws:SourceVPC to grant permissions to AWS API calls only if those originate from inside the customer\u2019s VPC.\"</li> <li>Working with Lambda execution environment credentials</li> </ul> </li> </ul> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"ExampleSourceFunctionArn\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:PutObject\",\n            \"Resource\": \"arn:aws:s3:::lambda_bucket/*\",\n            \"Condition\": {\n                \"ArnEquals\": {\n                    \"lambda:SourceFunctionArn\": \"arn:aws:lambda:us-east-1:123456789012:function:source_lambda\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li> <p>\"Compliance validation for AWS Lambda\"</p> <ul> <li>SOC1, SOC2, SOC3, PCI, FedRAMP, HIPAA, ISMAP etc..</li> <li>AWS Services in Scope by Compliance Program</li> <li>AWS Artifact</li> </ul> </li> <li> <p>Resilience in AWS Lambda</p> <ul> <li>High availability - AWS Lambda is always multi-az within a region</li> <li>Retries - Async execution have built in retries (Ensure lambdas has idempotency support)</li> <li>Dead-letter queue or distinations allow for failed async executions to be recovered</li> </ul> </li> <li> <p>\"Managed runtimes\"</p> <ul> <li>AWS will patch a managed runtime like python3.9 or nodejs16.x</li> </ul> </li> <li> <p>\"Limiting concurrency\" / \"Throttling\"</p> <ul> <li>Creating and using usage plans with API keys</li> <li>Lambda function scaling</li> </ul> </li> <li> <p>\"Authentication\"</p> <ul> <li>JWT, Cognito, OIDC, IAM should be in place where applicable.</li> <li>All calls should be authorized (using x-api-key can allow for public apis to have throttling and other controls)</li> </ul> </li> <li> <p>\"Input / Output validation\"</p> <ul> <li>Docs Enable request validation in API Gateway</li> <li>Example API Gateway data validation</li> </ul> </li> <li> <p>\"VPC\"</p> <ul> <li>Configuring a Lambda function to access resources in a VPC</li> </ul> </li> <li> <p>\"Observability\" (Logging, Metrics, Tracing)</p> <ul> <li>Powertools Tracer</li> <li>Powertools Structured logging</li> <li>Powertools Metrics</li> </ul> </li> <li> <p>\"Event sourcing\" - Locking down the event source</p> <ul> <li>Limit what can call your lambda function example below for API GW</li> </ul> </li> </ul> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"default\",\n  \"Statement\": [\n    {\n      \"Sid\": \"nodejs-apig-functiongetEndpointPermissionProd-BWDBXMPLXE2F\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"apigateway.amazonaws.com\"\n      },\n      \"Action\": \"lambda:InvokeFunction\",\n      \"Resource\": \"arn:aws:lambda:us-east-2:111122223333:function:nodejs-apig-function-1G3MXMPLXVXYI\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:SourceAccount\": \"111122223333\"\n        },\n        \"ArnLike\": {\n          \"aws:SourceArn\": \"arn:aws:execute-api:us-east-2:111122223333:ktyvxmpls1/prodStage/GET/image\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <ul> <li> <p>Patching library dependencies</p> <ul> <li>Snyk \u2013 Commercial Vulnerability DB and Dependency Check</li> </ul> </li> <li> <p>Static code analysis (code complexity, code style, code quality, security, etc ...)</p> </li> <li> <p>Lambda versioning and aliases</p> <ul> <li>Can help enable blue/green deployments</li> <li>Perform a canary-based deployment using the blue/green strategy and AWS Lambda</li> <li>Implementing Canary Deployments of AWS Lambda Functions with Alias Traffic Shifting</li> </ul> </li> <li> <p>Idempotency (best practices)</p> </li> <li> <p>Code Signing</p> <ul> <li>Code Signing, a Trust and Integrity Control for AWS Lambda</li> </ul> </li> <li> <p>Secrets management</p> <ul> <li>No hard coding of secrets and use SST where possible</li> <li>Monitor AWS Secrets Manager secrets</li> <li>Deploy Serverless Applications with AWS Lambda and API Gateway</li> </ul> </li> <li> <p>Limit function to single use case, keep code simple and small</p> </li> <li> <p>Validate input / output via Jmepath / Pydantic</p> <ul> <li>Using framework code like Pydantic or JMESchema</li> </ul> </li> </ul>"},{"location":"lambda-security/#resources","title":"Resources","text":"<ul> <li>Security Overview of AWS Lambda</li> <li>Security pillar</li> <li>aws-serverless-security-workshop</li> <li>Input Validation Cheat Sheet</li> <li>lumigo - AWS Lambda Security</li> </ul>"},{"location":"lex-v2/","title":"Amazon Lex V2","text":"<p>Event-driven and synchronous invocation. Amazon Lex V2 uses one Lambda function per bot alias per language instead of one Lambda function for each intent. To use an individual function for each intent, the Lambda function router section provides a function that you can use.</p>"},{"location":"lex-v2/#request","title":"Request","text":""},{"location":"lex-v2/#requst-schema","title":"Requst schema","text":"<p>Event fields notes:</p> <code>invocationSource</code> Indicates the action that called the Lambda function. When the source is DialogCodeHook, the Lambda function was called after input from the user.When the source is FulfillmentCodeHook the Lambda function was called after all required slots have been filled and the intent is ready for fulfillment. <code>inputTranscript</code>: The text that was used to process the input from the user. For text or DTMF input, this is the text that the user typed. For speech input, this is the text that was recognized from the speech. <code>interpretations</code> One or more intents that Amazon Lex V2 considers possible matches to the user's utterance. For more information, see Interpretation. <code>proposedNextState</code> The next state of the dialog between the user and the bot if the Lambda function doesn't change the flow. For more information, see proposedNextState structure. <code>requestAttributes</code> Request-specific attributes that the client sends in the request. Use request attributes to pass information that doesn't need to persist for the entire session. <code>sessionState</code> The current state of the conversation between the user and your Amazon Lex V2 bot. For more information about the session state, see SessionState. <code>transcriptions</code> one or more transcriptions that Amazon Lex V2 considers possible matches to the user's audio utterance. For more information, see Using voice transcription confidence scores. Lex V2 schema<pre><code>{\n    \"messageVersion\": \"1.0\",\n    \"invocationSource\": \"DialogCodeHook | FulfillmentCodeHook\",\n    \"inputMode\": \"DTMF | Speech | Text\",\n    \"responseContentType\": \"CustomPayload | ImageResponseCard | PlainText | SSML\",\n    \"sessionId\": \"string\",\n    \"inputTranscript\": \"string\",\n    \"bot\": {\n        \"id\": \"string\",\n\n        \"name\": \"string\",\n        \"aliasId\": \"string\",\n        \"localeId\": \"string\",\n        \"version\": \"string\"\n    },\n    \"interpretations\": [\n        {\n            \"intent\": {\n\n                \"confirmationState\": \"Confirmed | Denied | None\",\n                \"name\": \"string\",\n                \"slots\": {\n                    \"string\": {\n                        \"value\": {\n                            \"interpretedValue\": \"string\",\n                            \"originalValue\": \"string\",\n                            \"resolvedValues\": [\n                                \"string\"\n                            ]\n                        }\n                    },\n                    \"string\": {\n                        \"shape\": \"List\",\n                        \"value\": {\n                            \"interpretedValue\": \"string\",\n                            \"originalValue\": \"string\",\n                            \"resolvedValues\": [\n                                \"string\"\n                            ]\n                        },\n                        \"values\": [\n                            {\n\n                                \"shape\": \"Scalar\",\n                                \"value\": {\n                                    \"originalValue\": \"string\",\n                                    \"interpretedValue\": \"string\",\n                                    \"resolvedValues\": [\n                                        \"string\"\n                                    ]\n                                }\n                            },\n                            {\n\n                                \"shape\": \"Scalar\",\n                                \"value\": {\n\n                                    \"originalValue\": \"string\",\n                                    \"interpretedValue\": \"string\",\n                                    \"resolvedValues\": [\n                                        \"string\"\n                                    ]\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"state\": \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\",\n                \"kendraResponse\": {\n                    // Only present when intent is KendraSearchIntent. For details, see \n                    // https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html#API_Query_ResponseSyntax\n                }\n            },\n            \"nluConfidence\": {\n                \"score\": number\n            },\n            \"sentimentResponse\": {\n\n                \"sentiment\": \"string\",\n                \"sentimentScore\": {\n                    \"mixed\": number,\n                    \"negative\": number,\n                    \"neutral\": number,\n                    \"positive\": number\n                }\n            }\n        }\n    ],\n    \"proposedNextState\": {\n        \"dialogAction\": {\n            \"slotToElicit\": \"string\",\n            \"type\": \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\"\n        },\n        \"intent\": {\n            \"name\": \"string\",\n            \"confirmationState\": \"Confirmed | Denied | None\",\n            \"slots\": {},\n            \"state\": \"Failed | Fulfilled | InProgress | ReadyForFulfillment | Waiting\"\n        }\n    },\n    \"requestAttributes\": {\n        \"string\": \"string\"\n\n    },\n    \"sessionState\": {\n        \"activeContexts\": [\n            {\n                \"name\": \"string\",\n                \"contextAttributes\": {\n                    \"string\": \"string\"\n                },\n                \"timeToLive\": {\n                    \"timeToLiveInSeconds\": number,\n                    \"turnsToLive\": number\n                }\n            }\n        ],\n        \"sessionAttributes\": {\n            \"string\": \"string\"\n        },\n        \"runtimeHints\": {\n            \"slotHints\": {\n                \"string\": {\n                    \"string\": {\n                        \"runtimeHintValues\": [\n                            {\n                                \"phrase\": \"string\"\n                            },\n                            {\n                                \"phrase\": \"string\"\n                            }\n                        ]\n                    }\n                }\n            }\n        },\n        \"dialogAction\": {\n            \"slotToElicit\": \"string\",\n            \"type\": \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\"\n        },\n        \"intent\": {\n            \"confirmationState\": \"Confirmed | Denied | None\",\n            \"name\": \"string\",\n            \"slots\": {\n                \"string\": {\n                    \"value\": {\n                        \"interpretedValue\": \"string\",\n                        \"originalValue\": \"string\",\n                        \"resolvedValues\": [\n                            \"string\"\n                        ]\n                    }\n                },\n                \"string\": {\n                    \"shape\": \"List\",\n                    \"value\": {\n                        \"interpretedValue\": \"string\",\n                        \"originalValue\": \"string\",\n\n                        \"resolvedValues\": [\n                            \"string\"\n\n                        ]\n                    },\n                    \"values\": [\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"interpretedValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n\n                                ]\n                            }\n                        },\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"interpretedValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"state\": \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\",\n            \"kendraResponse\": {\n                // Only present when intent is KendraSearchIntent. For details, see\n                // https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html#API_Query_ResponseSyntax                     }\n            },\n            \"originatingRequestId\": \"string\"\n        }\n    },\n    \"transcriptions\": [\n        {\n            \"transcription\": \"string\",\n            \"transcriptionConfidence\": {\n                \"score\": \"number\"\n            },\n            \"resolvedContext\": {\n                \"intent\": \"string\"\n            },\n            \"resolvedSlots\": {\n                \"string\": {\n                    \"shape\": \"List\",\n                    \"value\": {\n                        \"originalValue\": \"string\",\n                        \"resolvedValues\": [\n                            \"string\"\n                        ]\n                    },\n                    \"values\": [\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n                                ]\n                            }\n                        },\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"lex-v2/#request-examples","title":"Request examples","text":"Banking bot: CheckBalance<pre><code>{\n  \"sessionId\": \"254688924456798\",\n  \"inputTranscript\": \"01/01/1990\",\n  \"interpretations\": [\n    {\n      \"intent\": {\n        \"slots\": {\n          \"dateofBirth\": {\n            \"shape\": \"Scalar\",\n            \"value\": {\n              \"originalValue\": \"01/01/1990\",\n              \"resolvedValues\": [\n                \"1990-01-01\"\n              ],\n              \"interpretedValue\": \"1990-01-01\"\n            }\n          },\n          \"accountType\": {\n            \"shape\": \"Scalar\",\n            \"value\": {\n              \"originalValue\": \"savings\",\n              \"resolvedValues\": [\n                \"Savings\"\n              ],\n              \"interpretedValue\": \"Savings\"\n            }\n          }\n        },\n        \"confirmationState\": \"None\",\n        \"name\": \"CheckBalance\",\n        \"state\": \"ReadyForFulfillment\"\n      },\n      \"nluConfidence\": 1\n    },\n    {\n      \"intent\": {\n        \"slots\": {},\n        \"confirmationState\": \"None\",\n        \"name\": \"FallbackIntent\",\n        \"state\": \"ReadyForFulfillment\"\n      }\n    },\n    {\n      \"intent\": {\n        \"slots\": {},\n        \"confirmationState\": \"None\",\n        \"name\": \"Welcome\",\n        \"state\": \"ReadyForFulfillment\"\n      },\n      \"nluConfidence\": 0.23\n    }\n  ],\n  \"responseContentType\": \"text/plain; charset=utf-8\",\n  \"sessionState\": {\n    \"sessionAttributes\": {},\n    \"activeContexts\": [],\n    \"intent\": {\n      \"slots\": {\n        \"dateofBirth\": {\n          \"shape\": \"Scalar\",\n          \"value\": {\n            \"originalValue\": \"01/01/1990\",\n            \"resolvedValues\": [\n              \"1990-01-01\"\n            ],\n            \"interpretedValue\": \"1990-01-01\"\n          }\n        },\n        \"accountType\": {\n          \"shape\": \"Scalar\",\n          \"value\": {\n            \"originalValue\": \"savings\",\n            \"resolvedValues\": [\n              \"Savings\"\n            ],\n            \"interpretedValue\": \"Savings\"\n          }\n        }\n      },\n      \"confirmationState\": \"None\",\n      \"name\": \"CheckBalance\",\n      \"state\": \"ReadyForFulfillment\"\n    },\n    \"originatingRequestId\": \"f57dfc3f-44be-4df9-ae72-9681fc14e67f\"\n  },\n  \"messageVersion\": \"1.0\",\n  \"invocationSource\": \"FulfillmentCodeHook\",\n  \"transcriptions\": [\n    {\n      \"transcription\": \"01/01/1990\",\n      \"transcriptionConfidence\": 1,\n      \"resolvedSlots\": {\n        \"dateofBirth\": {\n          \"shape\": \"Scalar\",\n          \"value\": {\n            \"originalValue\": \"01/01/1990\",\n            \"resolvedValues\": [\n              \"1990-01-01\"\n            ]\n          }\n        }\n      },\n      \"resolvedContext\": {\n        \"intent\": \"CheckBalance\"\n      }\n    }\n  ],\n  \"inputMode\": \"Text\",\n  \"bot\": {\n    \"aliasName\": \"TestBotAlias\",\n    \"aliasId\": \"TSTALIASID\",\n    \"name\": \"BankingBot\",\n    \"version\": \"DRAFT\",\n    \"localeId\": \"en_US\",\n    \"id\": \"J866BA0UQC\"\n  }\n}\n</code></pre>"},{"location":"lex-v2/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event lex-v2 banking-bot\nsam local generate-event lex-v2 book-car\nsam local generate-event lex-v2 book-hotel\n</code></pre>"},{"location":"lex-v2/#response","title":"Response","text":""},{"location":"lex-v2/#response-schema","title":"Response schema","text":"Lex V2 response schema<pre><code>{\n    \"sessionState\": {\n        \"activeContexts\": [\n            {\n                \"name\": \"string\",\n                \"contextAttributes\": {\n                    \"key\": \"value\"\n                },\n                \"timeToLive\": {\n                    \"timeToLiveInSeconds\": number,\n                    \"turnsToLive\": number\n                }\n            }\n        ],\n        \"sessionAttributes\": {\n            \"string\": \"string\"\n        },\n        \"runtimeHints\": {\n            \"slotHints\": {\n                \"string\": { \n                    \"string\": { \n                        \"runtimeHintValues\": [\n                            {\n                                \"phrase\": \"string\"\n                            },\n                            {\n                                \"phrase\": \"string\"\n                            }\n                        ]\n                    }\n                }\n            } \n        },\n        \"dialogAction\": {\n            \"slotElicitationStyle\": \"Default | SpellByLetter | SpellByWord\",\n            \"slotToElicit\": \"string\",\n            \"type\": \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\"\n        },\n        \"intent\": {\n            \"confirmationState\": \"Confirmed | Denied | None\",\n            \"name\": \"string\",\n            \"slots\": {\n                \"string\": {\n                    \"value\": {\n                        \"interpretedValue\": \"string\",\n                        \"originalValue\": \"string\",\n                        \"resolvedValues\": [\n                            \"string\"\n                        ]\n                    }\n                },\n                \"string\": {\n                    \"shape\": \"List\",\n                    \"value\": {\n                        \"originalValue\": \"string\",\n                        \"interpretedValue\": \"string\",\n                        \"resolvedValues\": [\n                            \"string\"\n                        ]\n                    },\n                    \"values\": [\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"interpretedValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n                                ]\n                            }\n                        },\n                        {\n                            \"shape\": \"Scalar\",\n                            \"value\": {\n                                \"originalValue\": \"string\",\n                                \"interpretedValue\": \"string\",\n                                \"resolvedValues\": [\n                                    \"string\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"state\": \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\"\n        }\n    },\n    \"messages\": [\n        {\n            \"contentType\": \"CustomPayload | ImageResponseCard | PlainText | SSML\",\n            \"content\": \"string\",\n            \"imageResponseCard\": {\n                \"title\": \"string\",\n\n                \"subtitle\": \"string\",\n                \"imageUrl\": \"string\",\n                \"buttons\": [\n\n                    {\n                        \"text\": \"string\",\n                        \"value\": \"string\"\n                    }\n                ]\n            }\n        }\n    ],\n    \"requestAttributes\": {\n        \"string\": \"string\"\n    }\n}\n</code></pre>"},{"location":"lex-v2/#resources","title":"Resources","text":"<p>AWS Solution using Lex V2</p> <ul> <li>A Question and Answer Bot Using Amazon Lex and Amazon Alexa</li> </ul> <p>Typed Lambda handlers by Language</p> <ul> <li>Typescript - LexV2Event - NPM package <code>@types/aws-lambda</code></li> </ul>"},{"location":"lex-v2/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon Lex V2</li> <li>Creating a BankingBot on Amazon Lex V2 Console with support for English and Spanish</li> <li>Hands On: Create a BankingBot with support for English and Spanish on the Amazon Lex V2 console</li> </ul>"},{"location":"lex/","title":"Amazon Lex","text":"<p>The Amazon Lex bot invokes your Lambda function synchronously.</p>"},{"location":"lex/#request","title":"Request","text":""},{"location":"lex/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event lex book-car\nsam local generate-event lex book-hotel\nsam local generate-event lex make-appointment\nsam local generate-event lex order-flowers\n</code></pre>"},{"location":"lex/#request-structure","title":"Request structure","text":"<pre><code>{\n  \"currentIntent\": {\n    \"name\": \"intent-name\",\n    \"nluIntentConfidenceScore\": score,\n    \"slots\": {\n      \"slot name\": \"value\",\n      \"slot name\": \"value\"\n    },\n    \"slotDetails\": {\n      \"slot name\": {\n        \"resolutions\" : [\n          { \"value\": \"resolved value\" },\n          { \"value\": \"resolved value\" }\n        ],\n        \"originalValue\": \"original text\"\n      },\n      \"slot name\": {\n        \"resolutions\" : [\n          { \"value\": \"resolved value\" },\n          { \"value\": \"resolved value\" }\n        ],\n        \"originalValue\": \"original text\"\n      }\n    },\n    \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n  },\n  \"alternativeIntents\": [\n    {\n      \"name\": \"intent-name\",\n      \"nluIntentConfidenceScore\": score,\n      \"slots\": {\n        \"slot name\": \"value\",\n        \"slot name\": \"value\"\n      },\n      \"slotDetails\": {\n        \"slot name\": {\n          \"resolutions\" : [\n            { \"value\": \"resolved value\" },\n            { \"value\": \"resolved value\" }\n          ],\n          \"originalValue\": \"original text\"\n        },\n        \"slot name\": {\n          \"resolutions\" : [\n            { \"value\": \"resolved value\" },\n            { \"value\": \"resolved value\" }\n          ],\n          \"originalValue\": \"original text\"\n        }\n      },\n      \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n    }\n  ],\n  \"bot\": {\n    \"name\": \"bot name\",\n    \"alias\": \"bot alias\",\n    \"version\": \"bot version\"\n  },\n  \"userId\": \"User ID specified in the POST request to Amazon Lex.\",\n  \"inputTranscript\": \"Text used to process the request\",\n  \"invocationSource\": \"FulfillmentCodeHook or DialogCodeHook\",\n  \"outputDialogMode\": \"Text or Voice, based on ContentType request header in runtime API request\",\n  \"messageVersion\": \"1.0\",\n  \"sessionAttributes\": { \n     \"key\": \"value\",\n     \"key\": \"value\"\n  },\n  \"requestAttributes\": { \n     \"key\": \"value\",\n     \"key\": \"value\"\n  },\n  \"recentIntentSummaryView\": [\n    {\n        \"intentName\": \"Name\",\n        \"checkpointLabel\": Label,\n        \"slots\": {\n          \"slot name\": \"value\",\n          \"slot name\": \"value\"\n        },\n        \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\",\n        \"dialogActionType\": \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\",\n        \"fulfillmentState\": \"Fulfilled or Failed\",\n        \"slotToElicit\": \"Next slot to elicit\"\n    }\n  ],\n   \"sentimentResponse\": { \n      \"sentimentLabel\": \"sentiment\",\n      \"sentimentScore\": \"score\"\n   },\n   \"kendraResponse\": {\n       Complete query response from Amazon Kendra\n   },\n   \"activeContexts\": [\n        {\n            \"timeToLive\": {\n                \"timeToLiveInSeconds\": seconds,\n                \"turnsToLive\": turns\n            },\n            \"name\": \"name\",\n            \"parameters\": {\n                \"key name\": \"value\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"lex/#example-event","title":"Example event","text":"Example order flowers<pre><code>{\n  \"messageVersion\": \"1.0\",\n  \"invocationSource\": \"FulfillmentCodeHook\",\n  \"userId\": \"ABCD1234\",\n  \"sessionAttributes\": { \n     \"key1\": \"value1\",\n     \"key2\": \"value2\",\n  },\n  \"bot\": {\n    \"name\": \"OrderFlowers\",\n    \"alias\": \"prod\",\n    \"version\": \"1\"\n  },\n  \"outputDialogMode\": \"Text\",\n  \"currentIntent\": {\n    \"name\": \"OrderFlowers\",\n    \"slots\": {\n      \"FlowerType\": \"lilies\",\n      \"PickupDate\": \"2030-11-08\",\n      \"PickupTime\": \"10:00\"\n    },\n    \"confirmationStatus\": \"Confirmed\"\n  }\n}\n</code></pre>"},{"location":"lex/#response","title":"Response","text":""},{"location":"lex/#response-event-structure","title":"Response Event structure","text":"Event Structure<pre><code>{\n  \"sessionAttributes\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n    ...\n  },\n  \"recentIntentSummaryView\": [\n    {\n       \"intentName\": \"Name\",\n       \"checkpointLabel\": \"Label\",\n       \"slots\": {\n         \"slot name\": \"value\",\n         \"slot name\": \"value\"\n        },\n       \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\",\n        \"dialogActionType\": \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\",\n        \"fulfillmentState\": \"Fulfilled or Failed\",\n        \"slotToElicit\": \"Next slot to elicit\"\n    }\n  ],\n  \"activeContexts\": [\n     {\n       \"timeToLive\": {\n          \"timeToLiveInSeconds\": seconds,\n          \"turnsToLive\": turns\n      },\n      \"name\": \"name\",\n      \"parameters\": {\n        \"key name\": \"value\"\n      }\n    }\n  ],\n  \"dialogAction\": {\n    \"type\": \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\",\n    Full structure based on the type field. See below for details.\n  }\n}\n</code></pre>"},{"location":"lex/#resources","title":"Resources","text":"<ul> <li>Typescript - lex.d.ts - NPM <code>@types/aws-lambda</code></li> </ul>"},{"location":"lex/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon Lex</li> <li>Lambda Function Input Event and Response Format</li> <li>Create a Question and Answer Bot with Amazon Lex and Amazon Alexa - Now updated to use Lex V2</li> </ul>"},{"location":"mq/","title":"Amazon MQ","text":"<p>Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ, invokes the function synchronously</p>"},{"location":"mq/#request","title":"Request","text":""},{"location":"mq/#activemq","title":"ActiveMQ","text":"AWS MQ message event example<pre><code>{\n  \"eventSource\": \"aws:amq\",\n  \"eventSourceArn\": \"arn:aws:mq:us-west-2:112556298976:broker:test:b-9bcfa592-423a-4942-879d-eb284b418fc8\",\n  \"messages\": [\n    {\n      \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\",\n      \"messageType\": \"jms/text-message\",\n      \"data\": \"QUJDOkFBQUE=\",\n      \"connectionId\": \"myJMSCoID\",\n      \"redelivered\": false,\n      \"destination\": {\n        \"physicalname\": \"testQueue\"\n      },\n      \"timestamp\": 1598827811958,\n      \"brokerInTime\": 1598827811958,\n      \"brokerOutTime\": 1598827811959\n    },\n    {\n      \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\",\n      \"messageType\": \"jms/bytes-message\",\n      \"data\": \"3DTOOW7crj51prgVLQaGQ82S48k=\",\n      \"connectionId\": \"myJMSCoID1\",\n      \"persistent\": false,\n      \"destination\": {\n        \"physicalname\": \"testQueue\"\n      },\n      \"timestamp\": 1598827811958,\n      \"brokerInTime\": 1598827811958,\n      \"brokerOutTime\": 1598827811959\n    }\n  ]\n}\n</code></pre>"},{"location":"mq/#rabbitmq","title":"RabbitMQ","text":"<pre><code>{\n  \"eventSource\": \"aws:rmq\",\n  \"eventSourceArn\": \"arn:aws:mq:us-west-2:112556298976:broker:pizzaBroker:b-9bcfa592-423a-4942-879d-eb284b418fc8\",\n  \"rmqMessagesByQueue\": {\n    \"pizzaQueue::/\": [\n      {\n        \"basicProperties\": {\n          \"contentType\": \"text/plain\",\n          \"contentEncoding\": null,\n          \"headers\": {\n            \"header1\": {\n              \"bytes\": [\n                118,\n                97,\n                108,\n                117,\n                101,\n                49\n              ]\n            },\n            \"header2\": {\n              \"bytes\": [\n                118,\n                97,\n                108,\n                117,\n                101,\n                50\n              ]\n            },\n            \"numberInHeader\": 10\n          },\n          \"deliveryMode\": 1,\n          \"priority\": 34,\n          \"correlationId\": null,\n          \"replyTo\": null,\n          \"expiration\": \"60000\",\n          \"messageId\": null,\n          \"timestamp\": \"Jan 1, 1970, 12:33:41 AM\",\n          \"type\": null,\n          \"userId\": \"AIDACKCEVSQ6C2EXAMPLE\",\n          \"appId\": null,\n          \"clusterId\": null,\n          \"bodySize\": 80\n        },\n        \"redelivered\": false,\n        \"data\": \"eyJ0aW1lb3V0IjowLCJkYXRhIjoiQ1pybWYwR3c4T3Y0YnFMUXhENEUifQ==\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"mq/#response","title":"Response","text":""},{"location":"mq/#resources","title":"Resources","text":"<ul> <li>Python - Active MQ - PIP <code>aws-lambda-powertools</code></li> <li>Python - Rabbit MQ - PIP <code>aws-lambda-powertools</code></li> </ul>"},{"location":"mq/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with Amazon MQ</li> <li>Using Amazon MQ as an event source for AWS Lambda</li> </ul>"},{"location":"rest-api-custom-authorizer/","title":"API Gateway Rest Authorizer","text":"<p>A Lambda authorizer (formerly known as a custom authorizer) is an API Gateway feature that uses a Lambda function to control access to your API. </p> <p>Event driven and synchronous.</p>"},{"location":"rest-api-custom-authorizer/#request","title":"Request","text":""},{"location":"rest-api-custom-authorizer/#token-authorizer","title":"Token authorizer","text":"<code>methodArn</code> (String) ARN of the incoming method request and is populated by API Gateway in accordance with the Lambda authorizer configuration Token schema<pre><code>{\n    \"type\":\"TOKEN\",\n    \"authorizationToken\":\"{caller-supplied-token}\",\n    \"methodArn\":\"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\"\n}\n</code></pre> Example get call for token authorizer<pre><code>{\n    \"type\":\"TOKEN\",\n    \"authorizationToken\":\"allow\",\n    \"methodArn\":\"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/*/GET/\"\n}\n</code></pre> <ul> <li>Introducing custom authorizers in Amazon API Gateway</li> </ul>"},{"location":"rest-api-custom-authorizer/#request-authorizer","title":"Request authorizer","text":"<pre><code>{\n  \"type\": \"REQUEST\",\n  \"methodArn\": \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\",\n  \"resource\": \"/request\",\n  \"path\": \"/request\",\n  \"httpMethod\": \"GET\",\n  \"headers\": {\n    \"X-AMZ-Date\": \"20170718T062915Z\",\n    \"Accept\": \"*/*\",\n    \"HeaderAuth1\": \"headerValue1\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"User-Agent\": \"...\"\n  },\n  \"queryStringParameters\": {\n    \"QueryString1\": \"queryValue1\"\n  },\n  \"pathParameters\": {},\n  \"stageVariables\": {\n    \"StageVar1\": \"stageValue1\"\n  },\n  \"requestContext\": {\n    \"path\": \"/request\",\n    \"accountId\": \"123456789012\",\n    \"resourceId\": \"05c7jb\",\n    \"stage\": \"test\",\n    \"requestId\": \"...\",\n    \"identity\": {\n      \"apiKey\": \"...\",\n      \"sourceIp\": \"...\",\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"resourcePath\": \"/request\",\n    \"httpMethod\": \"GET\",\n    \"apiId\": \"abcdef123\"\n  }\n}\n</code></pre>"},{"location":"rest-api-custom-authorizer/#response","title":"Response","text":"Response schema<pre><code>{\n  \"principalId\": \"yyyyyyyy\", // The principal user identification associated with the token sent by the client.\n  \"policyDocument\": {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": \"execute-api:Invoke\",\n        \"Effect\": \"Allow|Deny\",\n        \"Resource\": \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\"\n      }\n    ]\n  },\n  \"context\": {\n    \"stringKey\": \"value\",\n    \"numberKey\": \"1\",\n    \"booleanKey\": \"true\"\n  },\n  \"usageIdentifierKey\": \"{api-key}\"\n}\n</code></pre> The example output contains a policy statement to block (Deny) calls to the GET method<pre><code>{\n  \"principalId\": \"user\",\n  \"policyDocument\": {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": \"execute-api:Invoke\",\n        \"Effect\": \"Deny\",\n        \"Resource\": \"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/dev/GET/\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"rest-api-custom-authorizer/#resources","title":"Resources","text":"<ul> <li>Amazon API Gateway - Custom Authorizer Blueprints for AWS Lambda</li> <li>Python - APIGatewayAuthorizerTokenEvent - pip <code>aws-lambda-powertools</code></li> <li>Typescript - APIGatewayTokenAuthorizerEvent</li> <li>Java - APIGatewayCustomAuthorizerEvent</li> </ul>"},{"location":"rest-api-custom-authorizer/#code-examples","title":"Code examples","text":"Token authorizer<pre><code>from aws_lambda_powertools.utilities.data_classes import event_source\nfrom aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import (\n    APIGatewayAuthorizerTokenEvent,\n    APIGatewayAuthorizerResponse,\n)\n\n\n@event_source(data_class=APIGatewayAuthorizerTokenEvent)\ndef handler(event: APIGatewayAuthorizerTokenEvent, context):\n    arn = event.parsed_arn\n\n    policy = APIGatewayAuthorizerResponse(\n        principal_id=\"user\",\n        region=arn.region,\n        aws_account_id=arn.aws_account_id,\n        api_id=arn.api_id,\n        stage=arn.stage\n    )\n\n    if event.authorization_token == \"42\":\n        policy.allow_all_routes()\n    else:\n        policy.deny_all_routes()\n    return policy.asdict()\n</code></pre> Request authorizer<pre><code>from aws_lambda_powertools.utilities.data_classes import event_source\nfrom aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import (\n    DENY_ALL_RESPONSE,\n    APIGatewayAuthorizerRequestEvent,\n    APIGatewayAuthorizerResponse,\n    HttpVerb,\n)\nfrom secrets import compare_digest\n\n\ndef get_user_by_token(token):\n    if compare_digest(token, \"admin-foo\"):\n        return {\"id\": 0, \"name\": \"Admin\", \"isAdmin\": True}\n    elif compare_digest(token, \"regular-foo\"):\n        return {\"id\": 1, \"name\": \"Joe\"}\n    else:\n        return None\n\n\n@event_source(data_class=APIGatewayAuthorizerRequestEvent)\ndef handler(event: APIGatewayAuthorizerRequestEvent, context):\n    user = get_user_by_token(event.get_header_value(\"Authorization\"))\n\n    if user is None:\n        # No user was found\n        # to return 401 - `{\"message\":\"Unauthorized\"}`, but pollutes Lambda error count metrics\n        # raise Exception(\"Unauthorized\")\n        # to return 403 - `{\"message\":\"Forbidden\"}`\n        return DENY_ALL_RESPONSE\n\n    # parse the `methodArn` as an `APIGatewayRouteArn`\n    arn = event.parsed_arn\n\n    # Create the response builder from parts of the `methodArn`\n    # and set the logged in user id and context\n    policy = APIGatewayAuthorizerResponse(\n        principal_id=user[\"id\"],\n        context=user,\n        region=arn.region,\n        aws_account_id=arn.aws_account_id,\n        api_id=arn.api_id,\n        stage=arn.stage,\n    )\n\n    # Conditional IAM Policy\n    if user.get(\"isAdmin\", False):\n        policy.allow_all_routes()\n    else:\n        policy.allow_route(HttpVerb.GET, \"/user-profile\")\n\n    return policy.asdict()\n</code></pre>"},{"location":"rest-api-custom-authorizer/#documentation","title":"Documentation","text":"<ul> <li>Use API Gateway Lambda authorizers</li> <li>The Complete Guide to Custom Authorizers with AWS Lambda and API Gateway</li> </ul>"},{"location":"rest-api/","title":"API Gateway Rest API","text":"<p>Events are sent synchronously to the Lambda function with a timeout of 30 seconds.</p>"},{"location":"rest-api/#limits","title":"Limits","text":"<p>Lambda specific hard limitations, see API Gateway quotas for configuring and running a REST API for other limits.</p> <ul> <li>Payload limit of 6mb for the Lambda</li> <li>Maximum timeout of 30 seconds</li> </ul>"},{"location":"rest-api/#request","title":"Request","text":"Tip <p>The input and out format matches API Gateway V2 - Http api format 1.0</p> <p>Http GET request example</p> Http GET request example<pre><code>{\n  \"resource\": \"/my/path\",\n  \"path\": \"/my/path\",\n  \"httpMethod\": \"GET\",\n  \"headers\": {\n    \"header1\": \"value1\",\n    \"header2\": \"value2\"\n  },\n  \"multiValueHeaders\": {\n    \"header1\": [\n      \"value1\"\n    ],\n    \"header2\": [\n      \"value1\",\n      \"value2\"\n    ]\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1\",\n    \"parameter2\": \"value\"\n  },\n  \"multiValueQueryStringParameters\": {\n    \"parameter1\": [\n      \"value1\",\n      \"value2\"\n    ],\n    \"parameter2\": [\n      \"value\"\n    ]\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"id\",\n    \"authorizer\": {\n      \"claims\": null,\n      \"scopes\": null\n    },\n    \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n    \"domainPrefix\": \"id\",\n    \"extendedRequestId\": \"request-id\",\n    \"httpMethod\": \"GET\",\n    \"identity\": {\n      \"accessKey\": null,\n      \"accountId\": null,\n      \"caller\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"cognitoAuthenticationType\": null,\n      \"cognitoIdentityId\": null,\n      \"cognitoIdentityPoolId\": null,\n      \"principalOrgId\": null,\n      \"sourceIp\": \"IP\",\n      \"user\": null,\n      \"userAgent\": \"user-agent\",\n      \"userArn\": null,\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"path\": \"/my/path\",\n    \"protocol\": \"HTTP/1.1\",\n    \"requestId\": \"id=\",\n    \"requestTime\": \"04/Mar/2020:19:15:17 +0000\",\n    \"requestTimeEpoch\": 1583349317135,\n    \"resourceId\": null,\n    \"resourcePath\": \"/my/path\",\n    \"stage\": \"$default\"\n  },\n  \"pathParameters\": null,\n  \"stageVariables\": null,\n  \"body\": \"Hello from Lambda!\",\n  \"isBase64Encoded\": false\n}\n</code></pre> <p>Http post request</p> Http post request<pre><code>{\n  \"body\": \"eyJ0ZXN0IjoiYm9keSJ9\",\n  \"resource\": \"/{proxy+}\",\n  \"path\": \"/path/to/resource\",\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"queryStringParameters\": {\n    \"foo\": \"bar\"\n  },\n  \"multiValueQueryStringParameters\": {\n    \"foo\": [\n      \"bar\"\n    ]\n  },\n  \"pathParameters\": {\n    \"proxy\": \"/path/to/resource\"\n  },\n  \"stageVariables\": {\n    \"baz\": \"qux\"\n  },\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch\",\n    \"Accept-Language\": \"en-US,en;q=0.8\",\n    \"Cache-Control\": \"max-age=0\",\n    \"CloudFront-Forwarded-Proto\": \"https\",\n    \"CloudFront-Is-Desktop-Viewer\": \"true\",\n    \"CloudFront-Is-Mobile-Viewer\": \"false\",\n    \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n    \"CloudFront-Is-Tablet-Viewer\": \"false\",\n    \"CloudFront-Viewer-Country\": \"US\",\n    \"Host\": \"1234567890.execute-api.us-east-1.amazonaws.com\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"Custom User Agent String\",\n    \"Via\": \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\",\n    \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n    \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n    \"X-Forwarded-Port\": \"443\",\n    \"X-Forwarded-Proto\": \"https\"\n  },\n  \"multiValueHeaders\": {\n    \"Accept\": [\n      \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\"\n    ],\n    \"Accept-Encoding\": [\n      \"gzip, deflate, sdch\"\n    ],\n    \"Accept-Language\": [\n      \"en-US,en;q=0.8\"\n    ],\n    \"Cache-Control\": [\n      \"max-age=0\"\n    ],\n    \"CloudFront-Forwarded-Proto\": [\n      \"https\"\n    ],\n    \"CloudFront-Is-Desktop-Viewer\": [\n      \"true\"\n    ],\n    \"CloudFront-Is-Mobile-Viewer\": [\n      \"false\"\n    ],\n    \"CloudFront-Is-SmartTV-Viewer\": [\n      \"false\"\n    ],\n    \"CloudFront-Is-Tablet-Viewer\": [\n      \"false\"\n    ],\n    \"CloudFront-Viewer-Country\": [\n      \"US\"\n    ],\n    \"Host\": [\n      \"0123456789.execute-api.us-east-1.amazonaws.com\"\n    ],\n    \"Upgrade-Insecure-Requests\": [\n      \"1\"\n    ],\n    \"User-Agent\": [\n      \"Custom User Agent String\"\n    ],\n    \"Via\": [\n      \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\"\n    ],\n    \"X-Amz-Cf-Id\": [\n      \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\"\n    ],\n    \"X-Forwarded-For\": [\n      \"127.0.0.1, 127.0.0.2\"\n    ],\n    \"X-Forwarded-Port\": [\n      \"443\"\n    ],\n    \"X-Forwarded-Proto\": [\n      \"https\"\n    ]\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"resourceId\": \"123456\",\n    \"stage\": \"prod\",\n    \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n    \"requestTime\": \"09/Apr/2015:12:34:56 +0000\",\n    \"requestTimeEpoch\": 1428582896000,\n    \"identity\": {\n      \"cognitoIdentityPoolId\": null,\n      \"accountId\": null,\n      \"cognitoIdentityId\": null,\n      \"caller\": null,\n      \"accessKey\": null,\n      \"sourceIp\": \"127.0.0.1\",\n      \"cognitoAuthenticationType\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"userArn\": null,\n      \"userAgent\": \"Custom User Agent String\",\n      \"user\": null\n    },\n    \"path\": \"/prod/path/to/resource\",\n    \"resourcePath\": \"/{proxy+}\",\n    \"httpMethod\": \"POST\",\n    \"apiId\": \"1234567890\",\n    \"protocol\": \"HTTP/1.1\"\n  }\n}\n</code></pre>"},{"location":"rest-api/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>requestContext.requestId</code></p>"},{"location":"rest-api/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event apigateway aws-proxy --body {\"test\":\"body\"} --path foo --method POST\nsam local generate-event apigateway aws-proxy --path foo --method GET\n</code></pre>"},{"location":"rest-api/#response","title":"Response","text":"<p>Output data structure</p> Output data structure<pre><code>{\n    \"isBase64Encoded\": true|false,\n    \"statusCode\": httpStatusCode,\n    \"headers\": { \"headerName\": \"headerValue\", ... },\n    \"multiValueHeaders\": { \"headerName\": [\"headerValue\", \"headerValue2\", ...], ... },\n    \"body\": \"...\"\n}\n</code></pre> <p>Rest api response example</p> Rest api response example<pre><code>{\n    \"statusCode\": 200,\n    \"headers\": {\n        \"Content-Type\": \"application/json\"\n    },\n    \"body\": \"{\\\"foo\\\": \\\"value\\\"}\",\n    \"isBase64Encoded\": false\n}\n</code></pre> <p>Base64 encoded response example</p> Base64 encoded response example<pre><code>{\n    \"statusCode\": 200,\n    \"headers\": {\n        \"Content-Type\": \"application/json\",\n        \"Content-Encoding\": \"gzip\"\n    },\n    \"body\": \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\",\n    \"isBase64Encoded\": true\n}\n</code></pre>"},{"location":"rest-api/#resources","title":"Resources","text":"<p>Typed Lambda handlers by Language</p> <ul> <li>Python - data class and parser - Pip <code>aws-lambda-powertools</code></li> <li>Typescript - api-gateway-proxy.d.ts - NPM <code>@types/aws-lambda</code></li> <li>Rust - apigw/mod.rs traits - Cargo <code>aws_lambda_events</code></li> <li>Go - ApiGatewayEvent typing - Crate <code>github.com/aws/aws-lambda-go/events</code></li> <li>Java - APIGatewayProxyRequestEvent data classes - Maven <code>aws-lambda-java-events</code></li> <li>PHP - typing - Composer <code>bref/bref</code></li> <li>DoNet - APIGatewayEvents data classes - NuGet <code>Amazon.Lambda.APIGatewayEvents</code></li> </ul> <p>Event Handlers by Language</p> <ul> <li>Chalice Python</li> <li>AWS Lambda Powertools Python</li> <li>PHP Bref for webapps</li> <li>Ruby - Routing - Gem <code>jets</code></li> <li>Java - Serverless Java container - Makes it easy to run Java applications written with frameworks such as Spring, Spring Boot, Apache Struts, Jersey, or Spark in AWS Lambda</li> <li>AWS Lambda Adapter - A tool to run any web applications on AWS Lambda. Written in Rust.</li> </ul>"},{"location":"rest-api/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon API Gateway</li> <li>Input format of a Lambda function for proxy integration</li> </ul>"},{"location":"s3-batch/","title":"S3 Batch Operations","text":"<p>When the batch job starts, Amazon S3 invokes the Lambda function synchronously for each object in the manifest. The event parameter includes the names of the bucket and the object.</p>"},{"location":"s3-batch/#request","title":"Request","text":"Example Amazon S3 batch request event<pre><code>{\n  \"invocationSchemaVersion\": \"1.0\",\n  \"invocationId\": \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\",\n  \"job\": {\n    \"id\": \"f3cc4f60-61f6-4a2b-8a21-d07600c373ce\"\n  },\n  \"tasks\": [\n    {\n      \"taskId\": \"dGFza2lkZ29lc2hlcmUK\",\n      \"s3Key\": \"customerImage1.jpg\",\n      \"s3VersionId\": \"1\",\n      \"s3BucketArn\": \"arn:aws:s3:us-east-1:0123456788:examplebucket\"\n    }\n  ]\n}\n</code></pre>"},{"location":"s3-batch/#response","title":"Response","text":"<code>resultCode</code> is the result of the Lambda function. <code>Succeeded</code>, <code>TemporaryFailure</code> or <code>PermanentFailure</code> Example Amazon S3 batch response<pre><code>{\n  \"invocationSchemaVersion\": \"1.0\",\n  \"treatMissingKeysAs\" : \"PermanentFailure\",\n  \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\",\n  \"results\": [\n    {\n      \"taskId\": \"dGFza2lkZ29lc2hlcmUK\",\n      \"resultCode\": \"Succeeded\",\n      \"resultString\": \"[\"Alice\", \"Bob\"]\"\n    }\n  ]\n}\n</code></pre>"},{"location":"s3-batch/#resources","title":"Resources","text":"<ul> <li>S3 Batch - Typescript - NPM <code>@types/aws-lambda</code></li> <li>S3 Batch - Go - <code>github.com/aws/aws-lambda-go/events</code></li> <li>S3BatchEvent - Java - Maven <code>aws-lambda-java-events</code></li> <li>S3BatchJobEvent - Crate <code>aws-lambda-events</code></li> <li>The <code>serverless-s3-batch</code> plugin is designed to make it easy to work with S3 Batch operations. NPM <code>serverless-s3-batch</code></li> </ul>"},{"location":"s3-batch/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon S3 batch operations</li> <li>S3 Batch - Invoke AWS Lambda function</li> <li>A Guide to S3 Batch on AWS</li> </ul>"},{"location":"s3-object-lambda/","title":"S3 Object Lambda","text":"<p>With S3 Object Lambda you can add your own code to S3 GET requests to modify and process data as it is returned to an application. Calls are made synchronously.</p>"},{"location":"s3-object-lambda/#request","title":"Request","text":""},{"location":"s3-object-lambda/#fields","title":"Fields","text":"<code>xAmzRequestId</code> (String) The Amazon S3 request ID for this request. We recommend that you log this value to help with debugging. <code>protocolVersion</code> (String) The version ID of the context provided. <code>getObjectContext</code> (Map) The input and output details for connections to Amazon S3 and S3 Object Lambda. <ul> <li><code>inputS3Url</code> - String - A pre-signed URL that can be used to fetch the original object from Amazon S3. The URL is signed using the original caller\u2019s identity, and their permissions will apply when the URL is used. If there are signed headers in the URL, the Lambda function must include these in the call to Amazon S3, except for the Host.</li> <li><code>outputRoute</code> - String - A routing token that is added to the S3 Object Lambda URL when the Lambda function calls <code>WriteGetObjectResponse</code>.</li> <li><code>outputToken</code> - String - An opaque token used by S3 Object Lambda to match the WriteGetObjectResponse call with the original caller.</li> </ul> <code>configuration</code> (Map) Configuration information about the S3 Object Lambda access point. <ul> <li><code>accessPointArn</code> - String - The Amazon Resource Name (ARN) of the S3 Object Lambda access point that received this request.</li> <li><code>supportingAccessPointArn</code> - String - The ARN of the supporting access point that is specified in the S3 Object Lambda access point configuration.</li> <li><code>payload</code> - String - Custom data that is applied to the S3 Object Lambda access point configuration. S3 Object Lambda treats this as an opaque string, so it might need to be decoded before use.</li> </ul> <code>userRequest</code> (Map) Information about the original call to S3 Object Lambda. <ul> <li><code>url</code> - String - The decoded URL of the request as received by S3 Object Lambda, excluding any authorization-related query parameters.</li> <li><code>headers</code> - Map - A map of string to strings containing the HTTP headers and their values from the original call, excluding any authorization-related headers. If the same header appears multiple times, their values are combined into a comma-delimited list. The case of the original headers is retained in this map.</li> </ul> <code>userIdentity</code> (Map) Map - Details about the identity that made the call to S3 Object Lambda. <ul> <li><code>type</code> - Strimg - The source of the temporary security credentials, such as Root, IAMUser, or Role.</li> <li><code>principalId</code> - String - The internal ID of the entity that was used to get credentials.</li> <li><code>arn</code> - String - The ARN of the principal that made the call. The last section of the ARN contains the user or role that made the call.</li> <li><code>accountId</code> - String - The account that owns the entity that granted permissions for the request. If the request was made with temporary security credentials, this is the account that owns the IAM user or role that was used to obtain credentials.</li> <li><code>accessKeyId</code> - String - The access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials. For security reasons, accessKeyId might not be present, or might be displayed as an empty string.</li> <li><code>userName</code> - String - TThe friendly name of the identity that made the call.</li> <li><code>sessionContext</code> - Optional - If the request was made with temporary security credentials, this element provides information about the      session that was created for those credentials.<ul> <li><code>attributes</code> - Session attributes.<ul> <li><code>creationDate</code> - String - The date and time when the temporary security credentials were issued. Represented in ISO 8601 basic notation.</li> <li><code>mfaAuthenticated</code> - Boolean - The value is true if the root user or IAM user whose credentials were used for the request also was authenticated with an MFA device; otherwise, false</li> </ul> </li> <li><code>sessionIssuer</code> - If the request was made with temporary security credentials, an element that provides information about how the credentials were obtained.<ul> <li><code>type</code> - String - The source of the temporary security credentials, such as Root, IAMUser, or Role.</li> <li><code>userName</code> - String - The friendly name of the user or role that issued the session.</li> <li><code>principalId</code> - String - The internal ID of the entity that was used to get credentials.</li> <li><code>arn</code> - String - The ARN of the source (account, IAM user, or role) that was used to get temporary security credentials.</li> <li><code>accountId</code> - String - The account that owns the entity that was used to get credentials.</li> </ul> </li> </ul> </li> </ul>"},{"location":"s3-object-lambda/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>xAmzRequestId</code></p>"},{"location":"s3-object-lambda/#examples","title":"Examples","text":"IAM User<pre><code>{\n  \"xAmzRequestId\": \"1a5ed718-5f53-471d-b6fe-5cf62d88d02a\",\n  \"getObjectContext\": {\n    \"inputS3Url\": \"https://myap-123412341234.s3-accesspoint.us-east-1.amazonaws.com/s3.txt?X-Amz-Security-Token=...\",\n    \"outputRoute\": \"io-iad-cell001\",\n    \"outputToken\": \"...\"\n  },\n  \"configuration\": {\n    \"accessPointArn\": \"arn:aws:s3-object-lambda:us-east-1:123412341234:accesspoint/myolap\",\n    \"supportingAccessPointArn\": \"arn:aws:s3:us-east-1:123412341234:accesspoint/myap\",\n    \"payload\": \"test\"\n  },\n  \"userRequest\": {\n    \"url\": \"/s3.txt\",\n    \"headers\": {\n      \"Host\": \"myolap-123412341234.s3-object-lambda.us-east-1.amazonaws.com\",\n      \"Accept-Encoding\": \"identity\",\n      \"X-Amz-Content-SHA256\": \"e3b0c44297fc1c149afbf4c8995fb92427ae41e4649b934ca495991b7852b855\"\n    }\n  },\n  \"userIdentity\": {\n    \"type\": \"IAMUser\",\n    \"principalId\": \"...\",\n    \"arn\": \"arn:aws:iam::123412341234:user/myuser\",\n    \"accountId\": \"123412341234\",\n    \"accessKeyId\": \"...\",\n    \"userName\": \"Alice\"\n  },\n  \"protocolVersion\": \"1.00\"\n}\n</code></pre> Temp Credentials<pre><code>{\n  \"xAmzRequestId\": \"requestId\",\n  \"getObjectContext\": {\n    \"inputS3Url\": \"https://my-s3-ap-111122223333.s3-accesspoint.us-east-1.amazonaws.com/example?X-Amz-Security-Token=&lt;snip&gt;\",\n    \"outputRoute\": \"io-use1-001\",\n    \"outputToken\": \"OutputToken\"\n  },\n  \"configuration\": {\n    \"accessPointArn\": \"arn:aws:s3-object-lambda:us-east-1:111122223333:accesspoint/example-object-lambda-ap\",\n    \"supportingAccessPointArn\": \"arn:aws:s3:us-east-1:111122223333:accesspoint/example-ap\",\n    \"payload\": \"{}\"\n  },\n  \"userRequest\": {\n    \"url\": \"https://object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com/example\",\n    \"headers\": {\n      \"Host\": \"object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com\",\n      \"Accept-Encoding\": \"identity\",\n      \"X-Amz-Content-SHA256\": \"e3b0c44298fc1example\"\n    }\n  },\n  \"userIdentity\": {\n    \"type\": \"AssumedRole\",\n    \"principalId\": \"principalId\",\n    \"arn\": \"arn:aws:sts::111122223333:assumed-role/Admin/example\",\n    \"accountId\": \"111122223333\",\n    \"accessKeyId\": \"accessKeyId\",\n    \"sessionContext\": {\n      \"attributes\": {\n        \"mfaAuthenticated\": \"false\",\n        \"creationDate\": \"Wed Mar 10 23:41:52 UTC 2021\"\n      },\n      \"sessionIssuer\": {\n        \"type\": \"Role\",\n        \"principalId\": \"principalId\",\n        \"arn\": \"arn:aws:iam::111122223333:role/Admin\",\n        \"accountId\": \"111122223333\",\n        \"userName\": \"Admin\"\n      }\n    }\n  },\n  \"protocolVersion\": \"1.00\"\n}\n</code></pre>"},{"location":"s3-object-lambda/#response","title":"Response","text":"<p>No specific response is required</p> <pre><code>{\"status_code\": 200}\n</code></pre>"},{"location":"s3-object-lambda/#resources","title":"Resources","text":"<ul> <li>Python - data class and utilities - Pip <code>aws-lambda-powertools</code></li> <li>Java - S3ObjectLambdaEvent - Maven <code>aws-lambda-java-events</code></li> </ul>"},{"location":"s3-object-lambda/#code-examples","title":"Code Examples","text":"<p>Example using AWS Lambda Powertools to upper case the file</p> app.py<pre><code>import boto3\nimport requests\n\nfrom aws_lambda_powertools import Logger\nfrom aws_lambda_powertools.logging.correlation_paths import S3_OBJECT_LAMBDA\nfrom aws_lambda_powertools.utilities.data_classes.s3_object_event import S3ObjectLambdaEvent\n\nlogger = Logger()\nsession = boto3.Session()\ns3 = session.client(\"s3\")\n\n@logger.inject_lambda_context(correlation_id_path=S3_OBJECT_LAMBDA, log_event=True)\ndef lambda_handler(event, context):\n    event = S3ObjectLambdaEvent(event)\n\n    # Get object from S3\n    response = requests.get(event.input_s3_url)\n    original_object = response.content.decode(\"utf-8\")\n\n    # Make changes to the object about to be returned\n    transformed_object = original_object.upper()\n\n    # Write object back to S3 Object Lambda\n    s3.write_get_object_response(\n        Body=transformed_object, RequestRoute=event.request_route, RequestToken=event.request_token\n    )\n\n    return {\"status_code\": 200}\n</code></pre>"},{"location":"s3-object-lambda/#documentation","title":"Documentation","text":"<ul> <li>S3 Feature - Amazon S3 Object Lambda</li> <li>Docs - Writing and debugging AWS Lambda functions for Amazon S3 Object Lambda Access Points</li> <li>Docs - Transforming objects with S3 Object Lambda</li> <li>Blog - Introducing Amazon S3 Object Lambda \u2013 Use Your Code to Process Data as It Is Being Retrieved from S3</li> <li>Workshop - S3 Object Lambda</li> </ul>"},{"location":"s3/","title":"S3 - Event Notification","text":"<p>Amazon S3 invokes your function asynchronously with an event that contains details about the object.</p>"},{"location":"s3/#request","title":"Request","text":"Event structure<pre><code>{  \n   \"Records\":[  \n      {  \n         \"eventVersion\":\"2.2\",\n         \"eventSource\":\"aws:s3\",\n         \"awsRegion\":\"us-west-2\",\n         \"eventTime\":\"The time, in ISO-8601 format, for example, 1970-01-01T00:00:00.000Z, when Amazon S3 finished processing the request\",\n         \"eventName\":\"event-type\",\n         \"userIdentity\":{  \n            \"principalId\":\"Amazon-customer-ID-of-the-user-who-caused-the-event\"\n         },\n         \"requestParameters\":{  \n            \"sourceIPAddress\":\"ip-address-where-request-came-from\"\n         },\n         \"responseElements\":{  \n            \"x-amz-request-id\":\"Amazon S3 generated request ID\",\n            \"x-amz-id-2\":\"Amazon S3 host that processed the request\"\n         },\n         \"s3\":{  \n            \"s3SchemaVersion\":\"1.0\",\n            \"configurationId\":\"ID found in the bucket notification configuration\",\n            \"bucket\":{  \n               \"name\":\"bucket-name\",\n               \"ownerIdentity\":{  \n                  \"principalId\":\"Amazon-customer-ID-of-the-bucket-owner\"\n               },\n               \"arn\":\"bucket-ARN\"\n            },\n            \"object\":{  \n               \"key\":\"object-key\",\n               \"size\":\"object-size in bytes\",\n               \"eTag\":\"object eTag\",\n               \"versionId\":\"object version if bucket is versioning-enabled, otherwise null\",\n               \"sequencer\": \"a string representation of a hexadecimal value used to determine event sequence, only used with PUTs and DELETEs\"\n            }\n         },\n         \"glacierEventData\": {\n            \"restoreEventData\": {\n               \"lifecycleRestorationExpiryTime\": \"The time, in ISO-8601 format, for example, 1970-01-01T00:00:00.000Z, of Restore Expiry\",\n               \"lifecycleRestoreStorageClass\": \"Source storage class for restore\"\n            }\n         }\n      }\n   ]\n}\n</code></pre>"},{"location":"s3/#request-fields","title":"Request fields","text":"Warning about records <p>Multiple records can be delivered in a single event</p> <p>Record fields</p> <code>eventVersion</code> (String) The eventVersion key value contains a major and minor version in the form <code>&lt;major&gt;</code>.<code>&lt;minor&gt;</code> <code>eventSource</code> (String) The AWS service from which the S3 event originated. For S3, this is aws:s3 <code>awsRegion</code> (String) aws region eg: us-east-1 <code>eventTime</code> (String) The time, in ISO-8601 format, for example, 1970-01-01T00:00:00.000Z, when S3 finished processing the request <code>eventName</code> (String) Event type. Supported event types eg: ObjectCreated:Put <code>userIdentity</code> (Object) Amazon customer ID of the user who caused the event <code>requestParameters</code> (Object) Contains <code>sourceIPAddress</code> of the request <code>responseElements</code> (Object) The responseElements key value is useful if you want to trace a request by following up with AWS Support. Both <code>x-amz-request-id</code> and <code>x-amz-id-2</code> help Amazon S3 trace an individual request. These values are the same as those that Amazon S3 returns in the response to the request that initiates the events, so they can be used to match the event to the request. <p>S3 fields</p> <code>s3SchemaVersion</code> (String) Should be '1.0' only <code>configurationId</code> (String) ID found in the bucket notification configuration <code>bucket</code> (Object) Details about the source S3 bucket <code>name</code> (String) S3 bucket name <code>ownerIdentity</code> (Object) Amazon customer ID of the user who owns the bucket <code>arn</code> (String) S3 Bucket ARN <code>object</code> (Object) S3 object / file that was created / modifieds <code>key</code> (String) The s3 <code>key</code> provides information about the bucket and object involved in the event. TIP: object key <p>The s3 object key name value is URL encoded. For example, \"red flower.jpg\" becomes \"red+flower.jpg\". In python you would <code>unquote_plus</code> to decode this correct</p> <code>size</code> (Number) Size of the object in bytes <code>eTag</code> (String) Etag of the object <code>versionId</code> (String) Object version if bucket is versioning-enabled, otherwise null <code>sequencer</code> (String) A string representation of a hexadecimal value used to determine event sequence, only used with PUTs and DELETEs"},{"location":"s3/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event s3 put\nsam local generate-event s3 delete\n</code></pre>"},{"location":"s3/#request-example","title":"Request example","text":"<pre><code>{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.1\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-2\",\n      \"eventTime\": \"2019-09-03T19:37:27.192Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"AWS:AIDAINPONIXQXHT3IKHL2\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"205.255.255.255\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"D82B88E5F771F645\",\n        \"x-amz-id-2\": \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj5NeC6qMa0emYBDXOo6QBU0Wo=\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"828aa6fc-f7b5-4305-8584-487c791949c1\",\n        \"bucket\": {\n          \"name\": \"DOC-EXAMPLE-BUCKET\",\n          \"ownerIdentity\": {\n            \"principalId\": \"A3I5XTEXAMAI3E\"\n          },\n          \"arn\": \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\"\n        },\n        \"object\": {\n          \"key\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"size\": 1305107,\n          \"eTag\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"sequencer\": \"0C0F6F405D6ED209E1\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"s3/#response","title":"Response","text":"<p>N/A</p>"},{"location":"s3/#resources","title":"Resources","text":"<ul> <li>Python - S3Event - Pip <code>aws-lambda-powertools</code></li> <li>Php - S3Event - Composer <code>bref/bref</code></li> <li>Typescript - S3Event - NPM <code>@types/aws-lambda</code></li> <li>Rust - S3Event - Cargo <code>aws_lambda_events</code></li> <li>Java - S3Event - Maven <code>aws-lambda-java-events</code></li> </ul> <p>Lambda Handlers</p> <ul> <li>Python - on_s3_change - Pip <code>chalice</code></li> <li>Ruby - s3_event - Gem <code>jets</code></li> </ul>"},{"location":"s3/#code-examples","title":"Code examples","text":"<p>Code examples using S3 bucket notifications</p> <ul> <li>Forwarding Emails Based on Content Language with Amazon Simple Email Service</li> </ul> <p>Python example decoding the object using <code>unquote_plus</code></p> AWS Lambda Powertools for Python example<pre><code>from urllib.parse import unquote_plus\nfrom aws_lambda_powertools.utilities.data_classes import event_source, S3Event\n\n@event_source(data_class=S3Event)\ndef lambda_handler(event: S3Event, context):\n    bucket_name = event.bucket_name\n\n    # Multiple records can be delivered in a single event\n    for record in event.records:\n        object_key = unquote_plus(record.s3.get_object.key)\n\n        do_something_with(f\"{bucket_name}/{object_key}\")\n</code></pre>"},{"location":"s3/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon S3</li> <li>Event message structure</li> </ul>"},{"location":"secrets-manager/","title":"Secrets Manager","text":"<p>Secrets Manager uses a Lambda function to rotate the secret for a secured service or database. Event-driven and synchronous invocation</p>"},{"location":"secrets-manager/#request","title":"Request","text":""},{"location":"secrets-manager/#request-structure","title":"Request structure","text":"<pre><code>{\n  \"Step\" : \"request.type\",\n  \"SecretId\" : \"string\",\n  \"ClientRequestToken\" : \"string\"\n}\n</code></pre>"},{"location":"secrets-manager/#request-fields","title":"Request fields","text":"<code>Step</code> (String) One of <code>createSecret</code>, <code>setSecret</code>, <code>testSecret</code> or <code>finishSecret</code> <ul> <li><code>createSecret</code> - The first step of rotation is to create a new version of the secret. Depending on your rotation strategy,   the new version can contain a new password, a new username and password, or more secret information. Secrets   Manager labels the new version with the staging label <code>AWSPENDING</code>.</li> <li><code>setSecret</code> - Second step, rotation changes the credentials in the database or service to match the new credentials in the   <code>AWSPENDING</code> version of the secret.</li> <li><code>testSecret</code> - Third step, rotation tests the <code>AWSPENDING</code> version of the secret by using it to access the database or service.</li> <li><code>finishSecret</code> - Final step, rotation moves the label <code>AWSCURRENT</code> from the previous secret version to this version.   Secrets Manager adds the <code>AWSPREVIOUS</code> staging label to the previous version, so that you retain the last known   good version of the secret.</li> </ul> <code>SecretId</code> (String) The secret ARN or other identifier <code>ClientRequestToken</code> (String) The ClientRequestToken of the secret version Example createSecret event<pre><code>{\n  \"ClientRequestToken\": \"51f72378-6a5d-5dc7-8fd8-29e4319f482a\",\n  \"SecretId\": \"arn:aws:secretsmanager:us-east-2:111122223333:secret:DatabaseSecret\",\n  \"Step\": \"createSecret\"\n}\n</code></pre>"},{"location":"secrets-manager/#response","title":"Response","text":"<p>N/A</p>"},{"location":"secrets-manager/#resources","title":"Resources","text":"<ul> <li>Typescript - SecretsManagerRotationEvent - NPM <code>@types/aws-lambda</code></li> <li>Java - SecretsManagerRotationEvent</li> <li>Python - Secrets Manager rotation function templates</li> </ul>"},{"location":"secrets-manager/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Secrets Manager</li> <li>How log rotation works</li> <li>Customize a Lambda rotation function for Secrets Manager</li> </ul>"},{"location":"ses/","title":"AWS SES - Receiving emails","text":"<p>The Lambda action calls your code through a Lambda function and, optionally, notifies you through Amazon SNS.</p> <p>Invocation type, the invocation type of the Lambda function. An invocation type of <code>RequestResponse</code> means that the execution of the function results in an immediate response. An invocation type of Event means that the function is invoked asynchronously. We recommend that you use Event invocation type unless synchronous execution is required for your use case..</p> <p>Requirements</p> <ul> <li>The Lambda function that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email.</li> <li>The Amazon SNS topic that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email.</li> </ul>"},{"location":"ses/#limits","title":"Limits","text":"<ul> <li>There is a 30-second timeout on <code>RequestResponse</code> invocations.</li> <li>Not available in all regions support receiving emails</li> </ul> Region Name Email Receiving Endpoint US East (N. Virginia) inbound-smtp.us-east-1.amazonaws.com US West (Oregon) inbound-smtp.us-west-2.amazonaws.com Europe (Ireland) inbound-smtp.eu-west-1.amazonaws.com"},{"location":"ses/#soft-limits","title":"Soft Limits","text":"Resource Default quota Description Maximum message size (MB) 30 The maximum message size that can be sent to your identity and stored in an Amazon S3 bucket."},{"location":"ses/#request","title":"Request","text":""},{"location":"ses/#generating-sample-event","title":"Generating sample event","text":"<p>Via AWS SAM CLI you can generate sample events</p> <pre><code># Get help via following command\nsam local generate-event ses email-receiving -h\n# Generate event do custom region\nsam local generate-event ses email-receiving  --region us-west-1  --dns-suffix us-west-1.amazonaws.com\n</code></pre>"},{"location":"ses/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>Records[*].mail.messageId</code></p>"},{"location":"ses/#request-fields","title":"Request fields","text":"<p><code>Records</code> - array of Amazon SES events</p> <code>eventSource</code> (String) The AWS service from which the SES event record originated. For SES, this is <code>aws:ses</code> <code>eventVersion</code> (String) The eventVersion key value contains a major and minor version in the form .. <code>mail</code> (Object) The mail object contains the email message. <code>mail.timestamp</code> (String) String that contains the time at which the email was received, in ISO8601 format. <code>mail.source</code> (String) String that contains the email address (specifically, the envelope MAIL FROM address) that the email was sent from. <code>mail.messageId</code> (String) String that contains the unique ID assigned to the email by Amazon SES. If the email was delivered to Amazon S3, the message ID is also the Amazon S3 object key that was used to write the message to your Amazon S3 bucket. <code>mail.destination</code> (List of strings) A complete list of all recipient addresses (including To: and CC: recipients) from the MIME headers of the incoming email. <code>mail.headersTruncated</code> (Boolean) String that specifies whether the headers were truncated in the notification, which will happen if the headers are larger than 10 KB. Possible values are true and false. <code>mail.headers</code> (Object) A list of Amazon SES headers and your custom headers. Each header in the list has a name field and a value field <code>mail.commonHeaders</code> (Object) A list of headers common to all emails. Each header in the list is composed of a name and a value. <code>commonHeaders.returnPath</code> (String) The values in the Return-Path header of the email. <code>commonHeaders.from</code> (String) The values in the From header of the email. <code>commonHeaders.date</code> (String) The date and time when Amazon SES received the message. <code>commonHeaders.to</code> (List of strings) The values in the To header of the email. <code>commonHeaders.messageId</code> (String) The ID of the original message. <code>commonHeaders.subject</code> (String) The value of the Subject header for the email. <code>commonHeaders.cc</code> (Optional, List of strings) The values in the CC header of the email. <code>commonHeaders.bcc</code> (Optional, List of strings) The values in the BCC header of the email. <code>commonHeaders.sender</code> (Optional, list of strings) The values in the Sender header of the email. <code>commonHeaders.replyTo</code> (Optional, list of strings) The values in the replyTo header of the email. <code>receipt</code> (Object) The receipt object contains information about the email message. <code>receipt.timestamp</code> (String) String that specifies the date and time at which the action was triggered, in ISO 8601 format. <code>receipt.processingTimeMillis</code> (Integer) String that specifies the period, in milliseconds, from the time Amazon SES received the message to the time it triggered the action. <code>receipt.recipients</code> (List of strings) A list of recipients (specifically, the envelope RCPT TO addresses) that were matched by the active receipt rule. The addresses listed here may differ from those listed by the destination field in the mail object. <code>receipt.spamVerdict</code> (Object) Object that indicates whether the message is spam. Possible values: <code>PASS</code>, <code>FAIL</code>, <code>GRAY</code>, <code>PROCESSING_FAILED</code>, <code>DISABLED</code> <code>receipt.virusVerdict</code> (Object) Object that indicates whether the message contains a virus. Possible values: <code>PASS</code>, <code>FAIL</code>, <code>GRAY</code>, <code>PROCESSING_FAILED</code>, <code>DISABLED</code> <code>receipt.spfVerdict</code> (Object) Object that indicates whether the Sender Policy Framework (SPF) check passed. Possible values: <code>PASS</code>, <code>FAIL</code>, <code>GRAY</code>, <code>PROCESSING_FAILED</code>, <code>DISABLED</code> <code>receipt.dkimVerdict</code> (Object) Object that indicates whether the DomainKeys Identified Mail (DKIM) check passed Possible values: <code>PASS</code>, <code>FAIL</code>, <code>GRAY</code>, <code>PROCESSING_FAILED</code>, <code>DISABLED</code> <code>receipt.dmarcVerdict</code> (Object) Object that indicates whether the Domain-based Message Authentication, Reporting &amp; Conformance (DMARC) check passed. Possible values: <code>PASS</code>, <code>FAIL</code>, <code>GRAY</code>, <code>PROCESSING_FAILED</code>, <code>DISABLED</code> <code>receipt.dmarcPolicy</code> (String) ndicates the Domain-based Message Authentication, Reporting &amp; Conformance (DMARC) settings for the sending domain. This field only appears if the message fails DMARC authentication. Possible values for this field are: <code>none</code>, <code>quarantine</code>, <code>reject</code> <code>receipt.action</code> (Object) Object that encapsulates information about the action that was executed. <code>receipt.action.type</code> (String) The type of action that was executed. Possible values are <code>S3</code>, <code>SNS</code>, <code>Bounce</code>, <code>Lambda</code>, <code>Stop</code>, and <code>WorkMail</code> <code>receipt.action.topicArn</code> (Optional, String) The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. You can find the ARN of a topic by using the ListTopics operation in Amazon SNS. <code>receipt.action.functionArn</code> (String) String that contains the ARN of the Lambda function that was triggered. Present only for the Lambda action type."},{"location":"ses/#example-event","title":"Example event","text":"Example Amazon SES message event<pre><code>{\n  \"Records\": [\n    {\n      \"eventVersion\": \"1.0\",\n      \"ses\": {\n        \"mail\": {\n          \"commonHeaders\": {\n            \"from\": [\n              \"Amazon Web Services &lt;aws@amazon.com&gt;\"\n            ],\n            \"to\": [\n              \"lambda@amazon.com\"\n            ],\n            \"returnPath\": \"aws@amazon.com\",\n            \"messageId\": \"&lt;CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com&gt;\",\n            \"date\": \"Mon, 5 Dec 2016 18:40:08 -0800\",\n            \"subject\": \"Test Subject\"\n          },\n          \"source\": \"aws@amazon.com\",\n          \"timestamp\": \"1970-01-01T00:00:00.123Z\",\n          \"destination\": [\n            \"lambda@amazon.com\"\n          ],\n          \"headers\": [\n            {\n              \"name\": \"Return-Path\",\n              \"value\": \"&lt;aws@amazon.com&gt;\"\n            },\n            {\n              \"name\": \"Received\",\n              \"value\": \"from mx.amazon.com (mx.amazon.com [127.0.0.1]) by inbound-smtp.us-east-1.amazonaws.com with SMTP id 6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1 for lambda@amazon.com; Tue, 06 Dec 2016 02:40:10 +0000 (UTC)\"\n            },\n            {\n              \"name\": \"DKIM-Signature\",\n              \"value\": \"v=1; a=rsa-sha256; c=relaxed/relaxed; d=iatn.net; s=amazon; h=mime-version:from:date:message-id:subject:to; bh=chlJxa/vZ11+0O9lf4tKDM/CcPjup2nhhdITm+hSf3c=; b=SsoNPK0wX7umtWnw8pln3YSib+E09XO99d704QdSc1TR1HxM0OTti/UaFxVD4e5b0+okBqo3rgVeWgNZ0sWZEUhBaZwSL3kTd/nHkcPexeV0XZqEgms1vmbg75F6vlz9igWflO3GbXyTRBNMM0gUXKU/686hpVW6aryEIfM/rLY=\"\n            },\n            {\n              \"name\": \"MIME-Version\",\n              \"value\": \"1.0\"\n            },\n            {\n              \"name\": \"From\",\n              \"value\": \"Amazon Web Services &lt;aws@amazon.com&gt;\"\n            },\n            {\n              \"name\": \"Date\",\n              \"value\": \"Mon, 5 Dec 2016 18:40:08 -0800\"\n            },\n            {\n              \"name\": \"Message-ID\",\n              \"value\": \"&lt;CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com&gt;\"\n            },\n            {\n              \"name\": \"Subject\",\n              \"value\": \"Test Subject\"\n            },\n            {\n              \"name\": \"To\",\n              \"value\": \"lambda@amazon.com\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"multipart/alternative; boundary=94eb2c0742269658b10542f452a9\"\n            }\n          ],\n          \"headersTruncated\": false,\n          \"messageId\": \"6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1\"\n        },\n        \"receipt\": {\n          \"recipients\": [\n            \"lambda@amazon.com\"\n          ],\n          \"timestamp\": \"1970-01-01T00:00:00.123Z\",\n          \"spamVerdict\": {\n            \"status\": \"PASS\"\n          },\n          \"dkimVerdict\": {\n            \"status\": \"PASS\"\n          },\n          \"dmarcVerdict\": {\n            \"status\": \"PASS\"\n          },\n          \"dmarcPolicy\": \"reject\",\n          \"processingTimeMillis\": 574,\n          \"action\": {\n            \"type\": \"Lambda\",\n            \"invocationType\": \"Event\",\n            \"functionArn\": \"arn:aws:lambda:us-east-1:000000000000:function:my-ses-lambda-function\"\n          },\n          \"spfVerdict\": {\n            \"status\": \"PASS\"\n          },\n          \"virusVerdict\": {\n            \"status\": \"PASS\"\n          }\n        }\n      },\n      \"eventSource\": \"aws:ses\"\n    }\n  ]\n}\n</code></pre>"},{"location":"ses/#response","title":"Response","text":"<p>Response when doing a synchronous <code>RequestResponse</code> invocations must be in the follow format </p> <p><code>disposition</code> (String)</p> <ul> <li><code>STOP_RULE</code> - No further actions in the current receipt rule will be processed, but further receipt rules can be processed.</li> <li><code>STOP_RULE_SET</code> - No further actions or receipt rules will be processed.</li> <li><code>CONTINUE</code> - This means that further actions and receipt rules can be processed.</li> </ul> <pre><code>{\n  \"disposition\": \"STOP_RULE_SET\"\n}\n</code></pre>"},{"location":"ses/#resources","title":"Resources","text":"<p>Typing and utility class</p> <ul> <li>Typescript - SESEvent - NPM package: <code>@types/aws-lambda</code></li> <li>Go - SimpleEmailEvent - <code>github.com/aws/aws-lambda-go/events</code></li> <li>Python - SESEvent - PIP package: <code>aws-lambda-powertools</code></li> <li>DotNet - SimpleEmailEvent - NuGet package: <code>Amazon.Lambda.SimpleEmailEvents</code></li> <li>Rust - SimpleEmailEvent</li> </ul> <p>Full solutions</p> <ul> <li>NodeJS - AWS Lambda SES Email Forwarder - A Node.js script for AWS Lambda that uses the inbound/outbound capabilities of AWS Simple Email Service (SES) to run a \"serverless\" email forwarding service.</li> </ul> <p>Code examples</p> <ul> <li>Serverless Framework - node - email receiving</li> </ul>"},{"location":"ses/#example","title":"Example","text":"<p>Example use case of filtering incoming emails by subject and forwarding to a different email address.</p> <p> </p> <p>CDK infrastucture code setting up the receipt rules</p> CDK code for receipt rules<pre><code>ReceiptRuleSet(\n  this,\n  \"RecipientRuleSet\",\n  ReceiptRuleSetProps\n    .builder()\n    .receiptRuleSetName(\"RevieveReceipt-$namespace\")\n    .dropSpam(true)\n    .rules(\n      listOf(\n        ReceiptRuleOptions\n          .builder()\n          // List of recipients to forward\n          .recipients(listOf(recipientEmail))\n          .scanEnabled(true)\n          .actions(\n            listOf(\n                // Filter out emails by subject line\n                Lambda(\n                    LambdaProps\n                        .builder()\n                        .function(subjectFilterLambda)\n                        .invocationType(LambdaInvocationType.REQUEST_RESPONSE)\n                        .build()\n                ),\n                // Save email to S3\n                S3(\n                    S3Props\n                        .builder()\n                        .bucket(emailBucket)\n                        .objectKeyPrefix(\"ar\")\n                        .build()\n                ),\n                // Forward email to recipients\n                Lambda(\n                    LambdaProps\n                        .builder()\n                        .function(receiveLambda)\n                        .invocationType(LambdaInvocationType.EVENT)\n                        .build()\n                )\n            )\n          )\n          .build()\n      )\n    )\n    .build()\n)\n</code></pre> <p>Example subject filtering Lambda</p> subjectFilterLambda.py<pre><code>import os\nfrom aws_lambda_powertools import Tracer, Logger\n\ntracer = Tracer(service=\"example-ses-filter\")\nlogger = Logger(service=\"example-ses-filter\")\nallow_mail_source = os.environ[\"MAIL_SOURCE\"]\nallow_subjects = os.environ[\"MAIL_SUBJECTS\"].split(\";\")\n\n\n@tracer.capture_lambda_handler\n@logger.inject_lambda_context\ndef lambda_handler(event: dict, _) -&gt; dict:\n    \"\"\"Simple Lambda that filters out emails that does not match `MAIL_SOURCE` and `MAIL_SUBJECTS`\"\"\"\n\n    records = event.get(\"Records\")\n    if records is None or len(records) == 0:\n        return {\"disposition\": \"STOP_RULE_SET\"}\n\n    record = records[0]\n    mail = record[\"ses\"][\"mail\"]\n\n    mail_source: str = mail[\"source\"]\n    if mail_source != allow_mail_source:\n        logger.info(\"SKIP(source not handled) mail_source: %s\", mail_source)\n        return {\"disposition\": \"STOP_RULE_SET\"}\n\n    mail_subject: str = mail[\"commonHeaders\"][\"subject\"]\n    tracer.put_metadata(key=\"mail_subject\", value=mail_subject)\n    if any(allow_subject.strip() in mail_subject for allow_subject in allow_subjects):\n        return {\"disposition\": \"CONTINUE\"}\n\n    logger.info(\"SKIP(subject not handled) mail_subject: %s\", mail_subject)\n    return {\"disposition\": \"STOP_RULE_SET\"}\n</code></pre>"},{"location":"ses/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon SES</li> <li>SES - Invoke Lambda function action</li> <li>Blog - Replace traditional email mailbox polling with real-time reads using Amazon SES and Lambda</li> <li>Blog - Forward Incoming Email to an External Destination</li> <li>Blog - Receive and Process Incoming Email with Amazon SES</li> </ul>"},{"location":"sns/","title":"SNS","text":"<p>Amazon SNS invokes your function asynchronously with an event that contains a message and metadata.</p>"},{"location":"sns/#request","title":"Request","text":"<code>EventVersion</code> (String) Event version should be 1.0 <code>EventSubscriptionArn</code> (String) Event subscription arn <code>EventSource</code> (String) The AWS service from which the SNS event record originated. For SNS, this is <code>aws:sns</code> <code>Sns.SignatureVersion</code> (String) Version of the Amazon SNS signature used, should be 1 <code>Sns.Timestamp</code> (String) The time (GMT) when the subscription confirmation was sent. <code>Sns.Signature</code> (String) Base64-encoded \"SHA1withRSA\" signature of the Message, MessageId, Type, Timestamp, and TopicArn values. <code>Sns.SigningCertUrl</code> (String) The URL to the certificate that was used to sign the message. <code>Sns.MessageId</code> (String) A Universally Unique Identifier, unique for each message published. For a message that Amazon SNS resends during a  retry, the message ID of the original message is used. <code>Sns.Message</code> (String) A string that describes the message. <code>Sns.Type</code> (String) The type of message. For a subscription confirmation, the type is <code>SubscriptionConfirmation</code>. <code>Sns.UnsubscribeUrl</code> (String) A URL that you can use to unsubscribe the endpoint from this topic. If you visit this URL, Amazon SNS unsubscribes  the endpoint and stops sending notifications to this endpoint. <code>Sns.TopicArn</code> (String) The Amazon Resource Name (ARN) for the topic that this endpoint is subscribed to. <code>Sns.Subject</code> (String) The Subject parameter specified when the notification was published to the topic. <code>Sns.MessageAttributes.Type</code> (String) The supported message attribute data types are <code>String</code>, <code>String.Array</code>, <code>Number</code>, and <code>Binary</code>. <code>Sns.MessageAttributes.Value</code> (String) The user-specified message attribute value. Example Amazon SNS message event<pre><code>{\n  \"Records\": [\n    {\n      \"EventVersion\": \"1.0\",\n      \"EventSubscriptionArn\": \"arn:aws:sns:us-east-2:123456789012:sns-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n      \"EventSource\": \"aws:sns\",\n      \"Sns\": {\n        \"SignatureVersion\": \"1\",\n        \"Timestamp\": \"2019-01-02T12:45:07.000Z\",\n        \"Signature\": \"tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r==\",\n        \"SigningCertUrl\": \"https://sns.us-east-2.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem\",\n        \"MessageId\": \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\",\n        \"Message\": \"Hello from SNS!\",\n        \"MessageAttributes\": {\n          \"Test\": {\n            \"Type\": \"String\",\n            \"Value\": \"TestString\"\n          },\n          \"TestBinary\": {\n            \"Type\": \"Binary\",\n            \"Value\": \"TestBinary\"\n          }\n        },\n        \"Type\": \"Notification\",\n        \"UnsubscribeUrl\": \"https://sns.us-east-2.amazonaws.com/?Action=Unsubscribe&amp;amp;SubscriptionArn=arn:aws:sns:us-east-2:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n        \"TopicArn\": \"arn:aws:sns:us-east-2:123456789012:sns-lambda\",\n        \"Subject\": \"TestInvoke\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"sns/#generating-sample-events","title":"Generating sample events","text":"<p>Via AWS SAM CLI you can generate sample events</p> <pre><code># For help run\nsam local generate-event sns notification -h\n# Generating a sample event with defaults\nsam local generate-event sns notification\n</code></pre>"},{"location":"sns/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>Sns.MessageId</code></p>"},{"location":"sns/#response","title":"Response","text":"<p>N/A</p>"},{"location":"sns/#resources","title":"Resources","text":"<p>Input types for Amazon SNS events</p> <ul> <li>Java SNSEvent</li> <li>DotNet - SNSEvent</li> <li>Go - SNS</li> <li>Python - SNSEvent</li> <li>Php - SnsEvent - Composer <code>bref/bref</code></li> </ul> <p>Full handler and infrastructure code solutions</p> <ul> <li>Ruby - sns_event - Gem <code>jets</code></li> <li>Python - on_sns_message - pip <code>chalice</code></li> </ul>"},{"location":"sns/#documentation","title":"Documentation","text":"<ul> <li>Using AWS Lambda with Amazon SNS</li> <li>Blog - Invoking AWS Lambda functions via Amazon SNS</li> <li>Youtube - AWS SNS to Lambda Tutorial in Python | Step by Step</li> </ul>"},{"location":"sqs/","title":"SQS","text":"<p>Lambda polls the queue and invokes your Lambda function synchronously with an event that contains queue messages. By default, Lambda polls up to 10 messages in your queue at once and sends that batch to your function. </p>"},{"location":"sqs/#request","title":"Request","text":""},{"location":"sqs/#request-fields","title":"Request fields","text":"<p><code>Records</code> - An array of records.</p> <code>messageId</code> (String) A unique identifier for the message. A messageId is considered unique across all AWS accounts  for an extended period of time. <code>receiptHandle</code> (String) An identifier associated with the act of receiving the message.   A new receipt handle is returned every time you receive a message. When deleting a message,   you provide the last received receipt handle to delete the message. <code>body</code> (String) The message's contents (not URL-encoded). <code>attributes</code> (Object) A map of the attributes requested in ReceiveMessage to their respective values. <ul> <li><code>AWSTraceHeader</code> (Optional, String) - Returns the AWS X-Ray trace header string.</li> <li><code>ApproximateReceiveCount</code> (String) - Returns the number of times a message has been received across all queues but not deleted.</li> <li><code>SentTimestamp</code> (String) - Returns the time the message was sent to the queue (epoch time in milliseconds).</li> <li><code>SenderId</code> (String) - For an IAM user, returns the IAM user ID, For an IAM role, returns the IAM role ID</li> <li><code>ApproximateFirstReceiveTimestamp</code> (String) - Returns the time the message was first received from the queue (epoch time in milliseconds).</li> <li><code>SequenceNumber</code> (Optional, String) - The large, non-consecutive number that Amazon SQS assigns to each message.</li> <li><code>MessageGroupId</code> (Optional, String) - The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group (however, messages that belong to different message groups might be processed out of order).</li> <li><code>MessageDeduplicationId</code> (Optional, String) - The token used for deduplication of sent messages. If a message with a particular message deduplication ID is sent successfully, any messages sent with the same message deduplication ID are accepted successfully but aren't delivered during the 5-minute deduplication interval.</li> </ul> <code>messageAttributes</code> (Object) Each message attribute consists of a Name, Type, and Value. <code>md5OfBody</code> (String) An MD5 digest of the non-URL-encoded message body string. <code>eventSource</code> (String) The AWS service from which the SQS record originated. For SQS, this is <code>aws:sqs</code> <code>eventSourceARN</code> (String) The Amazon Resource Name (ARN) of the event sourc <code>awsRegion</code> (String) aws region eg: us-east-1"},{"location":"sqs/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event sqs receive-message\n</code></pre>"},{"location":"sqs/#example-event","title":"Example event","text":"Example Amazon SQS message event (standard queue)<pre><code>{\n  \"Records\": [\n    {\n      \"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",\n      \"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",\n      \"body\": \"Test message.\",\n      \"attributes\": {\n        \"ApproximateReceiveCount\": \"1\",\n        \"SentTimestamp\": \"1545082649183\",\n        \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n        \"ApproximateFirstReceiveTimestamp\": \"1545082649185\"\n      },\n      \"messageAttributes\": {},\n      \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n      \"eventSource\": \"aws:sqs\",\n      \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:my-queue\",\n      \"awsRegion\": \"us-east-2\"\n    },\n    {\n      \"messageId\": \"2e1424d4-f796-459a-8184-9c92662be6da\",\n      \"receiptHandle\": \"AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...\",\n      \"body\": \"Test message.\",\n      \"attributes\": {\n        \"ApproximateReceiveCount\": \"1\",\n        \"SentTimestamp\": \"1545082650636\",\n        \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n        \"ApproximateFirstReceiveTimestamp\": \"1545082650649\"\n      },\n      \"messageAttributes\": {},\n      \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n      \"eventSource\": \"aws:sqs\",\n      \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:my-queue\",\n      \"awsRegion\": \"us-east-2\"\n    }\n  ]\n}\n</code></pre> Example Amazon SQS message event (FIFO queue)<pre><code>{\n  \"Records\": [\n    {\n      \"messageId\": \"11d6ee51-4cc7-4302-9e22-7cd8afdaadf5\",\n      \"receiptHandle\": \"AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...\",\n      \"body\": \"Test message.\",\n      \"attributes\": {\n        \"ApproximateReceiveCount\": \"1\",\n        \"SentTimestamp\": \"1573251510774\",\n        \"SequenceNumber\": \"18849496460467696128\",\n        \"MessageGroupId\": \"1\",\n        \"SenderId\": \"AIDAIO23YVJENQZJOL4VO\",\n        \"MessageDeduplicationId\": \"1\",\n        \"ApproximateFirstReceiveTimestamp\": \"1573251510774\"\n      },\n      \"messageAttributes\": {},\n      \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n      \"eventSource\": \"aws:sqs\",\n      \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:fifo.fifo\",\n      \"awsRegion\": \"us-east-2\"\n    }\n  ]\n}\n</code></pre>"},{"location":"sqs/#response","title":"Response","text":"<p>Success and failure conditions</p> <p>Lambda treats a batch as a complete success if your function returns any of the following:</p> <ul> <li>An empty <code>batchItemFailures</code> list</li> <li>A null <code>batchItemFailures</code> list</li> <li>An empty EventResponse</li> <li>A <code>null</code> EventResponse</li> </ul> <p>Lambda treats a batch as a complete failure if your function returns any of the following:</p> <ul> <li>An invalid JSON response</li> <li>An empty string <code>itemIdentifier</code></li> <li>A null <code>itemIdentifier</code></li> <li>An <code>itemIdentifier</code> with a bad key name</li> <li>An <code>itemIdentifier</code> value with a message ID that doesn't exist</li> </ul> Example of partial failures<pre><code>{\n    \"batchItemFailures\": [\n        {\n            \"itemIdentifier\": \"244fc6b4-87a3-44ab-83d2-361172410c3a\"\n        }\n    ]\n}\n</code></pre>"},{"location":"sqs/#resources","title":"Resources","text":"<p>Typings in different languages</p> <ul> <li>SQSEvent - Python - PIP <code>aws-lambda-powertools</code></li> <li>SQSEvent - Go - Go <code>github.com/aws/aws-lambda-go/events</code></li> <li>SqsEvent - Php - Composer <code>bref/bref</code></li> <li>SQSEvent - Java</li> <li>SQSEvent - DotNet</li> <li>SQSEvent - Typescript</li> </ul> <p>Full event handler</p> <ul> <li>SQS Batch Handler - Python - PIP <code>aws-lambda-powertools</code></li> <li>SQS Events - Ruby - GEM <code>jets</code></li> <li>on_sqs_message - Python - PIP <code>chalice</code></li> </ul>"},{"location":"sqs/#code-examples","title":"Code Examples","text":"Example S3 batch handler using AWS Lambda Powertools (Python)<pre><code>import json\n\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.utilities.batch import BatchProcessor, EventType, batch_processor\nfrom aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nprocessor = BatchProcessor(event_type=EventType.SQS)\ntracer = Tracer()\nlogger = Logger()\n\n@tracer.capture_method\ndef record_handler(record: SQSRecord):\n    payload: str = record.body\n    if payload:\n        item: dict = json.loads(payload)\n    ...\n\n@logger.inject_lambda_context\n@tracer.capture_lambda_handler\n@batch_processor(record_handler=record_handler, processor=processor)\ndef lambda_handler(event, context: LambdaContext):\n    return processor.response()\n</code></pre>"},{"location":"sqs/#documentation","title":"Documentation","text":"<ul> <li>Using Lambda with Amazon SQS</li> <li>Tutorial: Using Lambda with Amazon SQS</li> </ul>"},{"location":"work-mail/","title":"Amazon WorkMail","text":"<p>Can be configured to invoke your function synchrously (Use this configuration to modify email content, and to control inbound or outbound email flow for use cases such as blocking delivery of sensitive email messages, removing attachment, adding disclaimers, and so on.) or asynchrously (This configuration does not affect email delivery and is used for tasks such as collecting metrics for inbound or outbound email messages.).</p>"},{"location":"work-mail/#limits","title":"Limits","text":"<p>Payload limit</p> <ul> <li>Payload size limit 128 KB, before being trancated</li> </ul> <p>Synchronous Run Lambda action limits</p> <ul> <li>Lambda functions must respond within 15 seconds, or be treated as failed invocations.</li> <li>Lambda function responses up to 256 KB are allowed.</li> <li>Up to 10 unique actions are allowed in the response. Actions greater than 10 are subject to the configured Fallback action.</li> <li>Up to 500 recipients are allowed for outbound Lambda functions.</li> <li>The maximum value for Rule timeout is 240 minutes. If the minimum value of 0 is configured, there are no retries before Amazon WorkMail applies the fallback action.</li> </ul>"},{"location":"work-mail/#request","title":"Request","text":""},{"location":"work-mail/#request-structure","title":"Request structure","text":"<pre><code>{\n    \"summaryVersion\":\"2018-10-10\",\n    \"envelope\":{\n       \"mailFrom\":{\n          \"address\":\"from@example.com\"\n       },\n       \"recipients\":[\n          {\n             \"address\":\"recipient1@example.com\"\n          },\n          {\n             \"address\":\"recipient2@example.com\"\n          }\n       ]\n    },\n    \"sender\":{\n       \"address\":\"sender@example.com\"\n    },\n    \"subject\":\"Hello From Amazon WorkMail!\",\n    \"messageId\":\"00000000-0000-0000-0000-000000000000\",\n    \"invocationId\":\"00000000000000000000000000000000\",\n    \"flowDirection\":\"INBOUND\",\n    \"truncated\":false\n }\n</code></pre>"},{"location":"work-mail/#request-fields","title":"Request fields","text":"<code>summaryVersion</code> (String) AWS WorkMail Message Summary Version <code>mailFrom</code> (Object) Mail from email address <code>recipients</code> (List) List of all of the email recipients <code>sender</code> (Object) Sender email address <code>subject</code> (String) Email subject (Truncated to first 256 chars)\" <code>messageId</code> (String) Message id for retrieval using workmail flow API <code>invocationId</code> (String) Id of this Lambda invocation. Useful for detecting retries and avoiding duplication <code>flowDirection</code> (String) Indicating direction of email flow. Value is either \"INBOUND\" or \"OUTBOUND\" <code>truncated</code> (Boolean) Boolean indicating if any field in message was truncated due to size limitations"},{"location":"work-mail/#getting-the-correlation-id","title":"Getting the correlation id","text":"<p>JSON path to correlation id: <code>invocationId</code></p>"},{"location":"work-mail/#generating-sample-events","title":"Generating sample events","text":"<pre><code>sam local generate-event workmail email\n</code></pre>"},{"location":"work-mail/#response","title":"Response","text":"<p>Response format only applies to synchronous invocations.</p>"},{"location":"work-mail/#response-schema","title":"Response schema","text":"Synchronous Run Lambda response schema<pre><code>{\n      \"actions\": [                          \n      {\n        \"action\" : {\n          \"type\": \"string\",\n          \"parameters\": { various }\n        },\n        \"recipients\": list of strings,      \n        \"allRecipients\": boolean            \n      }\n    ]\n}\n</code></pre> <code>actions</code> (Array) Required, should contain at least 1 list element <code>type</code> (String) Required. Can be \"BOUNCE\", \"DROP\" or \"DEFAULT\" <code>parameters</code> (String) Optional. For bounce, <code>various</code> can be <code>{\"bounceMessage\": \"message that goes in bounce mail\"}</code> <code>recipients</code> (Optional, list of strings) Optional. Indicates list of recipients for which this action applies <code>allRecipients</code> (Optional, boolean) Optional. Indicates whether this action applies to all recipients"},{"location":"work-mail/#response-examples","title":"Response examples","text":"Example bounce response<pre><code>{\n  \"actions\": [\n    {\n      \"action\": {\n        \"type\": \"BOUNCE\",\n        \"parameters\": {\n          \"bounceMessage\": \"Email in breach of company policy.\"\n        }\n      },\n      \"allRecipients\": true\n    }\n  ]\n}\n</code></pre> Example response<pre><code>{\n  \"actions\": [\n    {\n      \"action\": {\n        \"type\": \"DEFAULT\"\n      },\n      \"allRecipients\": true\n    },\n    {\n      \"action\": {\n        \"type\": \"DROP\"\n      },\n      \"recipients\": [\n        \"drop-recipient@example.com\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"work-mail/#resources","title":"Resources","text":"<ul> <li>GitHub - Amazon WorkMail Lambda Templates - Python - Serverless applications for Amazon WorkMail.</li> </ul>"},{"location":"work-mail/#documentation","title":"Documentation","text":"<ul> <li>Configuring AWS Lambda for Amazon WorkMail</li> </ul>"}]}